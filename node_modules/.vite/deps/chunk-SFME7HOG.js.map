{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/webAudio/components/spatialWebAudioUpdaterComponent.ts", "../../../dev/core/src/AudioV2/abstractAudio/components/spatialAudioAttacherComponent.ts"],
  "sourcesContent": ["import { PrecisionDate } from \"../../../Misc/precisionDate\";\n\n/** @internal */\nexport class _SpatialWebAudioUpdaterComponent {\n    private _autoUpdate = true;\n    private _lastUpdateTime: number = 0;\n\n    /** @internal */\n    public minUpdateTime = 0;\n\n    /** @internal */\n    public constructor(parent: { update: () => void }, autoUpdate: boolean, minUpdateTime: number) {\n        if (!autoUpdate) {\n            return;\n        }\n\n        this.minUpdateTime = minUpdateTime;\n\n        const update = () => {\n            if (!this._autoUpdate) {\n                return;\n            }\n\n            let skipUpdate = false;\n\n            if (0 < this.minUpdateTime) {\n                const now = PrecisionDate.Now;\n                if (this._lastUpdateTime && now - this._lastUpdateTime < this.minUpdateTime) {\n                    skipUpdate = true;\n                }\n                this._lastUpdateTime = now;\n            }\n\n            if (!skipUpdate) {\n                parent.update();\n            }\n\n            requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._autoUpdate = false;\n    }\n}\n", "import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport type { _SpatialAudioSubNode } from \"../subNodes/spatialAudioSubNode\";\nimport type { _SpatialAudioListener } from \"../subProperties/spatialAudioListener\";\n\n/**\n * Provides a common interface for attaching an audio listener or source to a specific entity, ensuring only one entity\n * is attached at a time.\n * @internal\n */\nexport class _SpatialAudioAttacherComponent {\n    /** @internal */\n    private _attachmentType: SpatialAudioAttachmentType = SpatialAudioAttachmentType.PositionAndRotation;\n    private readonly _position = new Vector3();\n    private readonly _rotationQuaternion = new Quaternion();\n    private _sceneNode: Nullable<Node> = null;\n    private readonly _spatialAudioNode: _SpatialAudioSubNode | _SpatialAudioListener;\n    private _useBoundingBox: boolean = false;\n\n    /** @internal */\n    public constructor(spatialAudioNode: _SpatialAudioSubNode | _SpatialAudioListener) {\n        this._spatialAudioNode = spatialAudioNode;\n    }\n\n    /**\n     * Returns `true` if attached to a scene node; otherwise returns `false`.\n     */\n    public get isAttached(): boolean {\n        return this._sceneNode !== null;\n    }\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the scene node's bounding box for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the scene node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean, attachmentType: SpatialAudioAttachmentType): void {\n        if (this._sceneNode === sceneNode) {\n            return;\n        }\n\n        this.detach();\n\n        if (!sceneNode) {\n            return;\n        }\n\n        this._attachmentType = attachmentType;\n\n        this._sceneNode = sceneNode;\n        this._sceneNode.onDisposeObservable.add(this.dispose);\n\n        this._useBoundingBox = useBoundingBox;\n    }\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public detach() {\n        this._sceneNode?.onDisposeObservable.removeCallback(this.dispose);\n        this._sceneNode = null;\n    }\n\n    /**\n     * Releases associated resources.\n     */\n    public dispose = () => {\n        this.detach();\n    };\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public update() {\n        if (this._attachmentType & SpatialAudioAttachmentType.Position) {\n            if (this._useBoundingBox && (this._sceneNode as AbstractMesh).getBoundingInfo) {\n                this._position.copyFrom((this._sceneNode as AbstractMesh).getBoundingInfo().boundingBox.centerWorld);\n            } else {\n                this._sceneNode?.getWorldMatrix().getTranslationToRef(this._position);\n            }\n\n            this._spatialAudioNode.position.copyFrom(this._position);\n            this._spatialAudioNode._updatePosition();\n        }\n\n        if (this._attachmentType & SpatialAudioAttachmentType.Rotation) {\n            this._sceneNode?.getWorldMatrix().decompose(undefined, this._rotationQuaternion);\n\n            this._spatialAudioNode.rotationQuaternion.copyFrom(this._rotationQuaternion);\n            this._spatialAudioNode._updateRotation();\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;AAGM,IAAO,mCAAP,MAAuC;;EAQzC,YAAmB,QAAgC,YAAqB,eAAqB;AAPrF,SAAA,cAAc;AACd,SAAA,kBAA0B;AAG3B,SAAA,gBAAgB;AAInB,QAAI,CAAC,YAAY;AACb;IACJ;AAEA,SAAK,gBAAgB;AAErB,UAAM,SAAS,MAAK;AAChB,UAAI,CAAC,KAAK,aAAa;AACnB;MACJ;AAEA,UAAI,aAAa;AAEjB,UAAI,IAAI,KAAK,eAAe;AACxB,cAAM,MAAM,cAAc;AAC1B,YAAI,KAAK,mBAAmB,MAAM,KAAK,kBAAkB,KAAK,eAAe;AACzE,uBAAa;QACjB;AACA,aAAK,kBAAkB;MAC3B;AAEA,UAAI,CAAC,YAAY;AACb,eAAO,OAAM;MACjB;AAEA,4BAAsB,MAAM;IAChC;AACA,0BAAsB,MAAM;EAChC;;EAGO,UAAO;AACV,SAAK,cAAc;EACvB;;;;AChCE,IAAO,iCAAP,MAAqC;;EAUvC,YAAmB,kBAA8D;AARzE,SAAA,kBAAe;AACN,SAAA,YAAY,IAAI,QAAO;AACvB,SAAA,sBAAsB,IAAI,WAAU;AAC7C,SAAA,aAA6B;AAE7B,SAAA,kBAA2B;AAsD5B,SAAA,UAAU,MAAK;AAClB,WAAK,OAAM;IACf;AApDI,SAAK,oBAAoB;EAC7B;;;;EAKA,IAAW,aAAU;AACjB,WAAO,KAAK,eAAe;EAC/B;;;;;;;;;;;EAYO,OAAO,WAA2B,gBAAyB,gBAA0C;AACxG,QAAI,KAAK,eAAe,WAAW;AAC/B;IACJ;AAEA,SAAK,OAAM;AAEX,QAAI,CAAC,WAAW;AACZ;IACJ;AAEA,SAAK,kBAAkB;AAEvB,SAAK,aAAa;AAClB,SAAK,WAAW,oBAAoB,IAAI,KAAK,OAAO;AAEpD,SAAK,kBAAkB;EAC3B;;;;EAKO,SAAM;AACT,SAAK,YAAY,oBAAoB,eAAe,KAAK,OAAO;AAChE,SAAK,aAAa;EACtB;;;;;;EAcO,SAAM;AACT,QAAI,KAAK,kBAAe,GAAwC;AAC5D,UAAI,KAAK,mBAAoB,KAAK,WAA4B,iBAAiB;AAC3E,aAAK,UAAU,SAAU,KAAK,WAA4B,gBAAe,EAAG,YAAY,WAAW;MACvG,OAAO;AACH,aAAK,YAAY,eAAc,EAAG,oBAAoB,KAAK,SAAS;MACxE;AAEA,WAAK,kBAAkB,SAAS,SAAS,KAAK,SAAS;AACvD,WAAK,kBAAkB,gBAAe;IAC1C;AAEA,QAAI,KAAK,kBAAe,GAAwC;AAC5D,WAAK,YAAY,eAAc,EAAG,UAAU,QAAW,KAAK,mBAAmB;AAE/E,WAAK,kBAAkB,mBAAmB,SAAS,KAAK,mBAAmB;AAC3E,WAAK,kBAAkB,gBAAe;IAC1C;EACJ;;",
  "names": []
}
