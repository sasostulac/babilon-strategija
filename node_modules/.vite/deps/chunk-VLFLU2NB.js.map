{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/Textures/baseTexture.polynomial.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../types\";\r\nimport { CubeMapToSphericalPolynomialTools } from \"../../Misc/HighDynamicRange/cubemapToSphericalPolynomial\";\r\nimport type { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { BaseTexture } from \"./baseTexture\";\r\n\r\ndeclare module \"./baseTexture\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface BaseTexture {\r\n        /**\r\n         * Get the polynomial representation of the texture data.\r\n         * This is mainly use as a fast way to recover IBL Diffuse irradiance data.\r\n         * @see https://learnopengl.com/PBR/IBL/Diffuse-irradiance\r\n         */\r\n        sphericalPolynomial: Nullable<SphericalPolynomial>;\r\n\r\n        /**\r\n         * Force recomputation of spherical polynomials.\r\n         * Can be useful if you generate a cubemap multiple times (from a probe for eg) and you need the proper polynomials each time\r\n         */\r\n        forceSphericalPolynomialsRecompute(): void;\r\n    }\r\n}\r\n\r\nBaseTexture.prototype.forceSphericalPolynomialsRecompute = function (): void {\r\n    if (this._texture) {\r\n        this._texture._sphericalPolynomial = null;\r\n        this._texture._sphericalPolynomialPromise = null;\r\n        this._texture._sphericalPolynomialComputed = false;\r\n    }\r\n};\r\n\r\nObject.defineProperty(BaseTexture.prototype, \"sphericalPolynomial\", {\r\n    get: function (this: BaseTexture) {\r\n        if (this._texture) {\r\n            if (this._texture._sphericalPolynomial || this._texture._sphericalPolynomialComputed) {\r\n                return this._texture._sphericalPolynomial;\r\n            }\r\n\r\n            if (this._texture.isReady) {\r\n                if (!this._texture._sphericalPolynomialPromise) {\r\n                    this._texture._sphericalPolynomialPromise = CubeMapToSphericalPolynomialTools.ConvertCubeMapTextureToSphericalPolynomial(this);\r\n                    if (this._texture._sphericalPolynomialPromise === null) {\r\n                        this._texture._sphericalPolynomialComputed = true;\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n                        this._texture._sphericalPolynomialPromise.then((sphericalPolynomial) => {\r\n                            this._texture!._sphericalPolynomial = sphericalPolynomial;\r\n                            this._texture!._sphericalPolynomialComputed = true;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n    set: function (this: BaseTexture, value: Nullable<SphericalPolynomial>) {\r\n        if (this._texture) {\r\n            this._texture._sphericalPolynomial = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n"],
  "mappings": ";;;;;;;;AAuBA,YAAY,UAAU,qCAAqC,WAAA;AACvD,MAAI,KAAK,UAAU;AACf,SAAK,SAAS,uBAAuB;AACrC,SAAK,SAAS,8BAA8B;AAC5C,SAAK,SAAS,+BAA+B;EACjD;AACJ;AAEA,OAAO,eAAe,YAAY,WAAW,uBAAuB;EAChE,KAAK,WAAA;AACD,QAAI,KAAK,UAAU;AACf,UAAI,KAAK,SAAS,wBAAwB,KAAK,SAAS,8BAA8B;AAClF,eAAO,KAAK,SAAS;MACzB;AAEA,UAAI,KAAK,SAAS,SAAS;AACvB,YAAI,CAAC,KAAK,SAAS,6BAA6B;AAC5C,eAAK,SAAS,8BAA8B,kCAAkC,2CAA2C,IAAI;AAC7H,cAAI,KAAK,SAAS,gCAAgC,MAAM;AACpD,iBAAK,SAAS,+BAA+B;UACjD,OAAO;AAEH,iBAAK,SAAS,4BAA4B,KAAK,CAAC,wBAAuB;AACnE,mBAAK,SAAU,uBAAuB;AACtC,mBAAK,SAAU,+BAA+B;YAClD,CAAC;UACL;QACJ;AAEA,eAAO;MACX;IACJ;AAEA,WAAO;EACX;EACA,KAAK,SAA6B,OAAoC;AAClE,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,uBAAuB;IACzC;EACJ;EACA,YAAY;EACZ,cAAc;CACjB;",
  "names": []
}
