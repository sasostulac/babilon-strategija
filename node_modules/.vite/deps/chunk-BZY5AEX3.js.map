{
  "version": 3,
  "sources": ["../../../dev/core/src/Materials/PBR/pbrBRDFConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrClearCoatConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrIridescenceConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrAnisotropicConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrSheenConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrSubSurfaceConfiguration.ts", "../../../dev/core/src/Materials/PBR/pbrBaseMaterial.ts", "../../../dev/core/src/Materials/PBR/pbrMaterial.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { serialize, expandToProperty } from \"../../Misc/decorators\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialBRDFDefines extends MaterialDefines {\r\n    BRDF_V_HEIGHT_CORRELATED = false;\r\n    MS_BRDF_ENERGY_CONSERVATION = false;\r\n    SPHERICAL_HARMONICS = false;\r\n    SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = false;\r\n    MIX_IBL_RADIANCE_WITH_IRRADIANCE = true;\r\n    LEGACY_SPECULAR_ENERGY_CONSERVATION = false;\r\n    BASE_DIFFUSE_MODEL = 0;\r\n    DIELECTRIC_SPECULAR_MODEL = 0;\r\n    CONDUCTOR_SPECULAR_MODEL = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the BRDF component of the PBR material\r\n */\r\nexport class PBRBRDFConfiguration extends MaterialPluginBase {\r\n    /**\r\n     * Default value used for the energy conservation.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_ENERGY_CONSERVATION = true;\r\n\r\n    /**\r\n     * Default value used for the Smith Visibility Height Correlated mode.\r\n     * This should only be changed to adapt to the type of texture in scene.environmentBRDFTexture.\r\n     */\r\n    public static DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED = true;\r\n\r\n    /**\r\n     * Default value used for the IBL diffuse part.\r\n     * This can help switching back to the polynomials mode globally which is a tiny bit\r\n     * less GPU intensive at the drawback of a lower quality.\r\n     */\r\n    public static DEFAULT_USE_SPHERICAL_HARMONICS = true;\r\n\r\n    /**\r\n     * Default value used for activating energy conservation for the specular workflow.\r\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n     */\r\n    public static DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION = true;\r\n\r\n    /**\r\n     * Default value for whether IBL irradiance is used to augment rough radiance.\r\n     * If activated, irradiance is blended into the radiance contribution when the material is rough.\r\n     * This better approximates raytracing results for rough surfaces.\r\n     */\r\n    public static DEFAULT_MIX_IBL_RADIANCE_WITH_IRRADIANCE = true;\r\n\r\n    /**\r\n     * Default value for whether the legacy specular energy conservation is used.\r\n     */\r\n    public static DEFAULT_USE_LEGACY_SPECULAR_ENERGY_CONSERVATION = true;\r\n\r\n    /**\r\n     * Defines the default diffuse model used by the material.\r\n     */\r\n    public static DEFAULT_DIFFUSE_MODEL = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\r\n\r\n    /**\r\n     * Defines the default dielectric specular model used by the material.\r\n     */\r\n    public static DEFAULT_DIELECTRIC_SPECULAR_MODEL: number = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_GLTF;\r\n\r\n    /**\r\n     * Defines the default conductor specular model used by the material.\r\n     */\r\n    public static DEFAULT_CONDUCTOR_SPECULAR_MODEL: number = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_GLTF;\r\n\r\n    private _useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_ENERGY_CONSERVATION;\r\n\r\n    private _useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses height smith correlated visibility term.\r\n     * If you intent to not use our default BRDF, you need to load a separate BRDF Texture for the PBR\r\n     * You can either load https://assets.babylonjs.com/environments/uncorrelatedBRDF.png\r\n     * or https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds to have more precision\r\n     * Not relying on height correlated will also disable energy conservation.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSmithVisibilityHeightCorrelated = PBRBRDFConfiguration.DEFAULT_USE_SMITH_VISIBILITY_HEIGHT_CORRELATED;\r\n\r\n    private _useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n    /**\r\n     * LEGACY Mode set to false\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     * The harmonics despite a tiny bigger cost has been proven to provide closer results\r\n     * to the ground truth.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSphericalHarmonics = PBRBRDFConfiguration.DEFAULT_USE_SPHERICAL_HARMONICS;\r\n\r\n    private _useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the material uses energy conservation, when the specular workflow is active.\r\n     * If activated, the albedo color is multiplied with (1. - maxChannel(specular color)).\r\n     * If deactivated, a material is only physically plausible, when (albedo color + specular color) < 1.\r\n     * In the deactivated case, the material author has to ensure energy conservation, for a physically plausible rendering.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useSpecularGlossinessInputEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_SPECULAR_GLOSSINESS_INPUT_ENERGY_CONSERVATION;\r\n\r\n    private _mixIblRadianceWithIrradiance = PBRBRDFConfiguration.DEFAULT_MIX_IBL_RADIANCE_WITH_IRRADIANCE;\r\n    /**\r\n     * Defines if IBL irradiance is used to augment rough radiance.\r\n     * If activated, irradiance is blended into the radiance contribution when the material is rough.\r\n     * This better approximates raytracing results for rough surfaces.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public mixIblRadianceWithIrradiance = PBRBRDFConfiguration.DEFAULT_MIX_IBL_RADIANCE_WITH_IRRADIANCE;\r\n\r\n    private _useLegacySpecularEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_LEGACY_SPECULAR_ENERGY_CONSERVATION;\r\n    /**\r\n     * Defines if the legacy specular energy conservation is used.\r\n     * If activated, the specular color is multiplied with (1. - maxChannel(albedo color)).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public useLegacySpecularEnergyConservation = PBRBRDFConfiguration.DEFAULT_USE_LEGACY_SPECULAR_ENERGY_CONSERVATION;\r\n\r\n    private _baseDiffuseModel: number = PBRBRDFConfiguration.DEFAULT_DIFFUSE_MODEL;\r\n    /**\r\n     * Defines the base diffuse roughness model of the material.\r\n     */\r\n    @serialize(\"baseDiffuseModel\")\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public baseDiffuseModel: number = PBRBRDFConfiguration.DEFAULT_DIFFUSE_MODEL;\r\n\r\n    private _dielectricSpecularModel: number = PBRBRDFConfiguration.DEFAULT_DIELECTRIC_SPECULAR_MODEL;\r\n    /**\r\n     * The material model to use for specular lighting of dielectric materials.\r\n     */\r\n    @serialize(\"dielectricSpecularModel\")\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public dielectricSpecularModel: number = PBRBRDFConfiguration.DEFAULT_DIELECTRIC_SPECULAR_MODEL;\r\n\r\n    private _conductorSpecularModel: number = PBRBRDFConfiguration.DEFAULT_CONDUCTOR_SPECULAR_MODEL;\r\n    /**\r\n     * The material model to use for specular lighting.\r\n     */\r\n    @serialize(\"conductorSpecularModel\")\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public conductorSpecularModel: number = PBRBRDFConfiguration.DEFAULT_CONDUCTOR_SPECULAR_MODEL;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsMiscDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsMiscDirty(): void {\r\n        this._internalMarkAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRBRDF\", 90, new MaterialBRDFDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsMiscDirty = material._dirtyCallbacks[Constants.MATERIAL_MiscDirtyFlag];\r\n        this._enable(true);\r\n    }\r\n\r\n    public override prepareDefines(defines: MaterialBRDFDefines): void {\r\n        defines.BRDF_V_HEIGHT_CORRELATED = this._useSmithVisibilityHeightCorrelated;\r\n        defines.MS_BRDF_ENERGY_CONSERVATION = this._useEnergyConservation && this._useSmithVisibilityHeightCorrelated;\r\n        defines.SPHERICAL_HARMONICS = this._useSphericalHarmonics;\r\n        defines.SPECULAR_GLOSSINESS_ENERGY_CONSERVATION = this._useSpecularGlossinessInputEnergyConservation;\r\n        defines.MIX_IBL_RADIANCE_WITH_IRRADIANCE = this._mixIblRadianceWithIrradiance;\r\n        defines.LEGACY_SPECULAR_ENERGY_CONSERVATION = this._useLegacySpecularEnergyConservation;\r\n        defines.BASE_DIFFUSE_MODEL = this._baseDiffuseModel;\r\n        defines.DIELECTRIC_SPECULAR_MODEL = this._dielectricSpecularModel;\r\n        defines.CONDUCTOR_SPECULAR_MODEL = this._conductorSpecularModel;\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRBRDFConfiguration\";\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"../materialHelper.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialClearCoatDefines extends MaterialDefines {\r\n    public CLEARCOAT = false;\r\n    public CLEARCOAT_DEFAULTIOR = false;\r\n    public CLEARCOAT_TEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n    public CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public CLEARCOAT_BUMP = false;\r\n    public CLEARCOAT_BUMPDIRECTUV = 0;\r\n    public CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public CLEARCOAT_REMAP_F0 = false;\r\n\r\n    public CLEARCOAT_TINT = false;\r\n    public CLEARCOAT_TINT_TEXTURE = false;\r\n    public CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the clear coat component of the PBR material\r\n */\r\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\r\n    protected override _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.5;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\r\n    @serialize()\r\n    public roughness: number = 0;\r\n\r\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _remapF0OnInterfaceChange = true;\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public remapF0OnInterfaceChange = true;\r\n\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _isTintEnabled = false;\r\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isTintEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serializeAsColor3()\r\n    public tintColor = Color3.White();\r\n\r\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintColorAtDistance = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintThickness: number = 1;\r\n\r\n    private _tintTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public tintTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialClearCoatDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefinesBeforeAttributes(defines: MaterialClearCoatDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.CLEARCOAT = true;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n\r\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\r\n                    } else {\r\n                        defines.CLEARCOAT_BUMP = false;\r\n                    }\r\n\r\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n                    if (this._isTintEnabled) {\r\n                        defines.CLEARCOAT_TINT = true;\r\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                            PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\r\n                            defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\r\n                        } else {\r\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                        }\r\n                    } else {\r\n                        defines.CLEARCOAT_TINT = false;\r\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.CLEARCOAT = false;\r\n            defines.CLEARCOAT_TEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n            defines.CLEARCOAT_BUMP = false;\r\n            defines.CLEARCOAT_TINT = false;\r\n            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.CLEARCOAT_DEFAULTIOR = false;\r\n            defines.CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n            defines.CLEARCOAT_BUMPDIRECTUV = 0;\r\n            defines.CLEARCOAT_REMAP_F0 = false;\r\n            defines.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n            defines.CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh.materialDefines as unknown as MaterialClearCoatDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        const invertNormalMapX = this._material._invertNormalMapX;\r\n        const invertNormalMapY = this._material._invertNormalMapY;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vClearCoatInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\r\n                }\r\n                if (this._textureRoughness && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\r\n                }\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\r\n                BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\r\n\r\n                if (scene._mirroredCameraPosition) {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\r\n                } else {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\r\n                }\r\n            }\r\n\r\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\r\n                BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\r\n\r\n            // Clear Coat Refraction params\r\n            const a = 1 - this._indexOfRefraction;\r\n            const b = 1 + this._indexOfRefraction;\r\n            const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n            const eta = 1 / this._indexOfRefraction;\r\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n            if (this._isTintEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\r\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\r\n            }\r\n\r\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._tintTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture) {\r\n            activeTextures.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            animatables.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\r\n            animatables.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._tintTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRClearCoatConfiguration\";\r\n    }\r\n\r\n    public override addFallbacks(defines: MaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.CLEARCOAT_BUMP) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\r\n        }\r\n        if (defines.CLEARCOAT_TINT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\r\n        }\r\n        if (defines.CLEARCOAT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vClearCoatParams\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatRefractionParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vClearCoatInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"clearCoatRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatBumpInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatTangentSpaceParams\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatBumpMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatTintParams\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatColorAtDistance\", size: 1, type: \"float\" },\r\n                { name: \"vClearCoatTintInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatTintMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"../materialHelper.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialIridescenceDefines extends MaterialDefines {\r\n    public IRIDESCENCE = false;\r\n    public IRIDESCENCE_TEXTURE = false;\r\n    public IRIDESCENCE_TEXTUREDIRECTUV = 0;\r\n    public IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n    public IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the iridescence (thin film) component of the PBR material\r\n */\r\nexport class PBRIridescenceConfiguration extends MaterialPluginBase {\r\n    protected override _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * The default minimum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 100 nm.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultMinimumThickness = 100;\r\n\r\n    /**\r\n     * The default maximum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 400 nm.\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultMaximumThickness = 400;\r\n\r\n    /**\r\n     * The default index of refraction of the thin-film layer.\r\n     * Defaults to 1.3\r\n     * @internal\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.3;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the iridescence is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public minimumThickness: number = PBRIridescenceConfiguration._DefaultMinimumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\r\n     */\r\n    @serialize()\r\n    public maximumThickness: number = PBRIridescenceConfiguration._DefaultMaximumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction: number = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence intensity in a texture (red channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _thicknessTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence thickness in a texture (green channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public thicknessTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialIridescenceDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefinesBeforeAttributes(defines: MaterialIridescenceDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.IRIDESCENCE = true;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.IRIDESCENCE = false;\r\n            defines.IRIDESCENCE_TEXTURE = false;\r\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n            defines.IRIDESCENCE_TEXTUREDIRECTUV = 0;\r\n            defines.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vIridescenceInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._thicknessTexture?.coordinatesIndex ?? 0,\r\n                    this._thicknessTexture?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\r\n                }\r\n                if (this._thicknessTexture) {\r\n                    BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\r\n                }\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\r\n            }\r\n\r\n            if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._thicknessTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture) {\r\n            activeTextures.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\r\n            animatables.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._thicknessTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRIridescenceConfiguration\";\r\n    }\r\n\r\n    public override addFallbacks(defines: MaterialIridescenceDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.IRIDESCENCE) {\r\n            fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vIridescenceParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vIridescenceInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"iridescenceMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"iridescenceThicknessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, expandToProperty, serializeAsVector2, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport { Vector2 } from \"../../Maths/math.vector\";\r\nimport { MaterialFlags } from \"../../Materials/materialFlags\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"../materialHelper.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialAnisotropicDefines extends MaterialDefines {\r\n    public ANISOTROPIC = false;\r\n    public ANISOTROPIC_TEXTURE = false;\r\n    public ANISOTROPIC_TEXTUREDIRECTUV = 0;\r\n    public ANISOTROPIC_LEGACY = false;\r\n    public MAINUV1 = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the anisotropic component of the PBR material\r\n */\r\nexport class PBRAnisotropicConfiguration extends MaterialPluginBase {\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the anisotropy is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the anisotropy strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines if the effect is along the tangents, bitangents or in between.\r\n     * By default, the effect is \"stretching\" the highlights along the tangents.\r\n     */\r\n    @serializeAsVector2()\r\n    public direction = new Vector2(1, 0);\r\n\r\n    /**\r\n     * Sets the anisotropy direction as an angle.\r\n     */\r\n    public set angle(value: number) {\r\n        this.direction.x = Math.cos(value);\r\n        this.direction.y = Math.sin(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the anisotropy angle value in radians.\r\n     * @returns the anisotropy angle value in radians.\r\n     */\r\n    public get angle(): number {\r\n        return Math.atan2(this.direction.y, this.direction.x);\r\n    }\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the anisotropy values in a texture.\r\n     * rg is direction (like normal from -1 to 1)\r\n     * b is a intensity\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _legacy = false;\r\n    /**\r\n     * Defines if the anisotropy is in legacy mode for backwards compatibility before 6.4.0.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public legacy: boolean = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsMiscDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsMiscDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRAnisotropic\", 110, new MaterialAnisotropicDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n        this._internalMarkAllSubMeshesAsMiscDirty = material._dirtyCallbacks[Constants.MATERIAL_MiscDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialAnisotropicDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefinesBeforeAttributes(defines: MaterialAnisotropicDefines, scene: Scene, mesh: AbstractMesh): void {\r\n        if (this._isEnabled) {\r\n            defines.ANISOTROPIC = this._isEnabled;\r\n            if (this._isEnabled && !mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n                defines._needUVs = true;\r\n                defines.MAINUV1 = true;\r\n            }\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._texture, defines, \"ANISOTROPIC_TEXTURE\");\r\n                    } else {\r\n                        defines.ANISOTROPIC_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (defines._areMiscDirty) {\r\n                defines.ANISOTROPIC_LEGACY = this._legacy;\r\n            }\r\n        } else {\r\n            defines.ANISOTROPIC = false;\r\n            defines.ANISOTROPIC_TEXTURE = false;\r\n            defines.ANISOTROPIC_TEXTUREDIRECTUV = 0;\r\n            defines.ANISOTROPIC_LEGACY = false;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vAnisotropyInfos\", this._texture.coordinatesIndex, this._texture.level);\r\n                BindTextureMatrix(this._texture, uniformBuffer, \"anisotropy\");\r\n            }\r\n\r\n            // Anisotropy\r\n            uniformBuffer.updateFloat3(\"vAnisotropy\", this.direction.x, this.direction.y, this.intensity);\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.AnisotropicTextureEnabled) {\r\n                uniformBuffer.setTexture(\"anisotropySampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._texture) {\r\n                this._texture.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRAnisotropicConfiguration\";\r\n    }\r\n\r\n    public override addFallbacks(defines: MaterialAnisotropicDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.ANISOTROPIC) {\r\n            fallbacks.addFallback(currentRank++, \"ANISOTROPIC\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"anisotropySampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vAnisotropy\", size: 3, type: \"vec3\" },\r\n                { name: \"vAnisotropyInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"anisotropyMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parses a anisotropy Configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public override parse(source: any, scene: Scene, rootUrl: string): void {\r\n        super.parse(source, scene, rootUrl);\r\n\r\n        // Backward compatibility\r\n        if (source.legacy === undefined) {\r\n            this.legacy = true;\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { MaterialFlags } from \"../../Materials/materialFlags\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"../materialHelper.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialSheenDefines extends MaterialDefines {\r\n    public SHEEN = false;\r\n    public SHEEN_TEXTURE = false;\r\n    public SHEEN_GAMMATEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS = false;\r\n    public SHEEN_TEXTUREDIRECTUV = 0;\r\n    public SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public SHEEN_LINKWITHALBEDO = false;\r\n    public SHEEN_ROUGHNESS = false;\r\n    public SHEEN_ALBEDOSCALING = false;\r\n    public SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the sheen component of the PBR material.\r\n */\r\nexport class PBRSheenConfiguration extends MaterialPluginBase {\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the material uses sheen.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    private _linkSheenWithAlbedo = false;\r\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkSheenWithAlbedo = false;\r\n\r\n    /**\r\n     * Defines the sheen intensity.\r\n     */\r\n    @serialize()\r\n    public intensity = 1;\r\n\r\n    /**\r\n     * Defines the sheen color.\r\n     */\r\n    @serializeAsColor3()\r\n    public color = Color3.White();\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen tint values in a texture.\r\n     * rgb is tint\r\n     * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\r\n     * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the alpha channel of the texture property will be used for roughness.\r\n     * Has no effect if the roughness (and texture!) property is not defined\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _roughness: Nullable<number> = null;\r\n    /**\r\n     * Defines the sheen roughness.\r\n     * It is not taken into account if linkSheenWithAlbedo is true.\r\n     * To stay backward compatible, material roughness is used instead if sheen roughness = null\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: Nullable<number> = null;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen roughness in a texture.\r\n     * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _albedoScaling = false;\r\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public albedoScaling = false;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialSheenDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefinesBeforeAttributes(defines: MaterialSheenDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.SHEEN = true;\r\n            defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\r\n            defines.SHEEN_ROUGHNESS = this._roughness !== null;\r\n            defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\r\n                        defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.SHEEN = false;\r\n            defines.SHEEN_TEXTURE = false;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n            defines.SHEEN_LINKWITHALBEDO = false;\r\n            defines.SHEEN_ROUGHNESS = false;\r\n            defines.SHEEN_ALBEDOSCALING = false;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.SHEEN_GAMMATEXTURE = false;\r\n            defines.SHEEN_TEXTUREDIRECTUV = 0;\r\n            defines.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh.materialDefines as unknown as MaterialSheenDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vSheenInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\r\n                }\r\n                if (this._textureRoughness && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\r\n                }\r\n            }\r\n\r\n            // Sheen\r\n            uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\r\n\r\n            if (this._roughness !== null) {\r\n                uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\r\n            }\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRSheenConfiguration\";\r\n    }\r\n\r\n    public override addFallbacks(defines: MaterialSheenDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.SHEEN) {\r\n            fallbacks.addFallback(currentRank++, \"SHEEN\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vSheenColor\", size: 4, type: \"vec4\" },\r\n                { name: \"vSheenRoughness\", size: 1, type: \"float\" },\r\n                { name: \"vSheenInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"sheenMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"sheenRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { SmartArray } from \"../../Misc/smartArray\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { CubeTexture } from \"../Textures/cubeTexture\";\r\nimport { TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { BindTextureMatrix, PrepareDefinesForMergedUV } from \"../materialHelper.functions\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class MaterialSubSurfaceDefines extends MaterialDefines {\r\n    public SUBSURFACE = false;\r\n\r\n    public SS_REFRACTION = false;\r\n    public SS_REFRACTION_USE_INTENSITY_FROM_THICKNESS = false;\r\n    public SS_TRANSLUCENCY = false;\r\n    public SS_TRANSLUCENCY_USE_INTENSITY_FROM_THICKNESS = false;\r\n    public SS_SCATTERING = false;\r\n    public SS_DISPERSION = false;\r\n\r\n    public SS_THICKNESSANDMASK_TEXTURE = false;\r\n    public SS_THICKNESSANDMASK_TEXTUREDIRECTUV = 0;\r\n    public SS_HAS_THICKNESS = false;\r\n    public SS_REFRACTIONINTENSITY_TEXTURE = false;\r\n    public SS_REFRACTIONINTENSITY_TEXTUREDIRECTUV = 0;\r\n    public SS_TRANSLUCENCYINTENSITY_TEXTURE = false;\r\n    public SS_TRANSLUCENCYINTENSITY_TEXTUREDIRECTUV = 0;\r\n    public SS_TRANSLUCENCYCOLOR_TEXTURE = false;\r\n    public SS_TRANSLUCENCYCOLOR_TEXTUREDIRECTUV = 0;\r\n    public SS_TRANSLUCENCYCOLOR_TEXTURE_GAMMA = false;\r\n\r\n    public SS_REFRACTIONMAP_3D = false;\r\n    public SS_REFRACTIONMAP_OPPOSITEZ = false;\r\n    public SS_LODINREFRACTIONALPHA = false;\r\n    public SS_GAMMAREFRACTION = false;\r\n    public SS_RGBDREFRACTION = false;\r\n    public SS_LINEARSPECULARREFRACTION = false;\r\n    public SS_LINKREFRACTIONTOTRANSPARENCY = false;\r\n    public SS_ALBEDOFORREFRACTIONTINT = false;\r\n    public SS_ALBEDOFORTRANSLUCENCYTINT = false;\r\n    public SS_USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public SS_USE_THICKNESS_AS_DEPTH = false;\r\n\r\n    public SS_USE_GLTF_TEXTURES = false;\r\n    public SS_APPLY_ALBEDO_AFTER_SUBSURFACE = false;\r\n    public SS_TRANSLUCENCY_LEGACY = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the sub surface component of the PBR material\r\n */\r\nexport class PBRSubSurfaceConfiguration extends MaterialPluginBase {\r\n    /**\r\n     * Default value used for applyAlbedoAfterSubSurface.\r\n     *\r\n     * This property only exists for backward compatibility reasons.\r\n     * Set it to true if your rendering in 8.0+ is different from that in 7 when you use sub-surface properties (transmission, refraction, etc.). Default is false.\r\n     * Note however that the PBR calculation is wrong when this property is set to true, so only use it if you want to mimic the 7.0 behavior.\r\n     */\r\n    public static DEFAULT_APPLY_ALBEDO_AFTERSUBSURFACE = false;\r\n\r\n    /**\r\n     * Default value used for legacyTranslucency.\r\n     *\r\n     * This property only exists for backward compatibility reasons.\r\n     * Set it to true if your rendering in 8.0+ is different from that in 7 when you use sub-surface translucency. Default is false.\r\n     */\r\n    public static DEFAULT_LEGACY_TRANSLUCENCY = false;\r\n\r\n    protected override _material: PBRBaseMaterial;\r\n\r\n    private _isRefractionEnabled = false;\r\n    /**\r\n     * Defines if the refraction is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isRefractionEnabled = false;\r\n\r\n    private _isTranslucencyEnabled = false;\r\n    /**\r\n     * Defines if the translucency is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isTranslucencyEnabled = false;\r\n\r\n    private _isDispersionEnabled = false;\r\n    /**\r\n     * Defines if dispersion is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isDispersionEnabled = false;\r\n\r\n    private _isScatteringEnabled = false;\r\n    /**\r\n     * Defines if the sub surface scattering is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markScenePrePassDirty\")\r\n    public isScatteringEnabled = false;\r\n\r\n    @serialize()\r\n    private _scatteringDiffusionProfileIndex = 0;\r\n\r\n    /**\r\n     * Diffusion profile for subsurface scattering.\r\n     * Useful for better scattering in the skins or foliages.\r\n     */\r\n    public get scatteringDiffusionProfile(): Nullable<Color3> {\r\n        if (!this._scene.subSurfaceConfiguration) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.subSurfaceConfiguration.ssDiffusionProfileColors[this._scatteringDiffusionProfileIndex];\r\n    }\r\n\r\n    public set scatteringDiffusionProfile(c: Nullable<Color3>) {\r\n        if (!this._scene.enableSubSurfaceForPrePass()) {\r\n            // Not supported\r\n            return;\r\n        }\r\n\r\n        // addDiffusionProfile automatically checks for doubles\r\n        if (c) {\r\n            this._scatteringDiffusionProfileIndex = this._scene.subSurfaceConfiguration!.addDiffusionProfile(c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the refraction intensity of the material.\r\n     * The refraction when enabled replaces the Diffuse part of the material.\r\n     * The intensity helps transitioning between diffuse and refraction.\r\n     */\r\n    @serialize()\r\n    public refractionIntensity: number = 1;\r\n\r\n    /**\r\n     * Defines the translucency intensity of the material.\r\n     * When translucency has been enabled, this defines how much of the \"translucency\"\r\n     * is added to the diffuse part of the material.\r\n     */\r\n    @serialize()\r\n    public translucencyIntensity: number = 1;\r\n\r\n    /**\r\n     * When enabled, transparent surfaces will be tinted with the albedo colour (independent of thickness)\r\n     */\r\n    @serialize()\r\n    public useAlbedoToTintRefraction: boolean = false;\r\n\r\n    /**\r\n     * When enabled, translucent surfaces will be tinted with the albedo colour (independent of thickness)\r\n     */\r\n    @serialize()\r\n    public useAlbedoToTintTranslucency: boolean = false;\r\n\r\n    private _thicknessTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the average thickness of a mesh in a texture (The texture is holding the values linearly).\r\n     * The red (or green if useGltfStyleTextures=true) channel of the texture should contain the thickness remapped between 0 and 1.\r\n     * 0 would mean minimumThickness\r\n     * 1 would mean maximumThickness\r\n     * The other channels might be use as a mask to vary the different effects intensity.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public thicknessTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Defines the texture to use for refraction.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @internal */\r\n    public _indexOfRefraction = 1.5;\r\n    /**\r\n     * Index of refraction of the material base layer.\r\n     * https://en.wikipedia.org/wiki/List_of_refractive_indices\r\n     *\r\n     * This does not only impact refraction but also the Base F0 of Dielectric Materials.\r\n     *\r\n     * From dielectric fresnel rules: F0 = square((iorT - iorI) / (iorT + iorI))\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public indexOfRefraction = 1.5;\r\n\r\n    @serialize()\r\n    private _volumeIndexOfRefraction = -1.0;\r\n\r\n    /**\r\n     * Index of refraction of the material's volume.\r\n     * https://en.wikipedia.org/wiki/List_of_refractive_indices\r\n     *\r\n     * This ONLY impacts refraction. If not provided or given a non-valid value,\r\n     * the volume will use the same IOR as the surface.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public get volumeIndexOfRefraction(): number {\r\n        if (this._volumeIndexOfRefraction >= 1.0) {\r\n            return this._volumeIndexOfRefraction;\r\n        }\r\n        return this._indexOfRefraction;\r\n    }\r\n    public set volumeIndexOfRefraction(value: number) {\r\n        if (value >= 1.0) {\r\n            this._volumeIndexOfRefraction = value;\r\n        } else {\r\n            this._volumeIndexOfRefraction = -1.0;\r\n        }\r\n    }\r\n\r\n    private _invertRefractionY = false;\r\n    /**\r\n     * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertRefractionY = false;\r\n\r\n    /** @internal */\r\n    public _linkRefractionWithTransparency = false;\r\n    /**\r\n     * This parameters will make the material used its opacity to control how much it is refracting against not.\r\n     * Materials half opaque for instance using refraction could benefit from this control.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkRefractionWithTransparency = false;\r\n\r\n    /**\r\n     * Defines the minimum thickness stored in the thickness map.\r\n     * If no thickness map is defined, this value will be used to simulate thickness.\r\n     */\r\n    @serialize()\r\n    public minimumThickness: number = 0;\r\n\r\n    /**\r\n     * Defines the maximum thickness stored in the thickness map.\r\n     */\r\n    @serialize()\r\n    public maximumThickness: number = 1;\r\n\r\n    /**\r\n     * Defines that the thickness should be used as a measure of the depth volume.\r\n     */\r\n    @serialize()\r\n    public useThicknessAsDepth = false;\r\n\r\n    /**\r\n     * Defines the volume tint of the material.\r\n     * This is used for both translucency and scattering.\r\n     */\r\n    @serializeAsColor3()\r\n    public tintColor = Color3.White();\r\n\r\n    /**\r\n     * Defines the distance at which the tint color should be found in the media.\r\n     * This is used for refraction only.\r\n     */\r\n    @serialize()\r\n    public tintColorAtDistance = 1;\r\n\r\n    /**\r\n     * Defines the Abbe number for the volume.\r\n     */\r\n    @serialize()\r\n    public dispersion = 0;\r\n\r\n    /**\r\n     * Defines how far each channel transmit through the media.\r\n     * It is defined as a color to simplify it selection.\r\n     */\r\n    @serializeAsColor3()\r\n    public diffusionDistance = Color3.White();\r\n\r\n    private _useMaskFromThicknessTexture = false;\r\n    /**\r\n     * Stores the intensity of the different subsurface effects in the thickness texture.\r\n     * Note that if refractionIntensityTexture and/or translucencyIntensityTexture is provided it takes precedence over thicknessTexture + useMaskFromThicknessTexture\r\n     * * the green (red if useGltfStyleTextures = true) channel is the refraction intensity.\r\n     * * the blue (alpha if useGltfStyleTextures = true) channel is the translucency intensity.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useMaskFromThicknessTexture: boolean = false;\r\n\r\n    private _refractionIntensityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the intensity of the refraction. If provided, it takes precedence over thicknessTexture + useMaskFromThicknessTexture\r\n     * * the green (red if useGltfStyleTextures = true) channel is the refraction intensity.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionIntensityTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _translucencyIntensityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the intensity of the translucency. If provided, it takes precedence over thicknessTexture + useMaskFromThicknessTexture\r\n     * * the blue (alpha if useGltfStyleTextures = true) channel is the translucency intensity.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public translucencyIntensityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Defines the translucency tint of the material.\r\n     * If not set, the tint color will be used instead.\r\n     */\r\n    @serializeAsColor3()\r\n    public translucencyColor: Nullable<Color3> = null;\r\n\r\n    private _translucencyColorTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Defines the translucency tint color of the material as a texture.\r\n     * This is multiplied against the translucency color to add variety and realism to the material.\r\n     * If translucencyColor is not set, the tint color will be used instead.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public translucencyColorTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _useGltfStyleTextures = true;\r\n    /**\r\n     * Use channels layout used by glTF:\r\n     * * thicknessTexture: the green (instead of red) channel is the thickness\r\n     * * thicknessTexture/refractionIntensityTexture: the red (instead of green) channel is the refraction intensity\r\n     * * thicknessTexture/translucencyIntensityTexture: the alpha (instead of blue) channel is the translucency intensity\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGltfStyleTextures: boolean = true;\r\n\r\n    /**\r\n     * This property only exists for backward compatibility reasons.\r\n     * Set it to true if your rendering in 8.0+ is different from that in 7 when you use sub-surface properties (transmission, refraction, etc.). Default is false.\r\n     * Note however that the PBR calculation is wrong when this property is set to true, so only use it if you want to mimic the 7.0 behavior.\r\n     */\r\n    @serialize()\r\n    public applyAlbedoAfterSubSurface = PBRSubSurfaceConfiguration.DEFAULT_APPLY_ALBEDO_AFTERSUBSURFACE;\r\n\r\n    /**\r\n     * This property only exists for backward compatibility reasons.\r\n     * Set it to true if your rendering in 8.0+ is different from that in 7 when you use sub-surface translucency. Default is false.\r\n     */\r\n    @serialize()\r\n    public legacyTranslucency = PBRSubSurfaceConfiguration.DEFAULT_LEGACY_TRANSLUCENCY;\r\n\r\n    /**\r\n     * Keeping for backward compatibility... Should not be used anymore. It has been replaced by\r\n     * the property with the correct spelling.\r\n     * @see legacyTranslucency\r\n     */\r\n    public get legacyTransluceny(): boolean {\r\n        return this.legacyTranslucency;\r\n    }\r\n    public set legacyTransluceny(value: boolean) {\r\n        this.legacyTranslucency = value;\r\n    }\r\n\r\n    private _scene: Scene;\r\n\r\n    /** @internal */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n    private _internalMarkScenePrePassDirty: () => void;\r\n\r\n    /** @internal */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isRefractionEnabled || this._isTranslucencyEnabled || this._isScatteringEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n    /** @internal */\r\n    public _markScenePrePassDirty(): void {\r\n        this._enable(this._isRefractionEnabled || this._isTranslucencyEnabled || this._isScatteringEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n        this._internalMarkScenePrePassDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the plugin is compatible with a given shader language.\r\n     * @returns true if the plugin is compatible with the shader language\r\n     */\r\n    public override isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRSubSurface\", 130, new MaterialSubSurfaceDefines(), addToPluginList);\r\n\r\n        this._scene = material.getScene();\r\n        this.registerForExtraEvents = true;\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n        this._internalMarkScenePrePassDirty = material._dirtyCallbacks[Constants.MATERIAL_PrePassDirtyFlag];\r\n    }\r\n\r\n    public override isReadyForSubMesh(defines: MaterialSubSurfaceDefines, scene: Scene): boolean {\r\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\r\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled) {\r\n                    if (!this._refractionIntensityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._translucencyColorTexture && MaterialFlags.TranslucencyColorTextureEnabled) {\r\n                    if (!this._translucencyColorTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled) {\r\n                    if (!this._translucencyIntensityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const refractionTexture = this._getRefractionTexture(scene);\r\n                if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\r\n                    if (!refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public override prepareDefinesBeforeAttributes(defines: MaterialSubSurfaceDefines, scene: Scene): void {\r\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\r\n            defines.SUBSURFACE = false;\r\n            defines.SS_DISPERSION = false;\r\n            defines.SS_TRANSLUCENCY = false;\r\n            defines.SS_SCATTERING = false;\r\n            defines.SS_REFRACTION = false;\r\n            defines.SS_REFRACTION_USE_INTENSITY_FROM_THICKNESS = false;\r\n            defines.SS_TRANSLUCENCY_USE_INTENSITY_FROM_THICKNESS = false;\r\n            defines.SS_THICKNESSANDMASK_TEXTURE = false;\r\n            defines.SS_THICKNESSANDMASK_TEXTUREDIRECTUV = 0;\r\n            defines.SS_HAS_THICKNESS = false;\r\n            defines.SS_REFRACTIONINTENSITY_TEXTURE = false;\r\n            defines.SS_REFRACTIONINTENSITY_TEXTUREDIRECTUV = 0;\r\n            defines.SS_TRANSLUCENCYINTENSITY_TEXTURE = false;\r\n            defines.SS_TRANSLUCENCYINTENSITY_TEXTUREDIRECTUV = 0;\r\n            defines.SS_REFRACTIONMAP_3D = false;\r\n            defines.SS_REFRACTIONMAP_OPPOSITEZ = false;\r\n            defines.SS_LODINREFRACTIONALPHA = false;\r\n            defines.SS_GAMMAREFRACTION = false;\r\n            defines.SS_RGBDREFRACTION = false;\r\n            defines.SS_LINEARSPECULARREFRACTION = false;\r\n            defines.SS_LINKREFRACTIONTOTRANSPARENCY = false;\r\n            defines.SS_ALBEDOFORREFRACTIONTINT = false;\r\n            defines.SS_ALBEDOFORTRANSLUCENCYTINT = false;\r\n            defines.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n            defines.SS_USE_THICKNESS_AS_DEPTH = false;\r\n            defines.SS_USE_GLTF_TEXTURES = false;\r\n            defines.SS_TRANSLUCENCYCOLOR_TEXTURE = false;\r\n            defines.SS_TRANSLUCENCYCOLOR_TEXTUREDIRECTUV = 0;\r\n            defines.SS_TRANSLUCENCYCOLOR_TEXTURE_GAMMA = false;\r\n            defines.SS_APPLY_ALBEDO_AFTER_SUBSURFACE = false;\r\n            return;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            defines.SUBSURFACE = true;\r\n\r\n            defines.SS_DISPERSION = this._isDispersionEnabled;\r\n            defines.SS_TRANSLUCENCY = this._isTranslucencyEnabled;\r\n            defines.SS_TRANSLUCENCY_USE_INTENSITY_FROM_THICKNESS = false;\r\n            defines.SS_TRANSLUCENCY_LEGACY = this.legacyTranslucency;\r\n            defines.SS_SCATTERING = this._isScatteringEnabled;\r\n            defines.SS_THICKNESSANDMASK_TEXTURE = false;\r\n            defines.SS_REFRACTIONINTENSITY_TEXTURE = false;\r\n            defines.SS_TRANSLUCENCYINTENSITY_TEXTURE = false;\r\n            defines.SS_HAS_THICKNESS = false;\r\n            defines.SS_USE_GLTF_TEXTURES = false;\r\n            defines.SS_REFRACTION = false;\r\n            defines.SS_REFRACTION_USE_INTENSITY_FROM_THICKNESS = false;\r\n            defines.SS_REFRACTIONMAP_3D = false;\r\n            defines.SS_GAMMAREFRACTION = false;\r\n            defines.SS_RGBDREFRACTION = false;\r\n            defines.SS_LINEARSPECULARREFRACTION = false;\r\n            defines.SS_REFRACTIONMAP_OPPOSITEZ = false;\r\n            defines.SS_LODINREFRACTIONALPHA = false;\r\n            defines.SS_LINKREFRACTIONTOTRANSPARENCY = false;\r\n            defines.SS_ALBEDOFORREFRACTIONTINT = false;\r\n            defines.SS_ALBEDOFORTRANSLUCENCYTINT = false;\r\n            defines.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n            defines.SS_USE_THICKNESS_AS_DEPTH = false;\r\n            defines.SS_TRANSLUCENCYCOLOR_TEXTURE = false;\r\n            defines.SS_APPLY_ALBEDO_AFTER_SUBSURFACE = this.applyAlbedoAfterSubSurface;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"SS_THICKNESSANDMASK_TEXTURE\");\r\n                    }\r\n\r\n                    if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._refractionIntensityTexture, defines, \"SS_REFRACTIONINTENSITY_TEXTURE\");\r\n                    }\r\n\r\n                    if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._translucencyIntensityTexture, defines, \"SS_TRANSLUCENCYINTENSITY_TEXTURE\");\r\n                    }\r\n\r\n                    if (this._translucencyColorTexture && MaterialFlags.TranslucencyColorTextureEnabled) {\r\n                        PrepareDefinesForMergedUV(this._translucencyColorTexture, defines, \"SS_TRANSLUCENCYCOLOR_TEXTURE\");\r\n                        defines.SS_TRANSLUCENCYCOLOR_TEXTURE_GAMMA = this._translucencyColorTexture.gammaSpace;\r\n                    }\r\n                }\r\n            }\r\n\r\n            defines.SS_HAS_THICKNESS = this.maximumThickness - this.minimumThickness !== 0.0;\r\n            defines.SS_USE_GLTF_TEXTURES = this._useGltfStyleTextures;\r\n            defines.SS_REFRACTION_USE_INTENSITY_FROM_THICKNESS = this._useMaskFromThicknessTexture && !this._refractionIntensityTexture;\r\n            defines.SS_TRANSLUCENCY_USE_INTENSITY_FROM_THICKNESS = this._useMaskFromThicknessTexture && !this._translucencyIntensityTexture;\r\n\r\n            if (this._isRefractionEnabled) {\r\n                if (scene.texturesEnabled) {\r\n                    const refractionTexture = this._getRefractionTexture(scene);\r\n                    if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\r\n                        defines.SS_REFRACTION = true;\r\n                        defines.SS_REFRACTIONMAP_3D = refractionTexture.isCube;\r\n                        defines.SS_GAMMAREFRACTION = refractionTexture.gammaSpace;\r\n                        defines.SS_RGBDREFRACTION = refractionTexture.isRGBD;\r\n                        defines.SS_LINEARSPECULARREFRACTION = refractionTexture.linearSpecularLOD;\r\n                        defines.SS_REFRACTIONMAP_OPPOSITEZ = this._scene.useRightHandedSystem && refractionTexture.isCube ? !refractionTexture.invertZ : refractionTexture.invertZ;\r\n                        defines.SS_LODINREFRACTIONALPHA = refractionTexture.lodLevelInAlpha;\r\n                        defines.SS_LINKREFRACTIONTOTRANSPARENCY = this._linkRefractionWithTransparency;\r\n                        defines.SS_ALBEDOFORREFRACTIONTINT = this.useAlbedoToTintRefraction;\r\n                        defines.SS_USE_LOCAL_REFRACTIONMAP_CUBIC = refractionTexture.isCube && (<any>refractionTexture).boundingBoxSize;\r\n                        defines.SS_USE_THICKNESS_AS_DEPTH = this.useThicknessAsDepth;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this._isTranslucencyEnabled) {\r\n                defines.SS_ALBEDOFORTRANSLUCENCYTINT = this.useAlbedoToTintTranslucency;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the material data (this function is called even if mustRebind() returns false)\r\n     * @param uniformBuffer defines the Uniform buffer to fill in.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param engine defines the engine the material belongs to.\r\n     * @param subMesh the submesh to bind data for\r\n     */\r\n    public override hardBindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\r\n            return;\r\n        }\r\n\r\n        // If min/max thickness is 0, avoid decompising to determine the scaled thickness (it's always zero).\r\n        if (this.maximumThickness === 0.0 && this.minimumThickness === 0.0) {\r\n            uniformBuffer.updateFloat2(\"vThicknessParam\", 0, 0);\r\n        } else {\r\n            subMesh.getRenderingMesh().getWorldMatrix().decompose(TmpVectors.Vector3[0]);\r\n            const thicknessScale = Math.max(Math.abs(TmpVectors.Vector3[0].x), Math.abs(TmpVectors.Vector3[0].y), Math.abs(TmpVectors.Vector3[0].z));\r\n            uniformBuffer.updateFloat2(\"vThicknessParam\", this.minimumThickness * thicknessScale, (this.maximumThickness - this.minimumThickness) * thicknessScale);\r\n        }\r\n    }\r\n\r\n    public override bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isRefractionEnabled && !this._isTranslucencyEnabled && !this._isScatteringEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh.materialDefines as unknown as MaterialSubSurfaceDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n        const realTimeFiltering = this._material.realTimeFiltering;\r\n        const lodBasedMicrosurface = defines.LODBASEDMICROSFURACE;\r\n\r\n        const refractionTexture = this._getRefractionTexture(scene);\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vThicknessInfos\", this._thicknessTexture.coordinatesIndex, this._thicknessTexture.level);\r\n                BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"thickness\");\r\n            }\r\n\r\n            if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled && defines.SS_REFRACTIONINTENSITY_TEXTURE) {\r\n                uniformBuffer.updateFloat2(\"vRefractionIntensityInfos\", this._refractionIntensityTexture.coordinatesIndex, this._refractionIntensityTexture.level);\r\n                BindTextureMatrix(this._refractionIntensityTexture, uniformBuffer, \"refractionIntensity\");\r\n            }\r\n\r\n            if (this._translucencyColorTexture && MaterialFlags.TranslucencyColorTextureEnabled && defines.SS_TRANSLUCENCYCOLOR_TEXTURE) {\r\n                uniformBuffer.updateFloat2(\"vTranslucencyColorInfos\", this._translucencyColorTexture.coordinatesIndex, this._translucencyColorTexture.level);\r\n                BindTextureMatrix(this._translucencyColorTexture, uniformBuffer, \"translucencyColor\");\r\n            }\r\n\r\n            if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled && defines.SS_TRANSLUCENCYINTENSITY_TEXTURE) {\r\n                uniformBuffer.updateFloat2(\"vTranslucencyIntensityInfos\", this._translucencyIntensityTexture.coordinatesIndex, this._translucencyIntensityTexture.level);\r\n                BindTextureMatrix(this._translucencyIntensityTexture, uniformBuffer, \"translucencyIntensity\");\r\n            }\r\n\r\n            if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\r\n                uniformBuffer.updateMatrix(\"refractionMatrix\", refractionTexture.getRefractionTextureMatrix());\r\n\r\n                let depth = 1.0;\r\n                if (!refractionTexture.isCube) {\r\n                    if ((<any>refractionTexture).depth) {\r\n                        depth = (<any>refractionTexture).depth;\r\n                    }\r\n                }\r\n\r\n                const width = refractionTexture.getSize().width;\r\n                const refractionIor = this.volumeIndexOfRefraction;\r\n                uniformBuffer.updateFloat4(\"vRefractionInfos\", refractionTexture.level, 1 / refractionIor, depth, this._invertRefractionY ? -1 : 1);\r\n                uniformBuffer.updateFloat4(\r\n                    \"vRefractionMicrosurfaceInfos\",\r\n                    width,\r\n                    refractionTexture.lodGenerationScale,\r\n                    refractionTexture.lodGenerationOffset,\r\n                    1.0 / this.indexOfRefraction\r\n                );\r\n\r\n                if (realTimeFiltering) {\r\n                    uniformBuffer.updateFloat2(\"vRefractionFilteringInfo\", width, Math.log2(width));\r\n                }\r\n\r\n                if ((<any>refractionTexture).boundingBoxSize) {\r\n                    const cubeTexture = <CubeTexture>refractionTexture;\r\n\r\n                    uniformBuffer.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                    uniformBuffer.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                }\r\n            }\r\n\r\n            if (this._isScatteringEnabled) {\r\n                uniformBuffer.updateFloat(\"scatteringDiffusionProfile\", this._scatteringDiffusionProfileIndex);\r\n            }\r\n            uniformBuffer.updateColor3(\"vDiffusionDistance\", this.diffusionDistance);\r\n\r\n            uniformBuffer.updateFloat4(\"vTintColor\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintColorAtDistance));\r\n            uniformBuffer.updateColor4(\"vTranslucencyColor\", this.translucencyColor ?? this.tintColor, 0);\r\n\r\n            uniformBuffer.updateFloat3(\"vSubSurfaceIntensity\", this.refractionIntensity, this.translucencyIntensity, 0);\r\n\r\n            uniformBuffer.updateFloat(\"dispersion\", this.dispersion);\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._thicknessTexture && MaterialFlags.ThicknessTextureEnabled) {\r\n                uniformBuffer.setTexture(\"thicknessSampler\", this._thicknessTexture);\r\n            }\r\n\r\n            if (this._refractionIntensityTexture && MaterialFlags.RefractionIntensityTextureEnabled && defines.SS_REFRACTIONINTENSITY_TEXTURE) {\r\n                uniformBuffer.setTexture(\"refractionIntensitySampler\", this._refractionIntensityTexture);\r\n            }\r\n\r\n            if (this._translucencyIntensityTexture && MaterialFlags.TranslucencyIntensityTextureEnabled && defines.SS_TRANSLUCENCYINTENSITY_TEXTURE) {\r\n                uniformBuffer.setTexture(\"translucencyIntensitySampler\", this._translucencyIntensityTexture);\r\n            }\r\n\r\n            if (this._translucencyColorTexture && MaterialFlags.TranslucencyColorTextureEnabled && defines.SS_TRANSLUCENCYCOLOR_TEXTURE) {\r\n                uniformBuffer.setTexture(\"translucencyColorSampler\", this._translucencyColorTexture);\r\n            }\r\n\r\n            if (refractionTexture && MaterialFlags.RefractionTextureEnabled) {\r\n                if (lodBasedMicrosurface) {\r\n                    uniformBuffer.setTexture(\"refractionSampler\", refractionTexture);\r\n                } else {\r\n                    uniformBuffer.setTexture(\"refractionSampler\", refractionTexture._lodTextureMid || refractionTexture);\r\n                    uniformBuffer.setTexture(\"refractionSamplerLow\", refractionTexture._lodTextureLow || refractionTexture);\r\n                    uniformBuffer.setTexture(\"refractionSamplerHigh\", refractionTexture._lodTextureHigh || refractionTexture);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for refraction or null if none is used.\r\n     * @param scene defines the scene the material belongs to.\r\n     * @returns - Refraction texture if present.  If no refraction texture and refraction\r\n     * is linked with transparency, returns environment texture.  Otherwise, returns null.\r\n     */\r\n    private _getRefractionTexture(scene: Scene): Nullable<BaseTexture> {\r\n        if (this._refractionTexture) {\r\n            return this._refractionTexture;\r\n        }\r\n\r\n        if (this._isRefractionEnabled) {\r\n            return scene.environmentTexture;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    public get disableAlphaBlending(): boolean {\r\n        return this._isRefractionEnabled && this._linkRefractionWithTransparency;\r\n    }\r\n\r\n    /**\r\n     * Fills the list of render target textures.\r\n     * @param renderTargets the list of render targets to update\r\n     */\r\n    public override fillRenderTargetTextures(renderTargets: SmartArray<RenderTargetTexture>): void {\r\n        if (MaterialFlags.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n        }\r\n    }\r\n\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (this._thicknessTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionIntensityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._translucencyIntensityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._translucencyColorTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public override getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._thicknessTexture) {\r\n            activeTextures.push(this._thicknessTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        if (this._refractionIntensityTexture) {\r\n            activeTextures.push(this._refractionIntensityTexture);\r\n        }\r\n\r\n        if (this._translucencyColorTexture) {\r\n            activeTextures.push(this._translucencyColorTexture);\r\n        }\r\n\r\n        if (this._translucencyIntensityTexture) {\r\n            activeTextures.push(this._translucencyIntensityTexture);\r\n        }\r\n    }\r\n\r\n    public override getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\r\n            animatables.push(this._thicknessTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            animatables.push(this._refractionTexture);\r\n        }\r\n\r\n        if (this._refractionIntensityTexture && this._refractionIntensityTexture.animations && this._refractionIntensityTexture.animations.length > 0) {\r\n            animatables.push(this._refractionIntensityTexture);\r\n        }\r\n\r\n        if (this._translucencyColorTexture && this._translucencyColorTexture.animations && this._translucencyColorTexture.animations.length > 0) {\r\n            animatables.push(this._translucencyColorTexture);\r\n        }\r\n\r\n        if (this._translucencyIntensityTexture && this._translucencyIntensityTexture.animations && this._translucencyIntensityTexture.animations.length > 0) {\r\n            animatables.push(this._translucencyIntensityTexture);\r\n        }\r\n    }\r\n\r\n    public override dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._thicknessTexture) {\r\n                this._thicknessTexture.dispose();\r\n            }\r\n\r\n            if (this._refractionTexture) {\r\n                this._refractionTexture.dispose();\r\n            }\r\n\r\n            if (this._refractionIntensityTexture) {\r\n                this._refractionIntensityTexture.dispose();\r\n            }\r\n\r\n            if (this._translucencyColorTexture) {\r\n                this._translucencyColorTexture.dispose();\r\n            }\r\n\r\n            if (this._translucencyIntensityTexture) {\r\n                this._translucencyIntensityTexture.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public override getClassName(): string {\r\n        return \"PBRSubSurfaceConfiguration\";\r\n    }\r\n\r\n    public override addFallbacks(defines: MaterialSubSurfaceDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.SS_SCATTERING) {\r\n            fallbacks.addFallback(currentRank++, \"SS_SCATTERING\");\r\n        }\r\n        if (defines.SS_TRANSLUCENCY) {\r\n            fallbacks.addFallback(currentRank++, \"SS_TRANSLUCENCY\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public override getSamplers(samplers: string[]): void {\r\n        samplers.push(\r\n            \"thicknessSampler\",\r\n            \"refractionIntensitySampler\",\r\n            \"translucencyIntensitySampler\",\r\n            \"refractionSampler\",\r\n            \"refractionSamplerLow\",\r\n            \"refractionSamplerHigh\",\r\n            \"translucencyColorSampler\"\r\n        );\r\n    }\r\n\r\n    public override getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vRefractionMicrosurfaceInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"vRefractionFilteringInfo\", size: 2, type: \"vec2\" },\r\n                { name: \"vTranslucencyIntensityInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vRefractionInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"refractionMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vThicknessInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vRefractionIntensityInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"thicknessMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"refractionIntensityMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"translucencyIntensityMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vThicknessParam\", size: 2, type: \"vec2\" },\r\n                { name: \"vDiffusionDistance\", size: 3, type: \"vec3\" },\r\n                { name: \"vTintColor\", size: 4, type: \"vec4\" },\r\n                { name: \"vSubSurfaceIntensity\", size: 3, type: \"vec3\" },\r\n                { name: \"vRefractionPosition\", size: 3, type: \"vec3\" },\r\n                { name: \"vRefractionSize\", size: 3, type: \"vec3\" },\r\n                { name: \"scatteringDiffusionProfile\", size: 1, type: \"float\" },\r\n                { name: \"dispersion\", size: 1, type: \"float\" },\r\n\r\n                { name: \"vTranslucencyColor\", size: 4, type: \"vec4\" },\r\n                { name: \"vTranslucencyColorInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"translucencyColorMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { expandToProperty } from \"../../Misc/decorators\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SmartArray } from \"../../Misc/smartArray\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\r\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\r\nimport { Color3, TmpColors } from \"../../Maths/math.color\";\r\n\r\nimport { ImageProcessingDefinesMixin } from \"../../Materials/imageProcessingConfiguration.defines\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport type { IMaterialCompilationOptions, ICustomShaderNameResolveOptions } from \"../../Materials/material\";\r\nimport { Material } from \"../../Materials/material\";\r\nimport { MaterialPluginEvent } from \"../materialPluginEvent\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\r\n\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\n\r\nimport \"../../Materials/Textures/baseTexture.polynomial\";\r\n\r\nimport { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\r\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration\";\r\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\r\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\r\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\r\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration\";\r\nimport { AddClipPlaneUniforms, BindClipPlane } from \"../clipPlaneMaterialHelper\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLights,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindTextureMatrix,\r\n    BindIBLParameters,\r\n    BindIBLSamplers,\r\n    HandleFallbacksForShadows,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareAttributesForBones,\r\n    PrepareAttributesForInstances,\r\n    PrepareAttributesForMorphTargets,\r\n    PrepareDefinesForAttributes,\r\n    PrepareDefinesForFrameBoundValues,\r\n    PrepareDefinesForLights,\r\n    PrepareDefinesForIBL,\r\n    PrepareDefinesForMergedUV,\r\n    PrepareDefinesForMisc,\r\n    PrepareDefinesForMultiview,\r\n    PrepareDefinesForOIT,\r\n    PrepareDefinesForPrePass,\r\n    PrepareUniformsAndSamplersList,\r\n    PrepareUniformsAndSamplersForIBL,\r\n    PrepareUniformLayoutForIBL,\r\n} from \"../materialHelper.functions\";\r\nimport { ShaderLanguage } from \"../shaderLanguage\";\r\nimport { MaterialHelperGeometryRendering } from \"../materialHelper.geometryrendering\";\r\nimport { UVDefinesMixin } from \"../uv.defines\";\r\nimport { ImageProcessingMixin } from \"../imageProcessing\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\nclass PBRMaterialDefinesBase extends UVDefinesMixin(MaterialDefines) {}\r\n\r\n/**\r\n * Manages the defines for the PBR Material.\r\n * @internal\r\n */\r\nexport class PBRMaterialDefines extends ImageProcessingDefinesMixin(PBRMaterialDefinesBase) {\r\n    public PBR = true;\r\n\r\n    public NUM_SAMPLES = \"0\";\r\n    public REALTIME_FILTERING = false;\r\n    public IBL_CDF_FILTERING = false;\r\n\r\n    public ALBEDO = false;\r\n    public GAMMAALBEDO = false;\r\n    public ALBEDODIRECTUV = 0;\r\n    public VERTEXCOLOR = false;\r\n\r\n    public BASE_WEIGHT = false;\r\n    public BASE_WEIGHTDIRECTUV = 0;\r\n    public BASE_DIFFUSE_ROUGHNESS = false;\r\n    public BASE_DIFFUSE_ROUGHNESSDIRECTUV = 0;\r\n\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public AMBIENTINGRAYSCALE = false;\r\n\r\n    public OPACITY = false;\r\n    public VERTEXALPHA = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHABLEND = false;\r\n    public ALPHAFROMALBEDO = false;\r\n    public ALPHATESTVALUE = \"0.5\";\r\n    public SPECULAROVERALPHA = false;\r\n    public RADIANCEOVERALPHA = false;\r\n    public ALPHAFRESNEL = false;\r\n    public LINEARALPHAFRESNEL = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public GAMMAEMISSIVE = false;\r\n\r\n    public REFLECTIVITY = false;\r\n    public REFLECTIVITY_GAMMA = false;\r\n    public REFLECTIVITYDIRECTUV = 0;\r\n    public SPECULARTERM = false;\r\n\r\n    public MICROSURFACEFROMREFLECTIVITYMAP = false;\r\n    public MICROSURFACEAUTOMATIC = false;\r\n    public LODBASEDMICROSFURACE = false;\r\n    public MICROSURFACEMAP = false;\r\n    public MICROSURFACEMAPDIRECTUV = 0;\r\n\r\n    public METALLICWORKFLOW = false;\r\n    public ROUGHNESSSTOREINMETALMAPALPHA = false;\r\n    public ROUGHNESSSTOREINMETALMAPGREEN = false;\r\n    public METALLNESSSTOREINMETALMAPBLUE = false;\r\n    public AOSTOREINMETALMAPRED = false;\r\n    public METALLIC_REFLECTANCE = false;\r\n    public METALLIC_REFLECTANCE_GAMMA = false;\r\n    public METALLIC_REFLECTANCEDIRECTUV = 0;\r\n    public METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\r\n    public REFLECTANCE = false;\r\n    public REFLECTANCE_GAMMA = false;\r\n    public REFLECTANCEDIRECTUV = 0;\r\n\r\n    public ENVIRONMENTBRDF = false;\r\n    public ENVIRONMENTBRDF_RGBD = false;\r\n\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public PARALLAX = false;\r\n    public PARALLAX_RHS = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public NORMALXYSCALE = true;\r\n\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public GAMMALIGHTMAP = false;\r\n    public RGBDLIGHTMAP = false;\r\n\r\n    public REFLECTION = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public INVERTCUBICMAP = false;\r\n    public USESPHERICALFROMREFLECTIONMAP = false;\r\n    public USEIRRADIANCEMAP = false;\r\n    public USE_IRRADIANCE_DOMINANT_DIRECTION = false;\r\n    public USESPHERICALINVERTEX = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public LODINREFLECTIONALPHA = false;\r\n    public GAMMAREFLECTION = false;\r\n    public RGBDREFLECTION = false;\r\n    public LINEARSPECULARREFLECTION = false;\r\n    public RADIANCEOCCLUSION = false;\r\n    public HORIZONOCCLUSION = false;\r\n\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_COLOR = false;\r\n    public PREPASS_COLOR_INDEX = -1;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO = false;\r\n    public PREPASS_ALBEDO_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_SCREENSPACE_DEPTH = false;\r\n    public PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMALIZED_VIEW_DEPTH = false;\r\n    public PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_NORMAL_WORLDSPACE = false;\r\n    public PREPASS_WORLD_NORMAL = false;\r\n    public PREPASS_WORLD_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_LOCAL_POSITION = false;\r\n    public PREPASS_LOCAL_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_VELOCITY_LINEAR = false;\r\n    public PREPASS_VELOCITY_LINEAR_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_POSITION = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public MORPHTARGETS_UV2 = false;\r\n    public MORPHTARGETS_COLOR = false;\r\n    public MORPHTARGETTEXTURE_HASPOSITIONS = false;\r\n    public MORPHTARGETTEXTURE_HASNORMALS = false;\r\n    public MORPHTARGETTEXTURE_HASTANGENTS = false;\r\n    public MORPHTARGETTEXTURE_HASUVS = false;\r\n    public MORPHTARGETTEXTURE_HASUV2S = false;\r\n    public MORPHTARGETTEXTURE_HASCOLORS = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    public USEPHYSICALLIGHTFALLOFF = false;\r\n    public USEGLTFLIGHTFALLOFF = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public MIRRORED = false;\r\n    public SHADOWFLOAT = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n    public AREALIGHTSUPPORTED = true;\r\n\r\n    public FORCENORMALFORWARD = false;\r\n\r\n    public SPECULARAA = false;\r\n\r\n    public UNLIT = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    public DEBUGMODE = 0;\r\n    public USE_VERTEX_PULLING = false;\r\n\r\n    public CLUSTLIGHT_SLICES = 0;\r\n    public CLUSTLIGHT_BATCH = 0;\r\n\r\n    /**\r\n     * Initializes the PBR Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Resets the PBR Material defines.\r\n     */\r\n    public override reset(): void {\r\n        super.reset();\r\n        this.ALPHATESTVALUE = \"0.5\";\r\n        this.PBR = true;\r\n        this.NORMALXYSCALE = true;\r\n    }\r\n}\r\n\r\nclass PBRBaseMaterialBase extends ImageProcessingMixin(PushMaterial) {}\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\r\n * @see [WebGL](https://playground.babylonjs.com/#CGHTSM#1)\r\n * @see [WebGPU](https://playground.babylonjs.com/#CGHTSM#2)\r\n */\r\nexport abstract class PBRBaseMaterial extends PBRBaseMaterialBase {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static override readonly LIGHTFALLOFF_PHYSICAL = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static override readonly LIGHTFALLOFF_GLTF = 1;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static override readonly LIGHTFALLOFF_STANDARD = 2;\r\n\r\n    /**\r\n     * Force all the PBR materials to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     * @internal\r\n     */\r\n    public _directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     * @internal\r\n     */\r\n    public _emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     * @internal\r\n     */\r\n    public _environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     * @internal\r\n     */\r\n    public _specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\r\n    private _lightingInfos: Vector4 = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     * @internal\r\n     */\r\n    public _disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Base Weight texture (multiplier to the diffuse and metal lobes).\r\n     * @internal\r\n     */\r\n    public _baseWeightTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Base Diffuse Roughness texture (roughness of the diffuse lobe).\r\n     * @internal\r\n     */\r\n    public _baseDiffuseRoughnessTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     * @internal\r\n     */\r\n    public _ambientTextureImpactOnAnalyticalLights: number = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture.\r\n     * @internal\r\n     */\r\n    public _opacityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     * @internal\r\n     */\r\n    public _reflectionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     * @internal\r\n     */\r\n    public _emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     * @internal\r\n     */\r\n    public _metallicTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _metallic: Nullable<number> = null;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     * @internal\r\n     */\r\n    public _roughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     * @internal\r\n     */\r\n    public _metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 color.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0_from_IOR * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicF0Factor;\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\r\n     * If false, both RGB and A channels will be used\r\n     * @internal\r\n     */\r\n    public _useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     * @internal\r\n     */\r\n    public _metallicReflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Defines to store reflectanceColor in RGB\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\r\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\r\n     * @internal\r\n     */\r\n    public _reflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     * @internal\r\n     */\r\n    public _microSurfaceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     * @internal\r\n     */\r\n    public _lightmapTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     * @internal\r\n     */\r\n    public _ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Base Weight (multiplier to the diffuse and metal lobes).\r\n     * @internal\r\n     */\r\n    public _baseWeight = 1;\r\n\r\n    /**\r\n     * Base Diffuse Roughness (roughness of the diffuse lobe).\r\n     * Can also be used to scale the corresponding texture.\r\n     * @internal\r\n     */\r\n    public _baseDiffuseRoughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     * @internal\r\n     */\r\n    public _reflectionColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     * @internal\r\n     */\r\n    public _emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     * @internal\r\n     */\r\n    public _microSurface = 0.9;\r\n\r\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     * @internal\r\n     */\r\n    public _useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     * @internal\r\n     */\r\n    public _useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     * @internal\r\n     */\r\n    public _useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     * @internal\r\n     */\r\n    public _useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     * @internal\r\n     */\r\n    public _useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     * @internal\r\n     */\r\n    public _useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     * @internal\r\n     */\r\n    public _useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     * @internal\r\n     */\r\n    public _useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     * @internal\r\n     */\r\n    public _useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     * @internal\r\n     */\r\n    public _lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     * @internal\r\n     */\r\n    public _useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     * @internal\r\n     */\r\n    public _useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     * @internal\r\n     */\r\n    public _useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     * @internal\r\n     */\r\n    public _useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     * @internal\r\n     */\r\n    public _parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     * @internal\r\n     */\r\n    public _disableLighting = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     * @internal\r\n     */\r\n    public _maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     * @internal\r\n     */\r\n    public _invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     * @internal\r\n     */\r\n    public _twoSidedLighting = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     * @internal\r\n     */\r\n    public _alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     * @internal\r\n     */\r\n    public _useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\r\n     * from cos theta and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     * @internal\r\n     */\r\n    public _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     * @internal\r\n     */\r\n    public _forceIrradianceInFragment = false;\r\n\r\n    private _realTimeFiltering: boolean = false;\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    public get realTimeFiltering() {\r\n        return this._realTimeFiltering;\r\n    }\r\n    public set realTimeFiltering(b: boolean) {\r\n        this._realTimeFiltering = b;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private _realTimeFilteringQuality: number = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    public get realTimeFilteringQuality(): number {\r\n        return this._realTimeFilteringQuality;\r\n    }\r\n    public set realTimeFilteringQuality(n: number) {\r\n        this._realTimeFilteringQuality = n;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public override get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     * @internal\r\n     */\r\n    public _forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     * @internal\r\n     */\r\n    public _enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * Stores the available render targets.\r\n     */\r\n    private _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\r\n    private _globalAmbientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    private _unlit = false;\r\n\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    private _applyDecalMapAfterDetailMap = false;\r\n\r\n    private _debugMode = 0;\r\n\r\n    private _shadersLoaded = false;\r\n    private _breakShaderLoadedCheck = false;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\r\n    public debugLimit = -1;\r\n\r\n    /**\r\n     * @internal\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    public debugFactor = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\r\n    public readonly clearCoat: PBRClearCoatConfiguration;\r\n\r\n    /**\r\n     * Defines the iridescence layer parameters for the material.\r\n     */\r\n    public readonly iridescence: PBRIridescenceConfiguration;\r\n\r\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\r\n    public readonly anisotropy: PBRAnisotropicConfiguration;\r\n\r\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\r\n    public readonly brdf: PBRBRDFConfiguration;\r\n\r\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\r\n    public readonly sheen: PBRSheenConfiguration;\r\n\r\n    /**\r\n     * Defines the SubSurface parameters for the material.\r\n     */\r\n    public readonly subSurface: PBRSubSurfaceConfiguration;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Scene, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL || PBRBaseMaterial.ForceGLSL);\r\n\r\n        this.brdf = new PBRBRDFConfiguration(this);\r\n        this.clearCoat = new PBRClearCoatConfiguration(this);\r\n        this.iridescence = new PBRIridescenceConfiguration(this);\r\n        this.anisotropy = new PBRAnisotropicConfiguration(this);\r\n        this.sheen = new PBRSheenConfiguration(this);\r\n        this.subSurface = new PBRSubSurfaceConfiguration(this);\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public override get hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public override get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * @returns the name of the material class.\r\n     */\r\n    public override getClassName(): string {\r\n        return \"PBRBaseMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected override get _disableAlphaBlending(): boolean {\r\n        return (\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST ||\r\n            this.subSurface?.disableAlphaBlending\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not this material should be rendered in alpha blend mode.\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not this material should be rendered in alpha test mode.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        if (this.subSurface?.disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromAlbedoTexture(): boolean {\r\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * @returns the texture used for the alpha test.\r\n     */\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param mesh - BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n     * @param useInstances - Specifies that instances should be used.\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (drawWrapper.effect && this.isFrozen) {\r\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._baseWeightTexture && MaterialFlags.BaseWeightTextureEnabled) {\r\n                    if (!this._baseWeightTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._baseDiffuseRoughnessTexture && MaterialFlags.BaseDiffuseRoughnessTextureEnabled) {\r\n                    if (!this._baseDiffuseRoughnessTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                    if (reflectionTexture.irradianceTexture) {\r\n                        if (!reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        // Not ready until spherical are ready too.\r\n                        if (!reflectionTexture.sphericalPolynomial && reflectionTexture.getInternalTexture()?._sphericalPolynomialPromise) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else if (this._reflectivityTexture) {\r\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._reflectanceTexture) {\r\n                        if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    // This is blocking.\r\n                    if (!this._environmentBRDFTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Check if Area Lights have LTC texture.\r\n        if (defines[\"AREALIGHTUSED\"] || defines[\"CLUSTLIGHT_BATCH\"]) {\r\n            for (let index = 0; index < mesh.lightSources.length; index++) {\r\n                if (!mesh.lightSources[index]._isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            mesh.createNormals(true);\r\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\r\n        }\r\n\r\n        const previousEffect = subMesh.effect;\r\n        const lightDisposed = defines._areLightsDisposed;\r\n        let effect = this._prepareEffect(mesh, subMesh.getRenderingMesh(), defines, this.onCompiled, this.onError, useInstances, null);\r\n\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (effect) {\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n\r\n            // Use previous effect while new one is compiling\r\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                effect = previousEffect;\r\n                defines.markAsUnprocessed();\r\n\r\n                forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                if (lightDisposed) {\r\n                    // re register in case it takes more than one frame.\r\n                    defines._areLightsDisposed = true;\r\n                    return false;\r\n                }\r\n            } else {\r\n                scene.resetCachedMaterial();\r\n                subMesh.setEffect(effect, defines, this._materialContext);\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        drawWrapper._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses metallic roughness workflow.\r\n     * @returns boolean specifying if the material uses metallic roughness workflow.\r\n     */\r\n    public isMetallicWorkflow(): boolean {\r\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareEffect(\r\n        mesh: AbstractMesh,\r\n        renderingMesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        onCompiled: Nullable<(effect: Effect) => void> = null,\r\n        onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null\r\n    ): Nullable<Effect> {\r\n        this._prepareDefines(mesh, renderingMesh, defines, useInstances, useClipPlane);\r\n\r\n        if (!defines.isDirty) {\r\n            return null;\r\n        }\r\n\r\n        defines.markAsProcessed();\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Fallbacks\r\n        const fallbacks = new EffectFallbacks();\r\n        let fallbackRank = 0;\r\n        if (defines.USESPHERICALINVERTEX) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\r\n        }\r\n\r\n        if (defines.FOG) {\r\n            fallbacks.addFallback(fallbackRank, \"FOG\");\r\n        }\r\n        if (defines.SPECULARAA) {\r\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\r\n        }\r\n        if (defines.POINTSIZE) {\r\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\r\n        }\r\n        if (defines.LOGARITHMICDEPTH) {\r\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\r\n        }\r\n        if (defines.PARALLAX) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\r\n        }\r\n        if (defines.PARALLAX_RHS) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX_RHS\");\r\n        }\r\n        if (defines.PARALLAXOCCLUSION) {\r\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\r\n        }\r\n\r\n        if (defines.ENVIRONMENTBRDF) {\r\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\r\n        }\r\n\r\n        if (defines.BUMP) {\r\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\r\n        }\r\n\r\n        fallbackRank = HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\r\n        }\r\n\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\r\n        }\r\n\r\n        if (defines.USEIRRADIANCEMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\r\n        }\r\n\r\n        if (defines.LIGHTMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\r\n        }\r\n\r\n        if (defines.NORMAL) {\r\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\r\n        }\r\n\r\n        if (defines.AMBIENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\r\n        }\r\n\r\n        if (defines.EMISSIVE) {\r\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\r\n        }\r\n\r\n        if (defines.MORPHTARGETS) {\r\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\r\n        }\r\n\r\n        if (defines.MULTIVIEW) {\r\n            fallbacks.addFallback(0, \"MULTIVIEW\");\r\n        }\r\n\r\n        //Attributes\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        if (defines.NORMAL) {\r\n            attribs.push(VertexBuffer.NormalKind);\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            attribs.push(VertexBuffer.TangentKind);\r\n        }\r\n\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            if (defines[\"UV\" + i]) {\r\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n            }\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n        PrepareAttributesForInstances(attribs, defines);\r\n        PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n        PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n        let shaderName = \"pbr\";\r\n\r\n        const uniforms = [\r\n            \"world\",\r\n            \"view\",\r\n            \"viewProjection\",\r\n            \"vEyePosition\",\r\n            \"vLightsType\",\r\n            \"vAmbientColor\",\r\n            \"vAlbedoColor\",\r\n            \"baseWeight\",\r\n            \"baseDiffuseRoughness\",\r\n            \"vReflectivityColor\",\r\n            \"vMetallicReflectanceFactors\",\r\n            \"vEmissiveColor\",\r\n            \"visibility\",\r\n            \"vFogInfos\",\r\n            \"vFogColor\",\r\n            \"pointSize\",\r\n            \"vAlbedoInfos\",\r\n            \"vBaseWeightInfos\",\r\n            \"vBaseDiffuseRoughnessInfos\",\r\n            \"vAmbientInfos\",\r\n            \"vOpacityInfos\",\r\n            \"vEmissiveInfos\",\r\n            \"vReflectivityInfos\",\r\n            \"vMetallicReflectanceInfos\",\r\n            \"vReflectanceInfos\",\r\n            \"vMicroSurfaceSamplerInfos\",\r\n            \"vBumpInfos\",\r\n            \"vLightmapInfos\",\r\n            \"mBones\",\r\n            \"albedoMatrix\",\r\n            \"baseWeightMatrix\",\r\n            \"baseDiffuseRoughnessMatrix\",\r\n            \"ambientMatrix\",\r\n            \"opacityMatrix\",\r\n            \"emissiveMatrix\",\r\n            \"reflectivityMatrix\",\r\n            \"normalMatrix\",\r\n            \"microSurfaceSamplerMatrix\",\r\n            \"bumpMatrix\",\r\n            \"lightmapMatrix\",\r\n            \"metallicReflectanceMatrix\",\r\n            \"reflectanceMatrix\",\r\n            \"vLightingIntensity\",\r\n            \"logarithmicDepthConstant\",\r\n            \"vTangentSpaceParams\",\r\n            \"boneTextureWidth\",\r\n            \"vDebugMode\",\r\n            \"morphTargetTextureInfo\",\r\n            \"morphTargetTextureIndices\",\r\n            \"cameraInfo\",\r\n        ];\r\n\r\n        const samplers = [\r\n            \"albedoSampler\",\r\n            \"baseWeightSampler\",\r\n            \"baseDiffuseRoughnessSampler\",\r\n            \"reflectivitySampler\",\r\n            \"ambientSampler\",\r\n            \"emissiveSampler\",\r\n            \"bumpSampler\",\r\n            \"lightmapSampler\",\r\n            \"opacitySampler\",\r\n            \"microSurfaceSampler\",\r\n            \"environmentBrdfSampler\",\r\n            \"boneSampler\",\r\n            \"metallicReflectanceSampler\",\r\n            \"reflectanceSampler\",\r\n            \"morphTargets\",\r\n            \"oitDepthSampler\",\r\n            \"oitFrontColorSampler\",\r\n            \"areaLightsLTC1Sampler\",\r\n            \"areaLightsLTC2Sampler\",\r\n        ];\r\n\r\n        PrepareUniformsAndSamplersForIBL(uniforms, samplers, true);\r\n\r\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n        const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n        this._eventInfo.fallbacks = fallbacks;\r\n        this._eventInfo.fallbackRank = fallbackRank;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.uniforms = uniforms;\r\n        this._eventInfo.attributes = attribs;\r\n        this._eventInfo.samplers = samplers;\r\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n        this._eventInfo.customCode = undefined;\r\n        this._eventInfo.mesh = mesh;\r\n        this._eventInfo.indexParameters = indexParameters;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n        MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\r\n\r\n        PrePassConfiguration.AddUniforms(uniforms);\r\n        PrePassConfiguration.AddSamplers(samplers);\r\n        AddClipPlaneUniforms(uniforms);\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n        }\r\n\r\n        PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: defines,\r\n            maxSimultaneousLights: this._maxSimultaneousLights,\r\n        });\r\n\r\n        const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n        if (this.customShaderNameResolve) {\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n        }\r\n\r\n        const join = defines.toString();\r\n        const effect = engine.createEffect(\r\n            shaderName,\r\n            <IEffectCreationOptions>{\r\n                attributes: attribs,\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: join,\r\n                fallbacks: fallbacks,\r\n                onCompiled: onCompiled,\r\n                onError: onError,\r\n                indexParameters,\r\n                processFinalCode: csnrOptions.processFinalCode,\r\n                processCodeAfterIncludes: this._eventInfo.customCode,\r\n                multiTarget: defines.PREPASS,\r\n                shaderLanguage: this._shaderLanguage,\r\n                extraInitializationsAsync: this._shadersLoaded\r\n                    ? undefined\r\n                    : async () => {\r\n                          if (this.shaderLanguage === ShaderLanguage.WGSL) {\r\n                              await Promise.all([import(\"../../ShadersWGSL/pbr.vertex\"), import(\"../../ShadersWGSL/pbr.fragment\")]);\r\n                          } else {\r\n                              await Promise.all([import(\"../../Shaders/pbr.vertex\"), import(\"../../Shaders/pbr.fragment\")]);\r\n                          }\r\n\r\n                          this._shadersLoaded = true;\r\n                      },\r\n            },\r\n            engine\r\n        );\r\n\r\n        this._eventInfo.customCode = undefined;\r\n\r\n        return effect;\r\n    }\r\n\r\n    private _prepareDefines(\r\n        mesh: AbstractMesh,\r\n        renderingMesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null\r\n    ): void {\r\n        const useThinInstances = renderingMesh.hasThinInstances;\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n        defines._needNormals = true;\r\n\r\n        // Multiview\r\n        PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\r\n\r\n        // Textures\r\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.ALBEDODIRECTUV = 0;\r\n                defines.BASE_WEIGHTDIRECTUV = 0;\r\n                defines.BASE_DIFFUSE_ROUGHNESSDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.REFLECTIVITYDIRECTUV = 0;\r\n                defines.MICROSURFACEMAPDIRECTUV = 0;\r\n                defines.METALLIC_REFLECTANCEDIRECTUV = 0;\r\n                defines.REFLECTANCEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (engine.getCaps().textureLOD) {\r\n                    defines.LODBASEDMICROSFURACE = true;\r\n                }\r\n\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\r\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\r\n                } else {\r\n                    defines.ALBEDO = false;\r\n                }\r\n\r\n                if (this._baseWeightTexture && MaterialFlags.BaseWeightTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._baseWeightTexture, defines, \"BASE_WEIGHT\");\r\n                } else {\r\n                    defines.BASE_WEIGHT = false;\r\n                }\r\n\r\n                if (this._baseDiffuseRoughnessTexture && MaterialFlags.BaseDiffuseRoughnessTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._baseDiffuseRoughnessTexture, defines, \"BASE_DIFFUSE_ROUGHNESS\");\r\n                } else {\r\n                    defines.BASE_DIFFUSE_ROUGHNESS = false;\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                const useSHInFragment: boolean =\r\n                    this._forceIrradianceInFragment ||\r\n                    this.realTimeFiltering ||\r\n                    this._twoSidedLighting ||\r\n                    engine.getCaps().maxVaryingVectors <= 8 ||\r\n                    this._baseDiffuseRoughnessTexture != null;\r\n                PrepareDefinesForIBL(scene, reflectionTexture, defines, this.realTimeFiltering, this.realTimeFilteringQuality, !useSHInFragment);\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\r\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\r\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\r\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\r\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\r\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\r\n                        defines.REFLECTIVITY_GAMMA = false;\r\n                    } else if (this._reflectivityTexture) {\r\n                        PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\r\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\r\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\r\n                        defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\r\n                    } else {\r\n                        defines.REFLECTIVITY = false;\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture || this._reflectanceTexture) {\r\n                        defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture;\r\n                        if (this._metallicReflectanceTexture) {\r\n                            PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\r\n                            defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.METALLIC_REFLECTANCE = false;\r\n                        }\r\n                        if (\r\n                            this._reflectanceTexture &&\r\n                            (!this._metallicReflectanceTexture || (this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture))\r\n                        ) {\r\n                            PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\r\n                            defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.REFLECTANCE = false;\r\n                        }\r\n                    } else {\r\n                        defines.METALLIC_REFLECTANCE = false;\r\n                        defines.REFLECTANCE = false;\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\r\n                    } else {\r\n                        defines.MICROSURFACEMAP = false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTIVITY = false;\r\n                    defines.MICROSURFACEMAP = false;\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        defines.PARALLAX = true;\r\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\r\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\r\n                    } else {\r\n                        defines.PARALLAX = false;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAX_RHS = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                    defines.OBJECTSPACE_NORMALMAP = false;\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.ENVIRONMENTBRDF = true;\r\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\r\n                } else {\r\n                    defines.ENVIRONMENTBRDF = false;\r\n                    defines.ENVIRONMENTBRDF_RGBD = false;\r\n                }\r\n\r\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\r\n                    defines.ALPHAFROMALBEDO = true;\r\n                } else {\r\n                    defines.ALPHAFROMALBEDO = false;\r\n                }\r\n            }\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = true;\r\n            } else {\r\n                defines.USEPHYSICALLIGHTFALLOFF = true;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n\r\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\r\n\r\n            if (!this.backFaceCulling && this._twoSidedLighting) {\r\n                defines.TWOSIDEDLIGHTING = true;\r\n            } else {\r\n                defines.TWOSIDEDLIGHTING = false;\r\n            }\r\n\r\n            // We need it to not invert normals in two sided lighting mode (based on the winding of the face)\r\n            defines.MIRRORED = !!scene._mirroredCameraPosition;\r\n\r\n            defines.SPECULARAA = engine.getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\r\n        }\r\n\r\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\r\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\r\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\r\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\r\n\r\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\r\n\r\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            PrepareDefinesForMisc(\r\n                mesh,\r\n                scene,\r\n                this._useLogarithmicDepth,\r\n                this.pointsCloud,\r\n                this.fogEnabled,\r\n                this.needAlphaTestingForMesh(mesh),\r\n                defines,\r\n                this._applyDecalMapAfterDetailMap,\r\n                this._useVertexPulling,\r\n                renderingMesh,\r\n                this._isVertexOutputInvariant\r\n            );\r\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\r\n            defines.DEBUGMODE = this._debugMode;\r\n        }\r\n\r\n        // Values that need to be evaluated on every frame\r\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances ? true : false, useClipPlane, useThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh - Define the mesh we want to force the compilation for\r\n     * @param onCompiled - Define a callback triggered when the compilation completes\r\n     * @param options - Define the options used to create the compilation\r\n     */\r\n    public override forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<IMaterialCompilationOptions>): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n        const checkReady = () => {\r\n            if (this._breakShaderLoadedCheck) {\r\n                return;\r\n            }\r\n            const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n            const effect = this._prepareEffect(mesh, mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane)!;\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = null;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n            if (effect.isReady()) {\r\n                if (onCompiled) {\r\n                    onCompiled(this);\r\n                }\r\n            } else {\r\n                effect.onCompileObservable.add(() => {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public override buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"vAlbedoInfos\", 2);\r\n        ubo.addUniform(\"vBaseWeightInfos\", 2);\r\n        ubo.addUniform(\"vBaseDiffuseRoughnessInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 4);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vReflectivityInfos\", 3);\r\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n        ubo.addUniform(\"albedoMatrix\", 16);\r\n        ubo.addUniform(\"baseWeightMatrix\", 16);\r\n        ubo.addUniform(\"baseDiffuseRoughnessMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"reflectivityMatrix\", 16);\r\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"vAlbedoColor\", 4);\r\n        ubo.addUniform(\"baseWeight\", 1);\r\n        ubo.addUniform(\"baseDiffuseRoughness\", 1);\r\n        ubo.addUniform(\"vLightingIntensity\", 4);\r\n\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"vReflectivityColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        ubo.addUniform(\"vDebugMode\", 2);\r\n\r\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\r\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\r\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\r\n        ubo.addUniform(\"vReflectanceInfos\", 2);\r\n        ubo.addUniform(\"reflectanceMatrix\", 16);\r\n\r\n        ubo.addUniform(\"cameraInfo\", 4);\r\n        PrepareUniformLayoutForIBL(ubo, true, true, true, true, true);\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh data.\r\n     * @param world - The world matrix.\r\n     * @param mesh - The BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        MaterialHelperGeometryRendering.Bind(engine.currentRenderPassId, this._activeEffect, mesh, world, this);\r\n\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\r\n        }\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\r\n\r\n        // Bones\r\n        BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\r\n\r\n        let reflectionTexture: Nullable<BaseTexture> = null;\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            reflectionTexture = this._getReflectionTexture();\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\r\n                // Texture uniforms\r\n                if (scene.texturesEnabled) {\r\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\r\n                        BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\r\n                    }\r\n\r\n                    if (this._baseWeightTexture && MaterialFlags.BaseWeightTextureEnabled) {\r\n                        ubo.updateFloat2(\"vBaseWeightInfos\", this._baseWeightTexture.coordinatesIndex, this._baseWeightTexture.level);\r\n                        BindTextureMatrix(this._baseWeightTexture, ubo, \"baseWeight\");\r\n                    }\r\n\r\n                    if (this._baseDiffuseRoughnessTexture && MaterialFlags.BaseDiffuseRoughnessTextureEnabled) {\r\n                        ubo.updateFloat2(\"vBaseDiffuseRoughnessInfos\", this._baseDiffuseRoughnessTexture.coordinatesIndex, this._baseDiffuseRoughnessTexture.level);\r\n                        BindTextureMatrix(this._baseDiffuseRoughnessTexture, ubo, \"baseDiffuseRoughness\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                        ubo.updateFloat4(\r\n                            \"vAmbientInfos\",\r\n                            this._ambientTexture.coordinatesIndex,\r\n                            this._ambientTexture.level,\r\n                            this._ambientTextureStrength,\r\n                            this._ambientTextureImpactOnAnalyticalLights\r\n                        );\r\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (MaterialFlags.SpecularTextureEnabled) {\r\n                        if (this._metallicTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\r\n                            BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\r\n                        } else if (this._reflectivityTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\r\n                            BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\r\n                        }\r\n\r\n                        if (this._metallicReflectanceTexture) {\r\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\r\n                            BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\r\n                        }\r\n\r\n                        if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                            ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\r\n                            BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\r\n                        }\r\n\r\n                        if (this._microSurfaceTexture) {\r\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\r\n                            BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\r\n                        }\r\n                    }\r\n\r\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\r\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    BindIBLParameters(scene, defines, ubo, this._reflectionColor, reflectionTexture, this.realTimeFiltering, true, true, true, true, true);\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                // Colors\r\n                if (defines.METALLICWORKFLOW) {\r\n                    TmpColors.Color4[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\r\n                    TmpColors.Color4[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\r\n                    const ior = this.subSurface?._indexOfRefraction ?? 1.5;\r\n                    const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n                    TmpColors.Color4[0].b = ior;\r\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\r\n                    // Based of the schlick fresnel approximation model\r\n                    // for dielectrics.\r\n                    const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n                    TmpColors.Color4[0].a = f0;\r\n                    ubo.updateDirectColor4(\"vReflectivityColor\", TmpColors.Color4[0]);\r\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", this._metallicReflectanceColor, this._metallicF0Factor);\r\n                } else {\r\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\r\n\r\n                if (!defines.SS_REFRACTION && this.subSurface?._linkRefractionWithTransparency) {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\r\n                } else {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\r\n                }\r\n\r\n                ubo.updateFloat(\"baseWeight\", this._baseWeight);\r\n                ubo.updateFloat(\"baseDiffuseRoughness\", this._baseDiffuseRoughness || 0.0);\r\n\r\n                // Misc\r\n                this._lightingInfos.x = this._directIntensity;\r\n                this._lightingInfos.y = this._emissiveIntensity;\r\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\r\n                this._lightingInfos.w = this._specularIntensity;\r\n\r\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\r\n\r\n                // Colors\r\n                scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\r\n\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n\r\n                ubo.updateFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                }\r\n\r\n                if (this._baseWeightTexture && MaterialFlags.BaseWeightTextureEnabled) {\r\n                    ubo.setTexture(\"baseWeightSampler\", this._baseWeightTexture);\r\n                }\r\n\r\n                if (this._baseDiffuseRoughnessTexture && MaterialFlags.BaseDiffuseRoughnessTextureEnabled) {\r\n                    ubo.setTexture(\"baseDiffuseRoughnessSampler\", this._baseDiffuseRoughnessTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                BindIBLSamplers(scene, defines, ubo, reflectionTexture, this.realTimeFiltering);\r\n\r\n                if (defines.ENVIRONMENTBRDF) {\r\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\r\n                    } else if (this._reflectivityTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\r\n                    }\r\n\r\n                    if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                        ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            BindClipPlane(this._activeEffect, this, scene);\r\n\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                reflectionTexture ||\r\n                this.subSurface.refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS ||\r\n                defines[\"CLUSTLIGHT_BATCH\"]\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            BindFogParameters(scene, mesh, this._activeEffect, true);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                BindMorphTargetParameters(mesh, this._activeEffect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // image processing\r\n            this._imageProcessingConfiguration.bind(this._activeEffect);\r\n\r\n            // Log. depth\r\n            BindLogDepth(defines, this._activeEffect, scene);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * If material have animatable metallic texture, then reflectivity texture will not be returned, even if it has animations.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\r\n            results.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._baseWeightTexture && this._baseWeightTexture.animations && this._baseWeightTexture.animations.length > 0) {\r\n            results.push(this._baseWeightTexture);\r\n        }\r\n\r\n        if (this._baseDiffuseRoughnessTexture && this._baseDiffuseRoughnessTexture.animations && this._baseDiffuseRoughnessTexture.animations.length > 0) {\r\n            results.push(this._baseDiffuseRoughnessTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\r\n            results.push(this._metallicTexture);\r\n        } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\r\n            results.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture && this._metallicReflectanceTexture.animations && this._metallicReflectanceTexture.animations.length > 0) {\r\n            results.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture && this._reflectanceTexture.animations && this._reflectanceTexture.animations.length > 0) {\r\n            results.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture && this._microSurfaceTexture.animations && this._microSurfaceTexture.animations.length > 0) {\r\n            results.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for reflections.\r\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n     */\r\n    private _getReflectionTexture(): Nullable<BaseTexture> {\r\n        if (this._reflectionTexture) {\r\n            return this._reflectionTexture;\r\n        }\r\n\r\n        return this.getScene().environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @returns - Array of BaseTextures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._albedoTexture) {\r\n            activeTextures.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._baseWeightTexture) {\r\n            activeTextures.push(this._baseWeightTexture);\r\n        }\r\n\r\n        if (this._baseDiffuseRoughnessTexture) {\r\n            activeTextures.push(this._baseDiffuseRoughnessTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._reflectivityTexture) {\r\n            activeTextures.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._metallicTexture) {\r\n            activeTextures.push(this._metallicTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture) {\r\n            activeTextures.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture) {\r\n            activeTextures.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture) {\r\n            activeTextures.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._albedoTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._baseWeightTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._baseDiffuseRoughnessTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectivityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._microSurfaceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * It can't be sets when subsurface scattering of this material is disabled.\r\n     * When scene have ability to enable subsurface prepass effect, it will enable.\r\n     * @returns - If prepass is enabled or not.\r\n     */\r\n    public override setPrePassRenderer(): boolean {\r\n        if (!this.subSurface?.isScatteringEnabled) {\r\n            return false;\r\n        }\r\n\r\n        const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\r\n        if (subSurfaceConfiguration) {\r\n            subSurfaceConfiguration.enabled = true;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeEffect - Forces the disposal of effects.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        this._breakShaderLoadedCheck = true;\r\n        if (forceDisposeTextures) {\r\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\r\n                this._environmentBRDFTexture.dispose();\r\n            }\r\n\r\n            this._albedoTexture?.dispose();\r\n            this._baseWeightTexture?.dispose();\r\n            this._baseDiffuseRoughnessTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._metallicTexture?.dispose();\r\n            this._reflectivityTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._metallicReflectanceTexture?.dispose();\r\n            this._reflectanceTexture?.dispose();\r\n            this._microSurfaceTexture?.dispose();\r\n        }\r\n\r\n        this._renderTargets.dispose();\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n}\r\n", "import { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport { RegisterClass } from \"../../Misc/typeStore\";\r\nimport { Material } from \"../material\";\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\n/**\r\n * The Physically based material of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/features/featuresDeepDive/materials/using/introToPBR\r\n */\r\nexport class PBRMaterial extends PBRBaseMaterial {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static override readonly PBRMATERIAL_OPAQUE = PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static override readonly PBRMATERIAL_ALPHATEST = PBRBaseMaterial.PBRMATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static override readonly PBRMATERIAL_ALPHABLEND = PBRBaseMaterial.PBRMATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static override readonly PBRMATERIAL_ALPHATESTANDBLEND = PBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static override DEFAULT_AO_ON_ANALYTICAL_LIGHTS = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public albedoTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * OpenPBR Base Weight texture (multiplier to the diffuse and metal lobes).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public baseWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * OpenPBR Base Diffuse Roughness texture (roughness of the diffuse lobe).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public baseDiffuseRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTextureImpactOnAnalyticalLights: number = PBRMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture. Use luminance if texture.getAlphaFromRGB is true.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectivityTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallicTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallic: Nullable<number>;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: Nullable<number>;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 color.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0_from_IOR * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicF0Factor;\r\n     */\r\n    @serializeAsColor3()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Specifies that only the A channel from metallicReflectanceTexture should be used.\r\n     * If false, both RGB and A channels will be used\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If useOnlyMetallicFromMetallicReflectanceTexture is true, don't use the RGB channels, only A\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public metallicReflectanceTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines to store reflectanceColor in RGB\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If both reflectanceTexture and metallicReflectanceTexture textures are provided and useOnlyMetallicFromMetallicReflectanceTexture\r\n     * is false, metallicReflectanceTexture takes priority and reflectanceTexture is not used\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectanceTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public microSurfaceTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Stores the refracted light information in a texture.\r\n     */\r\n    public get refractionTexture(): Nullable<BaseTexture> {\r\n        return this.subSurface.refractionTexture;\r\n    }\r\n    public set refractionTexture(value: Nullable<BaseTexture>) {\r\n        this.subSurface.refractionTexture = value;\r\n        if (value) {\r\n            this.subSurface.isRefractionEnabled = true;\r\n        } else if (!this.subSurface.linkRefractionWithTransparency) {\r\n            this.subSurface.isRefractionEnabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     */\r\n    @serializeAsColor3(\"albedo\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * OpenPBR Base Weight (multiplier to the diffuse and metal lobes).\r\n     */\r\n    @serialize(\"baseWeight\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public baseWeight = 1;\r\n\r\n    /**\r\n     * OpenPBR Base Diffuse Roughness (roughness of the diffuse lobe).\r\n     */\r\n    @serialize(\"baseDiffuseRoughness\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public baseDiffuseRoughness: Nullable<number>;\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     */\r\n    @serializeAsColor3(\"reflectivity\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color reflected from the material.\r\n     */\r\n    @serializeAsColor3(\"reflection\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionColor = new Color3(1.0, 1.0, 1.0);\r\n\r\n    /**\r\n     * The color emitted from the material.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public microSurface = 1.0;\r\n\r\n    /**\r\n     * Index of refraction of the material base layer.\r\n     * https://en.wikipedia.org/wiki/List_of_refractive_indices\r\n     *\r\n     * This does not only impact refraction but also the Base F0 of Dielectric Materials.\r\n     *\r\n     * From dielectric fresnel rules: F0 = square((iorT - iorI) / (iorT + iorI))\r\n     */\r\n    public get indexOfRefraction(): number {\r\n        return this.subSurface.indexOfRefraction;\r\n    }\r\n    public set indexOfRefraction(value: number) {\r\n        this.subSurface.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Controls if refraction needs to be inverted on Y. This could be useful for procedural texture.\r\n     */\r\n    public get invertRefractionY(): boolean {\r\n        return this.subSurface.invertRefractionY;\r\n    }\r\n    public set invertRefractionY(value: boolean) {\r\n        this.subSurface.invertRefractionY = value;\r\n    }\r\n\r\n    /**\r\n     * This parameters will make the material used its opacity to control how much it is refracting against not.\r\n     * Materials half opaque for instance using refraction could benefit from this control.\r\n     */\r\n    public get linkRefractionWithTransparency(): boolean {\r\n        return this.subSurface.linkRefractionWithTransparency;\r\n    }\r\n    public set linkRefractionWithTransparency(value: boolean) {\r\n        this.subSurface.linkRefractionWithTransparency = value;\r\n        if (value) {\r\n            this.subSurface.isRefractionEnabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If true, the light map contains occlusion information instead of lighting info.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public forceAlphaTest = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     * Needs useRoughnessFromMetallicTextureAlpha to be false.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\r\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\r\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\r\n     */\r\n    @serialize()\r\n    public get usePhysicalLightFalloff(): boolean {\r\n        return this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n    }\r\n\r\n    /**\r\n     * BJS is using an hardcoded light falloff based on a manually sets up range.\r\n     * In PBR, one way to represents the falloff is to use the inverse squared root algorithm.\r\n     * This parameter can help you switch back to the BJS mode in order to create scenes using both materials.\r\n     */\r\n    public set usePhysicalLightFalloff(value: boolean) {\r\n        if (value !== this.usePhysicalLightFalloff) {\r\n            // Ensure the effect will be rebuilt.\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            if (value) {\r\n                this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n            } else {\r\n                this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_STANDARD;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * In order to support the falloff compatibility with gltf, a special mode has been added\r\n     * to reproduce the gltf light falloff.\r\n     */\r\n    @serialize()\r\n    public get useGLTFLightFalloff(): boolean {\r\n        return this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF;\r\n    }\r\n\r\n    /**\r\n     * In order to support the falloff compatibility with gltf, a special mode has been added\r\n     * to reproduce the gltf light falloff.\r\n     */\r\n    public set useGLTFLightFalloff(value: boolean) {\r\n        if (value !== this.useGLTFLightFalloff) {\r\n            // Ensure the effect will be rebuilt.\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            if (value) {\r\n                this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_GLTF;\r\n            } else {\r\n                this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_STANDARD;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting = false;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public forceIrradianceInFragment = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Let user defines the brdf lookup texture used for IBL.\r\n     * A default 8bit version is embedded but you could point at :\r\n     * * Default texture: https://assets.babylonjs.com/environments/correlatedMSBRDF_RGBD.png\r\n     * * Default 16bit pixel depth texture: https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\r\n     * * LEGACY Default None correlated https://assets.babylonjs.com/environments/uncorrelatedBRDF_RGBD.png\r\n     * * LEGACY Default None correlated 16bit pixel depth https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public unlit = false;\r\n\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public applyDecalMapAfterDetailMap = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Scene, forceGLSL = false) {\r\n        super(name, scene, forceGLSL);\r\n\r\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\r\n    }\r\n\r\n    /**\r\n     * @returns the name of this material class.\r\n     */\r\n    public override getClassName(): string {\r\n        return \"PBRMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name - name to use for the new material.\r\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns cloned material instance\r\n     */\r\n    public override clone(name: string, cloneTexturesOnlyOnce: boolean = true, rootUrl = \"\"): PBRMaterial {\r\n        const clone = SerializationHelper.Clone(() => new PBRMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\r\n\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        this.stencil.copyTo(clone.stencil);\r\n\r\n        this._clonePlugins(clone, rootUrl);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serializes this PBR Material.\r\n     * @returns - An object with the serialized material.\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = super.serialize();\r\n        serializationObject.customType = \"BABYLON.PBRMaterial\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Parses a PBR Material from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene - BJS scene instance.\r\n     * @param rootUrl - url for the scene object\r\n     * @returns - PBRMaterial\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): PBRMaterial {\r\n        const material = SerializationHelper.Parse(() => new PBRMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        Material._ParsePlugins(source, material, scene, rootUrl);\r\n\r\n        // The code block below ensures backward compatibility with serialized materials before plugins are automatically serialized.\r\n        if (source.clearCoat) {\r\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\r\n        }\r\n        if (source.anisotropy) {\r\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\r\n        }\r\n        if (source.brdf) {\r\n            material.brdf.parse(source.brdf, scene, rootUrl);\r\n        }\r\n        if (source.sheen) {\r\n            material.sheen.parse(source.sheen, scene, rootUrl);\r\n        }\r\n        if (source.subSurface) {\r\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\r\n        }\r\n        if (source.iridescence) {\r\n            material.iridescence.parse(source.iridescence, scene, rootUrl);\r\n        }\r\n\r\n        return material;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRMaterial\", PBRMaterial);\r\n"],
  "mappings": "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",
  "names": []
}
