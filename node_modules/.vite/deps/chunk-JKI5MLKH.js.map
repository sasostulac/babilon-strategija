{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.constants.ts", "../../../dev/core/src/Misc/arrayTools.ts"],
  "sourcesContent": ["/**\r\n * Constant used to convert a value to gamma space\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const ToGammaSpace = 1 / 2.2;\r\n\r\n/**\r\n * Constant used to convert a value to linear space\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const ToLinearSpace = 2.2;\r\n\r\n/**\r\n * Constant Golden Ratio value in Babylon.js\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const PHI = (1 + Math.sqrt(5)) / 2;\r\n\r\n/**\r\n * Constant used to define the minimal number value in Babylon.js\r\n * @ignorenaming\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const Epsilon = 0.001;\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport type { Nullable, Tuple } from \"../types\";\r\n\r\n/**\r\n * Returns an array of the given size filled with elements built from the given constructor and the parameters.\r\n * @param size the number of element to construct and put in the array.\r\n * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\r\n * @returns a new array filled with new objects.\r\n */\r\nexport function BuildArray<T>(size: number, itemBuilder: () => T): Array<T> {\r\n    const a: T[] = [];\r\n    for (let i = 0; i < size; ++i) {\r\n        a.push(itemBuilder());\r\n    }\r\n    return a;\r\n}\r\n\r\n/**\r\n * Returns a tuple of the given size filled with elements built from the given constructor and the parameters.\r\n * @param size he number of element to construct and put in the tuple.\r\n * @param itemBuilder a callback responsible for creating new instance of item. Called once per tuple entry.\r\n * @returns a new tuple filled with new objects.\r\n */\r\nexport function BuildTuple<T, N extends number>(size: N, itemBuilder: () => T): Tuple<T, N> {\r\n    return BuildArray(size, itemBuilder) as Tuple<T, N>;\r\n}\r\n\r\n/**\r\n * Defines the callback type used when an observed array function is triggered.\r\n * @internal\r\n */\r\nexport type _ObserveCallback = (functionName: string, previousLength: number) => void;\r\n\r\n/**\r\n * Observes a function and calls the given callback when it is called.\r\n * @param object Defines the object the function to observe belongs to.\r\n * @param functionName Defines the name of the function to observe.\r\n * @param callback Defines the callback to call when the function is called.\r\n * @returns A function to call to stop observing\r\n */\r\nfunction ObserveArrayFunction(object: { [key: string]: any }, functionName: string, callback: _ObserveCallback): Nullable<() => void> {\r\n    // Finds the function to observe\r\n    const oldFunction = object[functionName];\r\n    if (typeof oldFunction !== \"function\") {\r\n        return null;\r\n    }\r\n\r\n    // Creates a new function that calls the callback and the old function\r\n    const newFunction = function () {\r\n        const previousLength = object.length;\r\n        const returnValue = newFunction.previous.apply(object, arguments);\r\n        callback(functionName, previousLength);\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return returnValue;\r\n    } as any;\r\n\r\n    // Doublishly links the new function and the old function\r\n    oldFunction.next = newFunction;\r\n    newFunction.previous = oldFunction;\r\n\r\n    // Replaces the old function with the new function\r\n    object[functionName] = newFunction;\r\n\r\n    // Returns a function to disable the hook\r\n    return () => {\r\n        // Only unhook if the function is still hooked\r\n        const previous = newFunction.previous;\r\n        if (!previous) {\r\n            return;\r\n        }\r\n\r\n        // Finds the ref to the next function in the chain\r\n        const next = newFunction.next;\r\n\r\n        // If in the middle of the chain, link the previous and next functions\r\n        if (next) {\r\n            previous.next = next;\r\n            next.previous = previous;\r\n        }\r\n        // If at the end of the chain, remove the reference to the previous function\r\n        // and restore the previous function\r\n        else {\r\n            previous.next = undefined;\r\n            object[functionName] = previous;\r\n        }\r\n\r\n        // Lose reference to the previous and next functions\r\n        newFunction.next = undefined;\r\n        newFunction.previous = undefined;\r\n    };\r\n}\r\n\r\n/**\r\n * Defines the list of functions to proxy when observing an array.\r\n * The scope is currently reduced to the common functions used in the render target render list and the scene cameras.\r\n */\r\nconst observedArrayFunctions = [\"push\", \"splice\", \"pop\", \"shift\", \"unshift\"];\r\n\r\n/**\r\n * Observes an array and notifies the given observer when the array is modified.\r\n * @param array Defines the array to observe\r\n * @param callback Defines the function to call when the array is modified (in the limit of the observed array functions)\r\n * @returns A function to call to stop observing the array\r\n * @internal\r\n */\r\nexport function _ObserveArray<T>(array: T[], callback: _ObserveCallback) {\r\n    // Observes all the required array functions and stores the unhook functions\r\n    const unObserveFunctions = observedArrayFunctions.map((name) => {\r\n        return ObserveArrayFunction(array, name, callback);\r\n    });\r\n\r\n    // Returns a function that unhook all the observed functions\r\n    return () => {\r\n        for (const unObserveFunction of unObserveFunctions) {\r\n            unObserveFunction?.();\r\n        }\r\n    };\r\n}\r\n"],
  "mappings": ";AAIO,IAAM,eAAe,IAAI;AAMzB,IAAM,gBAAgB;AAMtB,IAAM,OAAO,IAAI,KAAK,KAAK,CAAC,KAAK;AAOjC,IAAM,UAAU;;;ACbjB,SAAU,WAAc,MAAc,aAAoB;AAC5D,QAAM,IAAS,CAAA;AACf,WAAS,IAAI,GAAG,IAAI,MAAM,EAAE,GAAG;AAC3B,MAAE,KAAK,YAAW,CAAE;EACxB;AACA,SAAO;AACX;AAQM,SAAU,WAAgC,MAAS,aAAoB;AACzE,SAAO,WAAW,MAAM,WAAW;AACvC;AAeA,SAAS,qBAAqB,QAAgC,cAAsB,UAA0B;AAE1G,QAAM,cAAc,OAAO,YAAY;AACvC,MAAI,OAAO,gBAAgB,YAAY;AACnC,WAAO;EACX;AAGA,QAAM,cAAc,WAAA;AAChB,UAAM,iBAAiB,OAAO;AAC9B,UAAM,cAAc,YAAY,SAAS,MAAM,QAAQ,SAAS;AAChE,aAAS,cAAc,cAAc;AAErC,WAAO;EACX;AAGA,cAAY,OAAO;AACnB,cAAY,WAAW;AAGvB,SAAO,YAAY,IAAI;AAGvB,SAAO,MAAK;AAER,UAAM,WAAW,YAAY;AAC7B,QAAI,CAAC,UAAU;AACX;IACJ;AAGA,UAAM,OAAO,YAAY;AAGzB,QAAI,MAAM;AACN,eAAS,OAAO;AAChB,WAAK,WAAW;IACpB,OAGK;AACD,eAAS,OAAO;AAChB,aAAO,YAAY,IAAI;IAC3B;AAGA,gBAAY,OAAO;AACnB,gBAAY,WAAW;EAC3B;AACJ;AAMA,IAAM,yBAAyB,CAAC,QAAQ,UAAU,OAAO,SAAS,SAAS;AASrE,SAAU,cAAiB,OAAY,UAA0B;AAEnE,QAAM,qBAAqB,uBAAuB,IAAI,CAAC,SAAQ;AAC3D,WAAO,qBAAqB,OAAO,MAAM,QAAQ;EACrD,CAAC;AAGD,SAAO,MAAK;AACR,eAAW,qBAAqB,oBAAoB;AAChD,0BAAmB;IACvB;EACJ;AACJ;",
  "names": []
}
