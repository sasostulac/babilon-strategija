{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/abstractAudio/abstractSoundSource.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../types\";\nimport { AudioNodeType } from \"./abstractAudioNode\";\nimport type { IAbstractAudioOutNodeOptions } from \"./abstractAudioOutNode\";\nimport { AbstractAudioOutNode } from \"./abstractAudioOutNode\";\nimport type { PrimaryAudioBus } from \"./audioBus\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\nimport type { AbstractSpatialAudio, ISpatialAudioOptions } from \"./subProperties/abstractSpatialAudio\";\nimport type { AbstractStereoAudio, IStereoAudioOptions } from \"./subProperties/abstractStereoAudio\";\n\n/**\n * Options for creating a sound source.\n */\nexport interface ISoundSourceOptions extends IAbstractAudioOutNodeOptions, ISpatialAudioOptions, IStereoAudioOptions {\n    /**\n     * The output bus for the sound source. Defaults to `null`.\n     * - If not set or `null`, and `outBusAutoDefault` is `true`, then the sound source is automatically connected to the audio engine's default main bus.\n     * @see {@link AudioEngineV2.defaultMainBus}\n     */\n    outBus: Nullable<PrimaryAudioBus>;\n\n    /**\n     * Whether the sound's `outBus` should default to the audio engine's main bus. Defaults to `true` for all sound sources except microphones.\n     */\n    outBusAutoDefault: boolean;\n}\n\n/**\n * Abstract class representing a sound in the audio engine.\n */\nexport abstract class AbstractSoundSource extends AbstractAudioOutNode {\n    private _outBus: Nullable<PrimaryAudioBus> = null;\n\n    protected constructor(name: string, engine: AudioEngineV2, nodeType: AudioNodeType = AudioNodeType.HAS_OUTPUTS) {\n        super(name, engine, nodeType);\n    }\n\n    /**\n     * The output bus for the sound.\n     * @see {@link AudioEngineV2.defaultMainBus}\n     */\n    public get outBus(): Nullable<PrimaryAudioBus> {\n        return this._outBus;\n    }\n\n    public set outBus(outBus: Nullable<PrimaryAudioBus>) {\n        if (this._outBus === outBus) {\n            return;\n        }\n\n        if (this._outBus) {\n            this._outBus.onDisposeObservable.removeCallback(this._onOutBusDisposed);\n            if (!this._disconnect(this._outBus)) {\n                throw new Error(\"Disconnect failed\");\n            }\n        }\n\n        this._outBus = outBus;\n\n        if (this._outBus) {\n            this._outBus.onDisposeObservable.add(this._onOutBusDisposed);\n            if (!this._connect(this._outBus)) {\n                throw new Error(\"Connect failed\");\n            }\n        }\n    }\n\n    /**\n     * The spatial features of the sound.\n     */\n    public abstract spatial: AbstractSpatialAudio;\n\n    /**\n     * The stereo features of the sound.\n     */\n    public abstract stereo: AbstractStereoAudio;\n\n    /**\n     * Releases associated resources.\n     */\n    public override dispose(): void {\n        super.dispose();\n\n        this._outBus = null;\n    }\n\n    private _onOutBusDisposed = () => {\n        this._outBus = null;\n    };\n}\n"],
  "mappings": ";;;;;AA6BM,IAAgB,sBAAhB,cAA4C,qBAAoB;EAGlE,YAAsB,MAAc,QAAuB,WAAA,GAAmD;AAC1G,UAAM,MAAM,QAAQ,QAAQ;AAHxB,SAAA,UAAqC;AAuDrC,SAAA,oBAAoB,MAAK;AAC7B,WAAK,UAAU;IACnB;EArDA;;;;;EAMA,IAAW,SAAM;AACb,WAAO,KAAK;EAChB;EAEA,IAAW,OAAO,QAAiC;AAC/C,QAAI,KAAK,YAAY,QAAQ;AACzB;IACJ;AAEA,QAAI,KAAK,SAAS;AACd,WAAK,QAAQ,oBAAoB,eAAe,KAAK,iBAAiB;AACtE,UAAI,CAAC,KAAK,YAAY,KAAK,OAAO,GAAG;AACjC,cAAM,IAAI,MAAM,mBAAmB;MACvC;IACJ;AAEA,SAAK,UAAU;AAEf,QAAI,KAAK,SAAS;AACd,WAAK,QAAQ,oBAAoB,IAAI,KAAK,iBAAiB;AAC3D,UAAI,CAAC,KAAK,SAAS,KAAK,OAAO,GAAG;AAC9B,cAAM,IAAI,MAAM,gBAAgB;MACpC;IACJ;EACJ;;;;EAegB,UAAO;AACnB,UAAM,QAAO;AAEb,SAAK,UAAU;EACnB;;",
  "names": []
}
