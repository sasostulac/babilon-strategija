{
  "version": 3,
  "sources": ["../../../dev/loaders/src/glTF/2.0/pbrMaterialLoadingAdapter.ts"],
  "sourcesContent": ["import type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { IMaterialLoadingAdapter } from \"./materialLoadingAdapter\";\r\n\r\n/**\r\n * Material Loading Adapter for PBR materials that provides a unified OpenPBR-like interface.\r\n */\r\nexport class PBRMaterialLoadingAdapter implements IMaterialLoadingAdapter {\r\n    private _material: PBRMaterial;\r\n\r\n    /**\r\n     * Creates a new instance of the PBRMaterialLoadingAdapter.\r\n     * @param material - The PBR material to adapt.\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material as PBRMaterial;\r\n        this._material.enableSpecularAntiAliasing = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying material\r\n     */\r\n    public get material(): PBRMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Whether the material should be treated as unlit\r\n     */\r\n    public get isUnlit(): boolean {\r\n        return this._material.unlit;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the material should be treated as unlit\r\n     */\r\n    public set isUnlit(value: boolean) {\r\n        this._material.unlit = value;\r\n    }\r\n\r\n    // ========================================\r\n    // CULLING PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets whether back face culling is enabled.\r\n     * @param value True to enable back face culling\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        this._material.backFaceCulling = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether back face culling is enabled.\r\n     * @returns True if back face culling is enabled\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._material.backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Sets whether two-sided lighting is enabled.\r\n     * @param value True to enable two-sided lighting\r\n     */\r\n    public set twoSidedLighting(value: boolean) {\r\n        this._material.twoSidedLighting = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether two-sided lighting is enabled.\r\n     * @returns True if two-sided lighting is enabled\r\n     */\r\n    public get twoSidedLighting(): boolean {\r\n        return this._material.twoSidedLighting;\r\n    }\r\n\r\n    // ========================================\r\n    // ALPHA PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the alpha cutoff value for alpha testing.\r\n     * @param value The alpha cutoff threshold (0-1)\r\n     */\r\n    public set alphaCutOff(value: number) {\r\n        this._material.alphaCutOff = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha cutoff value.\r\n     * @returns The alpha cutoff threshold (0-1)\r\n     */\r\n    public get alphaCutOff(): number {\r\n        return this._material.alphaCutOff;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use alpha from the albedo texture.\r\n     * @param value True to use alpha from albedo texture\r\n     */\r\n    public set useAlphaFromBaseColorTexture(value: boolean) {\r\n        this._material.useAlphaFromAlbedoTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether alpha is used from the albedo texture.\r\n     * @returns True if using alpha from albedo texture\r\n     */\r\n    public get useAlphaFromBaseColorTexture(): boolean {\r\n        return this._material.useAlphaFromAlbedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the transparency is treated as alpha coverage.\r\n     */\r\n    public get transparencyAsAlphaCoverage(): boolean {\r\n        return this._material.useRadianceOverAlpha || this._material.useSpecularOverAlpha;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets whether the transparency is treated as alpha coverage\r\n     */\r\n    public set transparencyAsAlphaCoverage(value: boolean) {\r\n        this._material.useRadianceOverAlpha = !value;\r\n        this._material.useSpecularOverAlpha = !value;\r\n    }\r\n\r\n    // ========================================\r\n    // BASE PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the base color of the material (mapped to PBR albedoColor).\r\n     * @param value The base color as a Color3\r\n     */\r\n    public set baseColor(value: Color3) {\r\n        this._material.albedoColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base color of the material.\r\n     * @returns The base color as a Color3\r\n     */\r\n    public get baseColor(): Color3 {\r\n        return this._material.albedoColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the base color texture of the material (mapped to PBR albedoTexture).\r\n     * @param value The base color texture or null\r\n     */\r\n    public set baseColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.albedoTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base color texture of the material.\r\n     * @returns The base color texture or null\r\n     */\r\n    public get baseColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the base diffuse roughness of the material.\r\n     * @param value The diffuse roughness value (0-1)\r\n     */\r\n    public set baseDiffuseRoughness(value: number) {\r\n        this._material.baseDiffuseRoughness = value;\r\n        if (value > 0) {\r\n            this._material.brdf.baseDiffuseModel = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the base diffuse roughness of the material.\r\n     * @returns The diffuse roughness value (0-1), defaults to 0 if not set\r\n     */\r\n    public get baseDiffuseRoughness(): number {\r\n        return this._material.baseDiffuseRoughness ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the base diffuse roughness texture of the material.\r\n     * @param value The diffuse roughness texture or null\r\n     */\r\n    public set baseDiffuseRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.baseDiffuseRoughnessTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base diffuse roughness texture of the material.\r\n     * @returns The diffuse roughness texture or null\r\n     */\r\n    public get baseDiffuseRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.baseDiffuseRoughnessTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the base metalness value of the material (mapped to PBR metallic).\r\n     * @param value The metalness value (0-1)\r\n     */\r\n    public set baseMetalness(value: number) {\r\n        this._material.metallic = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base metalness value of the material.\r\n     * @returns The metalness value (0-1), defaults to 1 if not set\r\n     */\r\n    public get baseMetalness(): number {\r\n        return this._material.metallic ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the base metalness texture of the material (mapped to PBR metallicTexture).\r\n     * @param value The metalness texture or null\r\n     */\r\n    public set baseMetalnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.metallicTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base metalness texture of the material.\r\n     * @returns The metalness texture or null\r\n     */\r\n    public get baseMetalnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use roughness from the metallic texture's green channel.\r\n     * Also disables using roughness from the alpha channel when enabled.\r\n     * @param value True to use green channel for roughness\r\n     */\r\n    public set useRoughnessFromMetallicTextureGreen(value: boolean) {\r\n        this._material.useRoughnessFromMetallicTextureGreen = value;\r\n        this._material.useRoughnessFromMetallicTextureAlpha = !value;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use metalness from the metallic texture's blue channel.\r\n     * @param value True to use blue channel for metalness\r\n     */\r\n    public set useMetallicFromMetallicTextureBlue(value: boolean) {\r\n        this._material.useMetallnessFromMetallicTextureBlue = value;\r\n    }\r\n\r\n    // ========================================\r\n    // SPECULAR PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures specular properties and optionally enables OpenPBR BRDF model for edge color support.\r\n     * @param enableEdgeColor Whether to enable OpenPBR BRDF models for edge color support\r\n     */\r\n    public enableSpecularEdgeColor(enableEdgeColor: boolean = false): void {\r\n        if (enableEdgeColor) {\r\n            this._material.brdf.dielectricSpecularModel = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\r\n            this._material.brdf.conductorSpecularModel = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the specular weight (mapped to PBR metallicF0Factor).\r\n     * @param value The specular weight value\r\n     */\r\n    public set specularWeight(value: number) {\r\n        this._material.metallicF0Factor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular weight.\r\n     * @returns The specular weight value, defaults to 1 if not set\r\n     */\r\n    public get specularWeight(): number {\r\n        return this._material.metallicF0Factor ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular weight texture (mapped to PBR metallicReflectanceTexture).\r\n     * Configures the material to use only metalness from this texture when set.\r\n     * @param value The specular weight texture or null\r\n     */\r\n    public set specularWeightTexture(value: Nullable<BaseTexture>) {\r\n        if (value) {\r\n            this._material.metallicReflectanceTexture = value;\r\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n        } else {\r\n            this._material.metallicReflectanceTexture = null;\r\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the specular weight texture.\r\n     * @returns The specular weight texture or null\r\n     */\r\n    public get specularWeightTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicReflectanceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular color (mapped to PBR metallicReflectanceColor).\r\n     * @param value The specular color as a Color3\r\n     */\r\n    public set specularColor(value: Color3) {\r\n        this._material.metallicReflectanceColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular color.\r\n     * @returns The specular color as a Color3\r\n     */\r\n    public get specularColor(): Color3 {\r\n        return this._material.metallicReflectanceColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular color texture (mapped to PBR reflectanceTexture).\r\n     * @param value The specular color texture or null\r\n     */\r\n    public set specularColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.reflectanceTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular color texture.\r\n     * @returns The specular color texture or null\r\n     */\r\n    public get specularColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.reflectanceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular roughness (mapped to PBR roughness).\r\n     * @param value The roughness value (0-1)\r\n     */\r\n    public set specularRoughness(value: number) {\r\n        this._material.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness.\r\n     * @returns The roughness value (0-1), defaults to 1 if not set\r\n     */\r\n    public get specularRoughness(): number {\r\n        return this._material.roughness ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular roughness texture.\r\n     * Note: PBR uses the same texture for both metallic and roughness,\r\n     * so this only sets the texture if no base metalness texture exists.\r\n     * @param value The roughness texture or null\r\n     */\r\n    public set specularRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        // PBR uses the same texture for both metallic and roughness\r\n        if (!this.baseMetalnessTexture) {\r\n            this._material.metallicTexture = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness texture.\r\n     * @returns The roughness texture (same as metallic texture for PBR) or null\r\n     */\r\n    public get specularRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular index of refraction (mapped to PBR indexOfRefraction).\r\n     * @param value The IOR value\r\n     */\r\n    public set specularIor(value: number) {\r\n        this._material.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular index of refraction.\r\n     * @returns The IOR value\r\n     */\r\n    public get specularIor(): number {\r\n        return this._material.indexOfRefraction;\r\n    }\r\n\r\n    // ========================================\r\n    // EMISSION PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the emission color (mapped to PBR emissiveColor).\r\n     * @param value The emission color as a Color3\r\n     */\r\n    public set emissionColor(value: Color3) {\r\n        this._material.emissiveColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission color.\r\n     * @returns The emission color as a Color3\r\n     */\r\n    public get emissionColor(): Color3 {\r\n        return this._material.emissiveColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the emission luminance/intensity (mapped to PBR emissiveIntensity).\r\n     * @param value The emission intensity value\r\n     */\r\n    public set emissionLuminance(value: number) {\r\n        this._material.emissiveIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission luminance/intensity.\r\n     * @returns The emission intensity value\r\n     */\r\n    public get emissionLuminance(): number {\r\n        return this._material.emissiveIntensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the emission color texture (mapped to PBR emissiveTexture).\r\n     * @param value The emission texture or null\r\n     */\r\n    public set emissionColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.emissiveTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission color texture.\r\n     * @returns The emission texture or null\r\n     */\r\n    public get emissionColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.emissiveTexture;\r\n    }\r\n\r\n    // ========================================\r\n    // AMBIENT OCCLUSION\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the ambient occlusion texture (mapped to PBR ambientTexture).\r\n     * Automatically enables grayscale mode when set.\r\n     * @param value The ambient occlusion texture or null\r\n     */\r\n    public set ambientOcclusionTexture(value: Nullable<BaseTexture>) {\r\n        this._material.ambientTexture = value;\r\n        if (value) {\r\n            this._material.useAmbientInGrayScale = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion texture.\r\n     * @returns The ambient occlusion texture or null\r\n     */\r\n    public get ambientOcclusionTexture(): Nullable<BaseTexture> {\r\n        return this._material.ambientTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the ambient occlusion texture strength.\r\n     * @param value The strength value (typically 0-1)\r\n     */\r\n    public set ambientOcclusionTextureStrength(value: number) {\r\n        this._material.ambientTextureStrength = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion texture strength.\r\n     * @returns The strength value, defaults to 1.0 if not set\r\n     */\r\n    public get ambientOcclusionTextureStrength(): number {\r\n        return this._material.ambientTextureStrength ?? 1.0;\r\n    }\r\n\r\n    // ========================================\r\n    // COAT PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures clear coat for PBR material.\r\n     * Enables clear coat and sets up proper configuration.\r\n     */\r\n    public configureCoat(): void {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\r\n        this._material.clearCoat.remapF0OnInterfaceChange = false;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat weight (mapped to PBR clearCoat.intensity).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat weight value (0-1)\r\n     */\r\n    public set coatWeight(value: number) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat weight.\r\n     * @returns The coat weight value\r\n     */\r\n    public get coatWeight(): number {\r\n        return this._material.clearCoat.intensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat weight texture (mapped to PBR clearCoat.texture).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat weight texture or null\r\n     */\r\n    public set coatWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat weight texture.\r\n     * @returns The coat weight texture or null\r\n     */\r\n    public get coatWeightTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.texture;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat color (mapped to PBR clearCoat.tintColor).\r\n     * @param value The coat tint color as a Color3\r\n     */\r\n    public set coatColor(value: Color3) {\r\n        this._material.clearCoat.isTintEnabled = value != Color3.White();\r\n        this._material.clearCoat.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat color texture (mapped to PBR clearCoat.tintTexture).\r\n     * @param value The coat color texture or null\r\n     */\r\n    public set coatColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.tintTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness (mapped to PBR clearCoat.roughness).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat roughness value (0-1)\r\n     */\r\n    public set coatRoughness(value: number) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness.\r\n     * @returns The coat roughness value, defaults to 0 if not set\r\n     */\r\n    public get coatRoughness(): number {\r\n        return this._material.clearCoat.roughness ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness texture (mapped to PBR clearCoat.textureRoughness).\r\n     * Automatically enables clear coat and disables using roughness from main texture.\r\n     * @param value The coat roughness texture or null\r\n     */\r\n    public set coatRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\r\n        this._material.clearCoat.textureRoughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness texture.\r\n     * @returns The coat roughness texture or null\r\n     */\r\n    public get coatRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.textureRoughness;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat index of refraction (IOR).\r\n     */\r\n    public set coatIor(value: number) {\r\n        this._material.clearCoat.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat darkening value.\r\n     * Note: PBR doesn't have a direct coat darkening property, so this is a no-op.\r\n     * @param value The coat darkening value (ignored for PBR)\r\n     */\r\n    public set coatDarkening(value: number) {\r\n        // PBR doesn't have a coat darkening property\r\n    }\r\n\r\n    /**\r\n     * Sets the coat darkening texture\r\n     * @param value The coat darkening texture or null\r\n     */\r\n    public set coatDarkeningTexture(value: Nullable<BaseTexture>) {\r\n        // PBR doesn't have a coat darkening property\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\r\n     * @param value The coat anisotropy intensity value (currently ignored)\r\n     */\r\n    public set coatRoughnessAnisotropy(value: number) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropy = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this returns 0.\r\n     * @returns Currently returns 0 as clearCoat anisotropy is not yet available\r\n     */\r\n    public get coatRoughnessAnisotropy(): number {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // return this._material.clearCoat.anisotropy ?? 0;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat tangent angle for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\r\n     * @param value The coat anisotropy rotation angle in radians (currently ignored)\r\n     */\r\n    public set geometryCoatTangentAngle(value: number) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropyAngle = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat tangent texture for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this is a placeholder.\r\n     * @param value The coat anisotropy texture (currently ignored)\r\n     */\r\n    public set geometryCoatTangentTexture(value: Nullable<BaseTexture>) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropyTangentTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat tangent texture for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this returns null.\r\n     * @returns Currently returns null as clearCoat anisotropy is not yet available\r\n     */\r\n    public get geometryCoatTangentTexture(): Nullable<BaseTexture> {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // return this._material.clearCoat.anisotropyTangentTexture;\r\n        return null;\r\n    }\r\n\r\n    // ========================================\r\n    // TRANSMISSION LAYER\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the transmission weight (mapped to PBR subSurface.refractionIntensity).\r\n     * Enables refraction when value \\> 0.\r\n     * @param value The transmission weight value (0-1)\r\n     */\r\n    public set transmissionWeight(value: number) {\r\n        this._material.subSurface.isRefractionEnabled = value > 0;\r\n        this._material.subSurface.refractionIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transmission weight.\r\n     * @returns The transmission weight value\r\n     */\r\n    public get transmissionWeight(): number {\r\n        return this._material.subSurface.refractionIntensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the transmission weight texture (mapped to PBR subSurface.refractionIntensityTexture).\r\n     * Automatically enables refraction and glTF-style textures.\r\n     * @param value The transmission weight texture or null\r\n     */\r\n    public set transmissionWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.isRefractionEnabled = true;\r\n        this._material.subSurface.refractionIntensityTexture = value;\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the attenuation distance for volume scattering.\r\n     * @param value The attenuation distance value\r\n     */\r\n    public set transmissionDepth(value: number) {\r\n        this._material.subSurface.tintColorAtDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the attenuation color (mapped to PBR subSurface.tintColor).\r\n     * @param value The attenuation color as a Color3\r\n     */\r\n    public set transmissionColor(value: Color3) {\r\n        this._material.subSurface.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transmission dispersion Abbe number.\r\n     * @param value The Abbe number value\r\n     */\r\n    public set transmissionDispersionAbbeNumber(value: number) {\r\n        if (value > 0) {\r\n            this._material.subSurface.isDispersionEnabled = true;\r\n            this._material.subSurface.dispersion = 20.0 / value;\r\n        } else {\r\n            this._material.subSurface.isDispersionEnabled = false;\r\n            this._material.subSurface.dispersion = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configures transmission for thin-surface transmission (KHR_materials_transmission).\r\n     * Sets up the material for proper thin-surface transmission behavior.\r\n     */\r\n    public configureTransmission(): void {\r\n        // Since this extension models thin-surface transmission only, we must make IOR = 1.0\r\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\r\n        // Albedo colour will tint transmission.\r\n        this._material.subSurface.useAlbedoToTintRefraction = true;\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = 0.0;\r\n    }\r\n\r\n    // ========================================\r\n    // VOLUME PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the thickness texture (mapped to PBR subSurface.thicknessTexture).\r\n     * Automatically enables refraction.\r\n     * @param value The thickness texture or null\r\n     */\r\n    public set volumeThicknessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.thicknessTexture = value;\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the thickness factor (mapped to PBR subSurface.maximumThickness).\r\n     * Automatically enables refraction.\r\n     * @param value The thickness value\r\n     */\r\n    public set volumeThickness(value: number) {\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = value;\r\n        this._material.subSurface.useThicknessAsDepth = true;\r\n        if (value > 0) {\r\n            this._material.subSurface.volumeIndexOfRefraction = this._material.indexOfRefraction;\r\n        }\r\n    }\r\n\r\n    // ========================================\r\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures subsurface properties for PBR material\r\n     */\r\n    public configureSubsurface(): void {\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n\r\n        // Since this extension models thin-surface transmission only, we must make the\r\n        // internal IOR == 1.0 and set the thickness to 0.\r\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = 0.0;\r\n\r\n        // Tint color will be used for transmission.\r\n        this._material.subSurface.useAlbedoToTintTranslucency = false;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface weight\r\n     */\r\n    public set subsurfaceWeight(value: number) {\r\n        this._material.subSurface.isTranslucencyEnabled = value > 0;\r\n        this._material.subSurface.translucencyIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the subsurface weight\r\n     * @returns The subsurface weight value\r\n     */\r\n    public get subsurfaceWeight(): number {\r\n        return this._material.subSurface.isTranslucencyEnabled ? this._material.subSurface.translucencyIntensity : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface weight texture\r\n     */\r\n    public set subsurfaceWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.translucencyIntensityTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface color.\r\n     * @param value The subsurface tint color as a Color3\r\n     */\r\n    public set subsurfaceColor(value: Color3) {\r\n        this._material.subSurface.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface color texture.\r\n     * @param value The subsurface tint texture or null\r\n     */\r\n    public set subsurfaceColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.translucencyColorTexture = value;\r\n    }\r\n\r\n    // ========================================\r\n    // FUZZ LAYER (Sheen)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures sheen for PBR material.\r\n     * Enables sheen and sets up proper configuration.\r\n     */\r\n    public configureFuzz(): void {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.useRoughnessFromMainTexture = false;\r\n        this._material.sheen.albedoScaling = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen weight (mapped to PBR sheen.intensity).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen weight value\r\n     */\r\n    public set fuzzWeight(value: number) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen color (mapped to PBR sheen.color).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen color as a Color3\r\n     */\r\n    public set fuzzColor(value: Color3) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.color = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen color texture (mapped to PBR sheen.texture).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen color texture or null\r\n     */\r\n    public set fuzzColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen roughness (mapped to PBR sheen.roughness).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen roughness value (0-1)\r\n     */\r\n    public set fuzzRoughness(value: number) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen roughness texture (mapped to PBR sheen.textureRoughness).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen roughness texture or null\r\n     */\r\n    public set fuzzRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.textureRoughness = value;\r\n    }\r\n\r\n    // ========================================\r\n    // ANISOTROPY\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the specular roughness anisotropy (mapped to PBR anisotropy.intensity).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy intensity value\r\n     */\r\n    public set specularRoughnessAnisotropy(value: number) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness anisotropy.\r\n     * @returns The anisotropy intensity value\r\n     */\r\n    public get specularRoughnessAnisotropy(): number {\r\n        return this._material.anisotropy.intensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the anisotropy rotation (mapped to PBR anisotropy.angle).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy rotation angle in radians\r\n     */\r\n    public set geometryTangentAngle(value: number) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.angle = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry tangent texture (mapped to PBR anisotropy.texture).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy texture or null\r\n     */\r\n    public set geometryTangentTexture(value: Nullable<BaseTexture>) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry tangent texture.\r\n     * @returns The anisotropy texture or null\r\n     */\r\n    public get geometryTangentTexture(): Nullable<BaseTexture> {\r\n        return this._material.anisotropy.texture;\r\n    }\r\n\r\n    /**\r\n     * Configures glTF-style anisotropy for the material.\r\n     * Note: PBR materials don't need this configuration, so this is a no-op.\r\n     * @param useGltfStyle Whether to use glTF-style anisotropy (ignored for PBR)\r\n     */\r\n    public configureGltfStyleAnisotropy(useGltfStyle: boolean = true): void {\r\n        // PBR materials don't need this configuration\r\n    }\r\n\r\n    // ========================================\r\n    // THIN FILM IRIDESCENCE\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the iridescence weight (mapped to PBR iridescence.intensity).\r\n     * Automatically enables iridescence.\r\n     * @param value The iridescence intensity value\r\n     */\r\n    public set thinFilmWeight(value: number) {\r\n        this._material.iridescence.isEnabled = value > 0;\r\n        this._material.iridescence.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence IOR (mapped to PBR iridescence.indexOfRefraction).\r\n     * @param value The iridescence IOR value\r\n     */\r\n    public set thinFilmIor(value: number) {\r\n        this._material.iridescence.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness minimum (mapped to PBR iridescence.minimumThickness).\r\n     * @param value The minimum thickness value in nanometers\r\n     */\r\n    public set thinFilmThicknessMinimum(value: number) {\r\n        this._material.iridescence.minimumThickness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness maximum (mapped to PBR iridescence.maximumThickness).\r\n     * @param value The maximum thickness value in nanometers\r\n     */\r\n    public set thinFilmThicknessMaximum(value: number) {\r\n        this._material.iridescence.maximumThickness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the thin film weight texture (mapped to PBR iridescence.texture).\r\n     * @param value The thin film weight texture or null\r\n     */\r\n    public set thinFilmWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.iridescence.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness texture (mapped to PBR iridescence.thicknessTexture).\r\n     * @param value The iridescence thickness texture or null\r\n     */\r\n    public set thinFilmThicknessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.iridescence.thicknessTexture = value;\r\n    }\r\n\r\n    // ========================================\r\n    // DISPERSION\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the transmission dispersion value.\r\n     * Note: PBR doesn't have direct dispersion support, so this stores it as metadata.\r\n     * @param value The dispersion value (stored as metadata)\r\n     */\r\n    public set transmissionDispersion(value: number) {\r\n        // PBR doesn't have a direct dispersion property, this would need custom shader modification\r\n        // For now, we'll store it as metadata\r\n        (this._material as any)._dispersion = value;\r\n    }\r\n\r\n    // ========================================\r\n    // UNLIT MATERIALS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets whether the material is unlit.\r\n     * @param value True to make the material unlit\r\n     */\r\n    public set unlit(value: boolean) {\r\n        this._material.unlit = value;\r\n    }\r\n\r\n    // ========================================\r\n    // GEOMETRY PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the geometry opacity (mapped to PBR alpha).\r\n     * @param value The opacity value (0-1)\r\n     */\r\n    public set geometryOpacity(value: number) {\r\n        this._material.alpha = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry opacity.\r\n     * @returns The opacity value (0-1)\r\n     */\r\n    public get geometryOpacity(): number {\r\n        return this._material.alpha;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry normal texture (mapped to PBR bumpTexture).\r\n     * Also forces irradiance computation in fragment shader for better lighting.\r\n     * @param value The normal texture or null\r\n     */\r\n    public set geometryNormalTexture(value: Nullable<BaseTexture>) {\r\n        this._material.bumpTexture = value;\r\n        this._material.forceIrradianceInFragment = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry normal texture.\r\n     * @returns The normal texture or null\r\n     */\r\n    public get geometryNormalTexture(): Nullable<BaseTexture> {\r\n        return this._material.bumpTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the normal map inversions for the material.\r\n     * @param invertX Whether to invert the normal map on the X axis\r\n     * @param invertY Whether to invert the normal map on the Y axis\r\n     */\r\n    public setNormalMapInversions(invertX: boolean, invertY: boolean): void {\r\n        this._material.invertNormalMapX = invertX;\r\n        this._material.invertNormalMapY = invertY;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry coat normal texture (mapped to PBR clearCoat.bumpTexture).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat normal texture or null\r\n     */\r\n    public set geometryCoatNormalTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.bumpTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry coat normal texture.\r\n     * @returns The coat normal texture or null\r\n     */\r\n    public get geometryCoatNormalTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.bumpTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry coat normal texture scale.\r\n     * @param value The scale value for the coat normal texture\r\n     */\r\n    public set geometryCoatNormalTextureScale(value: number) {\r\n        if (this._material.clearCoat.bumpTexture) {\r\n            this._material.clearCoat.bumpTexture.level = value;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
