import {
  Quaternion,
  Vector3
} from "./chunk-EURVBQY7.js";
import {
  PrecisionDate
} from "./chunk-AZNEH5GV.js";

// node_modules/@babylonjs/core/AudioV2/webAudio/components/spatialWebAudioUpdaterComponent.js
var _SpatialWebAudioUpdaterComponent = class {
  /** @internal */
  constructor(parent, autoUpdate, minUpdateTime) {
    this._autoUpdate = true;
    this._lastUpdateTime = 0;
    this.minUpdateTime = 0;
    if (!autoUpdate) {
      return;
    }
    this.minUpdateTime = minUpdateTime;
    const update = () => {
      if (!this._autoUpdate) {
        return;
      }
      let skipUpdate = false;
      if (0 < this.minUpdateTime) {
        const now = PrecisionDate.Now;
        if (this._lastUpdateTime && now - this._lastUpdateTime < this.minUpdateTime) {
          skipUpdate = true;
        }
        this._lastUpdateTime = now;
      }
      if (!skipUpdate) {
        parent.update();
      }
      requestAnimationFrame(update);
    };
    requestAnimationFrame(update);
  }
  /** @internal */
  dispose() {
    this._autoUpdate = false;
  }
};

// node_modules/@babylonjs/core/AudioV2/abstractAudio/components/spatialAudioAttacherComponent.js
var _SpatialAudioAttacherComponent = class {
  /** @internal */
  constructor(spatialAudioNode) {
    this._attachmentType = 3;
    this._position = new Vector3();
    this._rotationQuaternion = new Quaternion();
    this._sceneNode = null;
    this._useBoundingBox = false;
    this.dispose = () => {
      this.detach();
    };
    this._spatialAudioNode = spatialAudioNode;
  }
  /**
   * Returns `true` if attached to a scene node; otherwise returns `false`.
   */
  get isAttached() {
    return this._sceneNode !== null;
  }
  /**
   * Attaches to a scene node.
   *
   * Detaches automatically before attaching to the given scene node.
   * If `sceneNode` is `null` it is the same as calling `detach()`.
   *
   * @param sceneNode The scene node to attach to, or `null` to detach.
   * @param useBoundingBox Whether to use the scene node's bounding box for positioning. Defaults to `false`.
   * @param attachmentType Whether to attach to the scene node's position and/or rotation. Defaults to `PositionAndRotation`.
   */
  attach(sceneNode, useBoundingBox, attachmentType) {
    if (this._sceneNode === sceneNode) {
      return;
    }
    this.detach();
    if (!sceneNode) {
      return;
    }
    this._attachmentType = attachmentType;
    this._sceneNode = sceneNode;
    this._sceneNode.onDisposeObservable.add(this.dispose);
    this._useBoundingBox = useBoundingBox;
  }
  /**
   * Detaches from the scene node if attached.
   */
  detach() {
    this._sceneNode?.onDisposeObservable.removeCallback(this.dispose);
    this._sceneNode = null;
  }
  /**
   * Updates the position and rotation of the associated audio engine object in the audio rendering graph.
   *
   * This is called automatically by default and only needs to be called manually if automatic updates are disabled.
   */
  update() {
    if (this._attachmentType & 1) {
      if (this._useBoundingBox && this._sceneNode.getBoundingInfo) {
        this._position.copyFrom(this._sceneNode.getBoundingInfo().boundingBox.centerWorld);
      } else {
        this._sceneNode?.getWorldMatrix().getTranslationToRef(this._position);
      }
      this._spatialAudioNode.position.copyFrom(this._position);
      this._spatialAudioNode._updatePosition();
    }
    if (this._attachmentType & 2) {
      this._sceneNode?.getWorldMatrix().decompose(void 0, this._rotationQuaternion);
      this._spatialAudioNode.rotationQuaternion.copyFrom(this._rotationQuaternion);
      this._spatialAudioNode._updateRotation();
    }
  }
};

export {
  _SpatialAudioAttacherComponent,
  _SpatialWebAudioUpdaterComponent
};
//# sourceMappingURL=chunk-SFME7HOG.js.map
