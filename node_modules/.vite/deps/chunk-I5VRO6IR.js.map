{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/rgbdTextureTools.ts"],
  "sourcesContent": ["import { Constants } from \"../Engines/constants\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\n\r\nimport { ApplyPostProcess } from \"./textureTools\";\r\n\r\nimport type { Texture } from \"../Materials/Textures/texture\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * Class used to host RGBD texture specific utilities\r\n */\r\nexport class RGBDTextureTools {\r\n    /**\r\n     * Expand the RGBD Texture from RGBD to Half Float if possible.\r\n     * @param texture the texture to expand.\r\n     */\r\n    public static ExpandRGBDTexture(texture: Texture) {\r\n        const internalTexture = texture._texture;\r\n        if (!internalTexture || !texture.isRGBD) {\r\n            return;\r\n        }\r\n\r\n        // Gets everything ready.\r\n        const engine = internalTexture.getEngine();\r\n        const caps = engine.getCaps();\r\n        const isReady = internalTexture.isReady;\r\n        let expandTexture = false;\r\n\r\n        // If half float available we can uncompress the texture\r\n        if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            internalTexture.type = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        }\r\n        // If full float available we can uncompress the texture\r\n        else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n            expandTexture = true;\r\n            internalTexture.type = Constants.TEXTURETYPE_FLOAT;\r\n        }\r\n\r\n        if (expandTexture) {\r\n            // Do not use during decode.\r\n            internalTexture.isReady = false;\r\n            internalTexture._isRGBD = false;\r\n            internalTexture.invertY = false;\r\n        }\r\n\r\n        const expandRgbdTextureAsync = async () => {\r\n            const isWebGpu = engine.isWebGPU;\r\n            const shaderLanguage = isWebGpu ? ShaderLanguage.WGSL : ShaderLanguage.GLSL;\r\n            internalTexture.isReady = false;\r\n\r\n            if (isWebGpu) {\r\n                await import(\"../ShadersWGSL/rgbdDecode.fragment\");\r\n            } else {\r\n                await import(\"../Shaders/rgbdDecode.fragment\");\r\n            }\r\n\r\n            // Expand the texture if possible\r\n            // Simply run through the decode PP.\r\n            const rgbdPostProcess = new PostProcess(\r\n                \"rgbdDecode\",\r\n                \"rgbdDecode\",\r\n                null,\r\n                null,\r\n                1,\r\n                null,\r\n                Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                undefined,\r\n                internalTexture.type,\r\n                undefined,\r\n                null,\r\n                false,\r\n                undefined,\r\n                shaderLanguage\r\n            );\r\n            rgbdPostProcess.externalTextureSamplerBinding = true;\r\n\r\n            // Hold the output of the decoding.\r\n            const expandedTexture = engine.createRenderTargetTexture(internalTexture.width, {\r\n                generateDepthBuffer: false,\r\n                generateMipMaps: false,\r\n                generateStencilBuffer: false,\r\n                samplingMode: internalTexture.samplingMode,\r\n                type: internalTexture.type,\r\n                format: Constants.TEXTUREFORMAT_RGBA,\r\n            });\r\n\r\n            rgbdPostProcess.onEffectCreatedObservable.addOnce((e) => {\r\n                e.executeWhenCompiled(() => {\r\n                    // PP Render Pass\r\n                    rgbdPostProcess.onApply = (effect) => {\r\n                        effect._bindTexture(\"textureSampler\", internalTexture);\r\n                        effect.setFloat2(\"scale\", 1, 1);\r\n                    };\r\n                    texture.getScene()!.postProcessManager.directRender([rgbdPostProcess], expandedTexture, true);\r\n\r\n                    // Cleanup\r\n                    engine.restoreDefaultFramebuffer();\r\n                    engine._releaseTexture(internalTexture);\r\n                    if (rgbdPostProcess) {\r\n                        rgbdPostProcess.dispose();\r\n                    }\r\n\r\n                    // Internal Swap\r\n                    expandedTexture._swapAndDie(internalTexture);\r\n\r\n                    // Ready to get rolling again.\r\n                    internalTexture.isReady = true;\r\n                });\r\n            });\r\n        };\r\n\r\n        if (expandTexture) {\r\n            if (isReady) {\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                expandRgbdTextureAsync();\r\n            } else {\r\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n                texture.onLoadObservable.addOnce(expandRgbdTextureAsync);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encode the texture to RGBD if possible.\r\n     * @param internalTexture the texture to encode\r\n     * @param scene the scene hosting the texture\r\n     * @param outputTextureType type of the texture in which the encoding is performed\r\n     * @returns a promise with the internalTexture having its texture replaced by the result of the processing\r\n     */\r\n    // Should have \"Async\" in the name but this is a breaking change.\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static async EncodeTextureToRGBD(internalTexture: InternalTexture, scene: Scene, outputTextureType = Constants.TEXTURETYPE_UNSIGNED_BYTE): Promise<InternalTexture> {\r\n        if (!scene.getEngine().isWebGPU) {\r\n            await import(\"../Shaders/rgbdEncode.fragment\");\r\n        } else {\r\n            await import(\"../ShadersWGSL/rgbdEncode.fragment\");\r\n        }\r\n        return await ApplyPostProcess(\"rgbdEncode\", internalTexture, scene, outputTextureType, Constants.TEXTURE_NEAREST_SAMPLINGMODE, Constants.TEXTUREFORMAT_RGBA);\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;AAaM,IAAO,mBAAP,MAAuB;;;;;EAKlB,OAAO,kBAAkB,SAAgB;AAC5C,UAAM,kBAAkB,QAAQ;AAChC,QAAI,CAAC,mBAAmB,CAAC,QAAQ,QAAQ;AACrC;IACJ;AAGA,UAAM,SAAS,gBAAgB,UAAS;AACxC,UAAM,OAAO,OAAO,QAAO;AAC3B,UAAM,UAAU,gBAAgB;AAChC,QAAI,gBAAgB;AAGpB,QAAI,KAAK,0BAA0B,KAAK,iCAAiC;AACrE,sBAAgB;AAChB,sBAAgB,OAAO;IAC3B,WAES,KAAK,sBAAsB,KAAK,6BAA6B;AAClE,sBAAgB;AAChB,sBAAgB,OAAO;IAC3B;AAEA,QAAI,eAAe;AAEf,sBAAgB,UAAU;AAC1B,sBAAgB,UAAU;AAC1B,sBAAgB,UAAU;IAC9B;AAEA,UAAM,yBAAyB,YAAW;AACtC,YAAM,WAAW,OAAO;AACxB,YAAM,iBAAiB,WAAU,IAAsB;AACvD,sBAAgB,UAAU;AAE1B,UAAI,UAAU;AACV,cAAM,OAAO,mCAAsC;MACvD,OAAO;AACH,cAAM,OAAO,mCAAkC;MACnD;AAIA,YAAM,kBAAkB,IAAI,YACxB,cACA,cACA,MACA,MACA,GACA,MACA,GAAA,QAAU,OAAA,QAAA,gBACV,MACA,QACA,MACA,OAAA,QAAgB,cACP;AAMb,sBAAgB,gCAAgC;AAGhD,YAAM,kBAAkB,OAAO,0BAA0B,gBAAgB,OAAO;QAC5E,qBAAqB;QACrB,iBAAiB;QACjB,uBAAuB;QACvB,cAAc,gBAAgB;QAC9B,MAAM,gBAAgB;QACtB,QAAQ;OACX;AAED,sBAAgB,0BAA0B,QAAQ,CAAC,MAAK;AACpD,UAAE,oBAAoB,MAAK;AAEvB,0BAAgB,UAAU,CAAC,WAAU;AACjC,mBAAO,aAAa,kBAAkB,eAAe;AACrD,mBAAO,UAAU,SAAS,GAAG,CAAC;UAClC;AACA,kBAAQ,SAAQ,EAAI,mBAAmB,aAAa,CAAC,eAAe,GAAG,iBAAiB,IAAI;AAG5F,iBAAO,0BAAyB;AAChC,iBAAO,gBAAgB,eAAe;AACtC,cAAI,iBAAiB;AACjB,4BAAgB,QAAO;UAC3B;AAGA,0BAAgB,YAAY,eAAe;AAG3C,0BAAgB,UAAU;QAC9B,CAAC;MACL,CAAC;IACL;AAEA,QAAI,eAAe;AACf,UAAI,SAAS;AAET,+BAAsB;MAC1B,OAAO;AAEH,gBAAQ,iBAAiB,QAAQ,sBAAsB;MAC3D;IACJ;EACJ;;;;;;;;;;EAWO,aAAa,oBAAoB,iBAAkC,OAAc,oBAAoB,GAAA;AACxG,QAAI,CAAC,MAAM,UAAS,EAAG,UAAU;AAC7B,YAAM,OAAO,mCAAkC;IACnD,OAAO;AACH,YAAM,OAAO,mCAAsC;IACvD;AACA,WAAO,MAAM,iBAAiB,cAAc,iBAAiB,OAAO,mBAAmB,GAAA,CAAA;EAC3F;;",
  "names": []
}
