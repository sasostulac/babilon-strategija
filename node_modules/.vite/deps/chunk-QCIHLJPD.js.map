{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/workerPool.ts"],
  "sourcesContent": ["import type { IDisposable } from \"../scene\";\r\n\r\ninterface IWorkerInfo {\r\n    workerPromise: Promise<Worker>;\r\n    idle: boolean;\r\n    timeoutId?: ReturnType<typeof setTimeout>;\r\n}\r\n\r\n/**\r\n * Helper class to push actions to a pool of workers.\r\n */\r\nexport class WorkerPool implements IDisposable {\r\n    protected _workerInfos: Array<IWorkerInfo>;\r\n    protected _pendingActions = new Array<(worker: Worker, onComplete: () => void) => void>();\r\n\r\n    /**\r\n     * Constructor\r\n     * @param workers Array of workers to use for actions\r\n     */\r\n    constructor(workers: Array<Worker>) {\r\n        this._workerInfos = workers.map((worker) => ({\r\n            workerPromise: Promise.resolve(worker),\r\n            idle: true,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Terminates all workers and clears any pending actions.\r\n     */\r\n    public dispose(): void {\r\n        for (const workerInfo of this._workerInfos) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n            workerInfo.workerPromise.then((worker) => {\r\n                worker.terminate();\r\n            });\r\n        }\r\n\r\n        this._workerInfos.length = 0;\r\n        this._pendingActions.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n     * pended until a worker has completed its action.\r\n     * @param action The action to perform. Call onComplete when the action is complete.\r\n     */\r\n    public push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        if (!this._executeOnIdleWorker(action)) {\r\n            this._pendingActions.push(action);\r\n        }\r\n    }\r\n\r\n    protected _executeOnIdleWorker(action: (worker: Worker, onComplete: () => void) => void): boolean {\r\n        for (const workerInfo of this._workerInfos) {\r\n            if (workerInfo.idle) {\r\n                this._execute(workerInfo, action);\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    protected _execute(workerInfo: IWorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        workerInfo.idle = false;\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n        workerInfo.workerPromise.then((worker) => {\r\n            action(worker, () => {\r\n                const nextAction = this._pendingActions.shift();\r\n                if (nextAction) {\r\n                    this._execute(workerInfo, nextAction);\r\n                } else {\r\n                    workerInfo.idle = true;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Options for AutoReleaseWorkerPool\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface AutoReleaseWorkerPoolOptions {\r\n    /**\r\n     * Idle time elapsed before workers are terminated.\r\n     */\r\n    idleTimeElapsedBeforeRelease: number;\r\n}\r\n\r\n/**\r\n * Similar to the WorkerPool class except it creates and destroys workers automatically with a maximum of `maxWorkers` workers.\r\n * Workers are terminated when it is idle for at least `idleTimeElapsedBeforeRelease` milliseconds.\r\n */\r\nexport class AutoReleaseWorkerPool extends WorkerPool {\r\n    /**\r\n     * Default options for the constructor.\r\n     * Override to change the defaults.\r\n     */\r\n    public static DefaultOptions: AutoReleaseWorkerPoolOptions = {\r\n        idleTimeElapsedBeforeRelease: 1000,\r\n    };\r\n\r\n    private readonly _maxWorkers: number;\r\n    private readonly _createWorkerAsync: () => Promise<Worker>;\r\n    private readonly _options: AutoReleaseWorkerPoolOptions;\r\n\r\n    constructor(maxWorkers: number, createWorkerAsync: () => Promise<Worker>, options = AutoReleaseWorkerPool.DefaultOptions) {\r\n        super([]);\r\n\r\n        this._maxWorkers = maxWorkers;\r\n        this._createWorkerAsync = createWorkerAsync;\r\n        this._options = options;\r\n    }\r\n\r\n    public override push(action: (worker: Worker, onComplete: () => void) => void): void {\r\n        if (!this._executeOnIdleWorker(action)) {\r\n            if (this._workerInfos.length < this._maxWorkers) {\r\n                const workerInfo: IWorkerInfo = {\r\n                    workerPromise: this._createWorkerAsync(),\r\n                    idle: false,\r\n                };\r\n                this._workerInfos.push(workerInfo);\r\n                this._execute(workerInfo, action);\r\n            } else {\r\n                this._pendingActions.push(action);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected override _execute(workerInfo: IWorkerInfo, action: (worker: Worker, onComplete: () => void) => void): void {\r\n        // Reset the idle timeout.\r\n        if (workerInfo.timeoutId) {\r\n            clearTimeout(workerInfo.timeoutId);\r\n            delete workerInfo.timeoutId;\r\n        }\r\n\r\n        super._execute(workerInfo, (worker, onComplete) => {\r\n            action(worker, () => {\r\n                onComplete();\r\n\r\n                if (workerInfo.idle) {\r\n                    // Schedule the worker to be terminated after the elapsed time.\r\n                    workerInfo.timeoutId = setTimeout(() => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n                        workerInfo.workerPromise.then((worker) => {\r\n                            worker.terminate();\r\n                        });\r\n\r\n                        const indexOf = this._workerInfos.indexOf(workerInfo);\r\n                        if (indexOf !== -1) {\r\n                            this._workerInfos.splice(indexOf, 1);\r\n                        }\r\n                    }, this._options.idleTimeElapsedBeforeRelease);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": ";AAWM,IAAO,aAAP,MAAiB;;;;;EAQnB,YAAY,SAAsB;AANxB,SAAA,kBAAkB,IAAI,MAAK;AAOjC,SAAK,eAAe,QAAQ,IAAI,CAAC,YAAY;MACzC,eAAe,QAAQ,QAAQ,MAAM;MACrC,MAAM;MACR;EACN;;;;EAKO,UAAO;AACV,eAAW,cAAc,KAAK,cAAc;AAExC,iBAAW,cAAc,KAAK,CAAC,WAAU;AACrC,eAAO,UAAS;MACpB,CAAC;IACL;AAEA,SAAK,aAAa,SAAS;AAC3B,SAAK,gBAAgB,SAAS;EAClC;;;;;;EAOO,KAAK,QAAwD;AAChE,QAAI,CAAC,KAAK,qBAAqB,MAAM,GAAG;AACpC,WAAK,gBAAgB,KAAK,MAAM;IACpC;EACJ;EAEU,qBAAqB,QAAwD;AACnF,eAAW,cAAc,KAAK,cAAc;AACxC,UAAI,WAAW,MAAM;AACjB,aAAK,SAAS,YAAY,MAAM;AAChC,eAAO;MACX;IACJ;AAEA,WAAO;EACX;EAEU,SAAS,YAAyB,QAAwD;AAChG,eAAW,OAAO;AAElB,eAAW,cAAc,KAAK,CAAC,WAAU;AACrC,aAAO,QAAQ,MAAK;AAChB,cAAM,aAAa,KAAK,gBAAgB,MAAK;AAC7C,YAAI,YAAY;AACZ,eAAK,SAAS,YAAY,UAAU;QACxC,OAAO;AACH,qBAAW,OAAO;QACtB;MACJ,CAAC;IACL,CAAC;EACL;;AAkBE,IAAO,wBAAP,MAAO,+BAA8B,WAAU;EAajD,YAAY,YAAoB,mBAA0C,UAAU,uBAAsB,gBAAc;AACpH,UAAM,CAAA,CAAE;AAER,SAAK,cAAc;AACnB,SAAK,qBAAqB;AAC1B,SAAK,WAAW;EACpB;EAEgB,KAAK,QAAwD;AACzE,QAAI,CAAC,KAAK,qBAAqB,MAAM,GAAG;AACpC,UAAI,KAAK,aAAa,SAAS,KAAK,aAAa;AAC7C,cAAM,aAA0B;UAC5B,eAAe,KAAK,mBAAkB;UACtC,MAAM;;AAEV,aAAK,aAAa,KAAK,UAAU;AACjC,aAAK,SAAS,YAAY,MAAM;MACpC,OAAO;AACH,aAAK,gBAAgB,KAAK,MAAM;MACpC;IACJ;EACJ;EAEmB,SAAS,YAAyB,QAAwD;AAEzG,QAAI,WAAW,WAAW;AACtB,mBAAa,WAAW,SAAS;AACjC,aAAO,WAAW;IACtB;AAEA,UAAM,SAAS,YAAY,CAAC,QAAQ,eAAc;AAC9C,aAAO,QAAQ,MAAK;AAChB,mBAAU;AAEV,YAAI,WAAW,MAAM;AAEjB,qBAAW,YAAY,WAAW,MAAK;AAEnC,uBAAW,cAAc,KAAK,CAACA,YAAU;AACrC,cAAAA,QAAO,UAAS;YACpB,CAAC;AAED,kBAAM,UAAU,KAAK,aAAa,QAAQ,UAAU;AACpD,gBAAI,YAAY,IAAI;AAChB,mBAAK,aAAa,OAAO,SAAS,CAAC;YACvC;UACJ,GAAG,KAAK,SAAS,4BAA4B;QACjD;MACJ,CAAC;IACL,CAAC;EACL;;AA1Dc,sBAAA,iBAA+C;EACzD,8BAA8B;;",
  "names": ["worker"]
}
