{
  "version": 3,
  "sources": ["../../../dev/core/src/AudioV2/webAudio/webAudioSoundSource.ts"],
  "sourcesContent": ["import type { Nullable } from \"../../types\";\nimport type { AbstractAudioNode } from \"../abstractAudio\";\nimport type { ISoundSourceOptions } from \"../abstractAudio/abstractSoundSource\";\nimport { AbstractSoundSource } from \"../abstractAudio/abstractSoundSource\";\nimport { _HasSpatialAudioOptions } from \"../abstractAudio/subProperties/abstractSpatialAudio\";\nimport type { _SpatialAudio } from \"../abstractAudio/subProperties/spatialAudio\";\nimport { _StereoAudio } from \"../abstractAudio/subProperties/stereoAudio\";\nimport { _WebAudioBusAndSoundSubGraph } from \"./subNodes/webAudioBusAndSoundSubGraph\";\nimport { _SpatialWebAudio } from \"./subProperties/spatialWebAudio\";\nimport type { _WebAudioEngine } from \"./webAudioEngine\";\nimport type { IWebAudioInNode } from \"./webAudioNode\";\n\n/** @internal */\nexport class _WebAudioSoundSource extends AbstractSoundSource {\n    private _spatial: Nullable<_SpatialWebAudio> = null;\n    private readonly _spatialAutoUpdate: boolean = true;\n    private readonly _spatialMinUpdateTime: number = 0;\n    private _stereo: Nullable<_StereoAudio> = null;\n\n    protected _subGraph: _WebAudioBusAndSoundSubGraph;\n    protected _webAudioNode: AudioNode;\n\n    /** @internal */\n    public _audioContext: AudioContext | OfflineAudioContext;\n\n    /** @internal */\n    public override readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public constructor(name: string, webAudioNode: AudioNode, engine: _WebAudioEngine, options: Partial<ISoundSourceOptions>) {\n        super(name, engine);\n\n        if (typeof options.spatialAutoUpdate === \"boolean\") {\n            this._spatialAutoUpdate = options.spatialAutoUpdate;\n        }\n\n        if (typeof options.spatialMinUpdateTime === \"number\") {\n            this._spatialMinUpdateTime = options.spatialMinUpdateTime;\n        }\n\n        this._audioContext = this.engine._audioContext;\n        this._webAudioNode = webAudioNode;\n\n        this._subGraph = new _WebAudioSoundSource._SubGraph(this);\n    }\n\n    /** @internal */\n    public async _initAsync(options: Partial<ISoundSourceOptions>): Promise<void> {\n        if (options.outBus) {\n            this.outBus = options.outBus;\n        } else if (options.outBusAutoDefault !== false) {\n            await this.engine.isReadyPromise;\n            this.outBus = this.engine.defaultMainBus;\n        }\n\n        await this._subGraph.initAsync(options);\n\n        if (_HasSpatialAudioOptions(options)) {\n            this._initSpatialProperty();\n        }\n\n        this.engine._addNode(this);\n    }\n\n    /** @internal */\n    public get _inNode() {\n        return this._webAudioNode;\n    }\n\n    /** @internal */\n    public get _outNode() {\n        return this._subGraph._outNode;\n    }\n\n    /** @internal */\n    public override get spatial(): _SpatialAudio {\n        if (this._spatial) {\n            return this._spatial;\n        }\n        return this._initSpatialProperty();\n    }\n\n    /** @internal */\n    public override get stereo(): _StereoAudio {\n        return this._stereo ?? (this._stereo = new _StereoAudio(this._subGraph));\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._spatial?.dispose();\n        this._spatial = null;\n\n        this._stereo = null;\n\n        this._subGraph.dispose();\n\n        this.engine._removeNode(this);\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_WebAudioSoundSource\";\n    }\n\n    protected override _connect(node: IWebAudioInNode): boolean {\n        const connected = super._connect(node);\n\n        if (!connected) {\n            return false;\n        }\n\n        // If the wrapped node is not available now, it will be connected later by the subgraph.\n        if (node._inNode) {\n            this._outNode?.connect(node._inNode);\n        }\n\n        return true;\n    }\n\n    protected override _disconnect(node: IWebAudioInNode): boolean {\n        const disconnected = super._disconnect(node);\n\n        if (!disconnected) {\n            return false;\n        }\n\n        if (node._inNode) {\n            this._outNode?.disconnect(node._inNode);\n        }\n\n        return true;\n    }\n\n    private _initSpatialProperty(): _SpatialAudio {\n        if (!this._spatial) {\n            this._spatial = new _SpatialWebAudio(this._subGraph, this._spatialAutoUpdate, this._spatialMinUpdateTime);\n        }\n\n        return this._spatial;\n    }\n\n    private static _SubGraph = class extends _WebAudioBusAndSoundSubGraph {\n        protected override _owner: _WebAudioSoundSource;\n\n        protected get _downstreamNodes(): Nullable<Set<AbstractAudioNode>> {\n            return this._owner._downstreamNodes ?? null;\n        }\n\n        protected get _upstreamNodes(): Nullable<Set<AbstractAudioNode>> {\n            return this._owner._upstreamNodes ?? null;\n        }\n\n        protected override _onSubNodesChanged(): void {\n            super._onSubNodesChanged();\n\n            this._owner._inNode.disconnect();\n\n            if (this._owner._subGraph._inNode) {\n                this._owner._inNode.connect(this._owner._subGraph._inNode);\n            }\n        }\n    };\n}\n"],
  "mappings": ";;;;;;;;;;;AAaM,IAAO,uBAAP,MAAO,8BAA6B,oBAAmB;;EAgBzD,YAAmB,MAAc,cAAyB,QAAyB,SAAqC;AACpH,UAAM,MAAM,MAAM;AAhBd,SAAA,WAAuC;AAC9B,SAAA,qBAA8B;AAC9B,SAAA,wBAAgC;AACzC,SAAA,UAAkC;AAetC,QAAI,OAAO,QAAQ,sBAAsB,WAAW;AAChD,WAAK,qBAAqB,QAAQ;IACtC;AAEA,QAAI,OAAO,QAAQ,yBAAyB,UAAU;AAClD,WAAK,wBAAwB,QAAQ;IACzC;AAEA,SAAK,gBAAgB,KAAK,OAAO;AACjC,SAAK,gBAAgB;AAErB,SAAK,YAAY,IAAI,sBAAqB,UAAU,IAAI;EAC5D;;EAGO,MAAM,WAAW,SAAqC;AACzD,QAAI,QAAQ,QAAQ;AAChB,WAAK,SAAS,QAAQ;IAC1B,WAAW,QAAQ,sBAAsB,OAAO;AAC5C,YAAM,KAAK,OAAO;AAClB,WAAK,SAAS,KAAK,OAAO;IAC9B;AAEA,UAAM,KAAK,UAAU,UAAU,OAAO;AAEtC,QAAI,wBAAwB,OAAO,GAAG;AAClC,WAAK,qBAAoB;IAC7B;AAEA,SAAK,OAAO,SAAS,IAAI;EAC7B;;EAGA,IAAW,UAAO;AACd,WAAO,KAAK;EAChB;;EAGA,IAAW,WAAQ;AACf,WAAO,KAAK,UAAU;EAC1B;;EAGA,IAAoB,UAAO;AACvB,QAAI,KAAK,UAAU;AACf,aAAO,KAAK;IAChB;AACA,WAAO,KAAK,qBAAoB;EACpC;;EAGA,IAAoB,SAAM;AACtB,WAAO,KAAK,YAAY,KAAK,UAAU,IAAI,aAAa,KAAK,SAAS;EAC1E;;EAGgB,UAAO;AACnB,UAAM,QAAO;AAEb,SAAK,UAAU,QAAO;AACtB,SAAK,WAAW;AAEhB,SAAK,UAAU;AAEf,SAAK,UAAU,QAAO;AAEtB,SAAK,OAAO,YAAY,IAAI;EAChC;;EAGO,eAAY;AACf,WAAO;EACX;EAEmB,SAAS,MAAqB;AAC7C,UAAM,YAAY,MAAM,SAAS,IAAI;AAErC,QAAI,CAAC,WAAW;AACZ,aAAO;IACX;AAGA,QAAI,KAAK,SAAS;AACd,WAAK,UAAU,QAAQ,KAAK,OAAO;IACvC;AAEA,WAAO;EACX;EAEmB,YAAY,MAAqB;AAChD,UAAM,eAAe,MAAM,YAAY,IAAI;AAE3C,QAAI,CAAC,cAAc;AACf,aAAO;IACX;AAEA,QAAI,KAAK,SAAS;AACd,WAAK,UAAU,WAAW,KAAK,OAAO;IAC1C;AAEA,WAAO;EACX;EAEQ,uBAAoB;AACxB,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,IAAI,iBAAiB,KAAK,WAAW,KAAK,oBAAoB,KAAK,qBAAqB;IAC5G;AAEA,WAAO,KAAK;EAChB;;AAEe,qBAAA,YAAY,cAAc,6BAA4B;EAGjE,IAAc,mBAAgB;AAC1B,WAAO,KAAK,OAAO,oBAAoB;EAC3C;EAEA,IAAc,iBAAc;AACxB,WAAO,KAAK,OAAO,kBAAkB;EACzC;EAEmB,qBAAkB;AACjC,UAAM,mBAAkB;AAExB,SAAK,OAAO,QAAQ,WAAU;AAE9B,QAAI,KAAK,OAAO,UAAU,SAAS;AAC/B,WAAK,OAAO,QAAQ,QAAQ,KAAK,OAAO,UAAU,OAAO;IAC7D;EACJ;;",
  "names": []
}
