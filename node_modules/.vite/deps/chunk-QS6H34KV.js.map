{
  "version": 3,
  "sources": ["../../../dev/core/src/FlowGraph/Blocks/Execution/ControlFlow/flowGraphCancelDelayBlock.ts"],
  "sourcesContent": ["import { RegisterClass } from \"core/Misc/typeStore\";\nimport type { AdvancedTimer } from \"../../../../Misc/timer\";\nimport type { IFlowGraphBlockConfiguration } from \"../../../flowGraphBlock\";\nimport type { FlowGraphContext } from \"../../../flowGraphContext\";\nimport type { FlowGraphDataConnection } from \"../../../flowGraphDataConnection\";\nimport { FlowGraphExecutionBlockWithOutSignal } from \"../../../flowGraphExecutionBlockWithOutSignal\";\nimport { RichTypeFlowGraphInteger } from \"../../../flowGraphRichTypes\";\nimport type { FlowGraphSignalConnection } from \"../../../flowGraphSignalConnection\";\nimport { FlowGraphBlockNames } from \"../../flowGraphBlockNames\";\nimport type { FlowGraphInteger } from \"core/FlowGraph/CustomTypes/flowGraphInteger\";\nimport { getNumericValue } from \"core/FlowGraph/utils\";\n\n/**\n * This block cancels a delay that was previously scheduled.\n */\nexport class FlowGraphCancelDelayBlock extends FlowGraphExecutionBlockWithOutSignal {\n    /**\n     * Input connection: The index value of the scheduled activation to be cancelled.\n     */\n    public readonly delayIndex: FlowGraphDataConnection<FlowGraphInteger>;\n\n    constructor(config?: IFlowGraphBlockConfiguration) {\n        super(config);\n        this.delayIndex = this.registerDataInput(\"delayIndex\", RichTypeFlowGraphInteger);\n    }\n\n    public _execute(context: FlowGraphContext, _callingSignal: FlowGraphSignalConnection): void {\n        const delayIndex = getNumericValue(this.delayIndex.getValue(context));\n        if (delayIndex <= 0 || isNaN(delayIndex) || !isFinite(delayIndex)) {\n            return this._reportError(context, \"Invalid delay index\");\n        }\n        const timers = context._getGlobalContextVariable(\"pendingDelays\", [] as AdvancedTimer[]);\n        const timer = timers[delayIndex];\n        if (timer) {\n            timer.dispose();\n            // not removing it from the array. Disposing it will clear all of its resources\n        }\n        // activate the out output flow\n        this.out._activateSignal(context);\n    }\n\n    public override getClassName(): string {\n        return FlowGraphBlockNames.CancelDelay;\n    }\n}\n\nRegisterClass(FlowGraphBlockNames.CancelDelay, FlowGraphCancelDelayBlock);\n"],
  "mappings": ";;;;;;;;;;;;;;AAeM,IAAO,4BAAP,cAAyC,qCAAoC;EAM/E,YAAY,QAAqC;AAC7C,UAAM,MAAM;AACZ,SAAK,aAAa,KAAK,kBAAkB,cAAc,wBAAwB;EACnF;EAEO,SAAS,SAA2B,gBAAyC;AAChF,UAAM,aAAa,gBAAgB,KAAK,WAAW,SAAS,OAAO,CAAC;AACpE,QAAI,cAAc,KAAK,MAAM,UAAU,KAAK,CAAC,SAAS,UAAU,GAAG;AAC/D,aAAO,KAAK,aAAa,SAAS,qBAAqB;IAC3D;AACA,UAAM,SAAS,QAAQ,0BAA0B,iBAAiB,CAAA,CAAqB;AACvF,UAAM,QAAQ,OAAO,UAAU;AAC/B,QAAI,OAAO;AACP,YAAM,QAAO;IAEjB;AAEA,SAAK,IAAI,gBAAgB,OAAO;EACpC;EAEgB,eAAY;AACxB,WAAA;EACJ;;AAGJ,cAAa,6BAAkC,yBAAyB;",
  "names": []
}
