{
  "version": 3,
  "sources": ["../../../dev/core/src/Maths/math.functions.ts"],
  "sourcesContent": ["import type { FloatArray, Nullable, IndicesArray } from \"../types\";\r\nimport type { Vector2 } from \"./math.vector\";\r\nimport { Vector3 } from \"./math.vector\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\n\r\n// This helper class is only here so we can apply the nativeOverride decorator to functions.\r\nclass MathHelpers {\r\n    @nativeOverride.filter((...[positions, indices]: Parameters<typeof MathHelpers.extractMinAndMaxIndexed>) => !Array.isArray(positions) && !Array.isArray(indices))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMaxIndexed(positions: FloatArray, indices: IndicesArray, indexStart: number, indexCount: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = indexStart; index < indexStart + indexCount; index++) {\r\n            const offset = indices[index] * 3;\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[positions]: Parameters<typeof MathHelpers.extractMinAndMax>) => !Array.isArray(positions))\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static extractMinAndMax(positions: FloatArray, start: number, count: number, stride: number, minimum: Vector3, maximum: Vector3): void {\r\n        for (let index = start, offset = start * stride; index < start + count; index++, offset += stride) {\r\n            const x = positions[offset];\r\n            const y = positions[offset + 1];\r\n            const z = positions[offset + 2];\r\n            minimum.minimizeInPlaceFromFloats(x, y, z);\r\n            maximum.maximizeInPlaceFromFloats(x, y, z);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of indexed positions\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to the positions\r\n * @param indexStart defines the start index\r\n * @param indexCount defines the end index\r\n * @param bias defines bias value to add to the result\r\n * @returns minimum and maximum values\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function extractMinAndMaxIndexed(\r\n    positions: FloatArray,\r\n    indices: IndicesArray,\r\n    indexStart: number,\r\n    indexCount: number,\r\n    bias: Nullable<Vector2> = null\r\n): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    MathHelpers.extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n\r\n/**\r\n * Extracts minimum and maximum values from a list of positions\r\n * @param positions defines the positions to use\r\n * @param start defines the start index in the positions array\r\n * @param count defines the number of positions to handle\r\n * @param bias defines bias value to add to the result\r\n * @param stride defines the stride size to use (distance between two positions in the positions array)\r\n * @returns minimum and maximum values\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function extractMinAndMax(positions: FloatArray, start: number, count: number, bias: Nullable<Vector2> = null, stride?: number): { minimum: Vector3; maximum: Vector3 } {\r\n    const minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    const maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n    if (!stride) {\r\n        stride = 3;\r\n    }\r\n\r\n    MathHelpers.extractMinAndMax(positions, start, count, stride, minimum, maximum);\r\n\r\n    if (bias) {\r\n        minimum.x -= minimum.x * bias.x + bias.y;\r\n        minimum.y -= minimum.y * bias.x + bias.y;\r\n        minimum.z -= minimum.z * bias.x + bias.y;\r\n        maximum.x += maximum.x * bias.x + bias.y;\r\n        maximum.y += maximum.y * bias.x + bias.y;\r\n        maximum.z += maximum.z * bias.x + bias.y;\r\n    }\r\n\r\n    return {\r\n        minimum: minimum,\r\n        maximum: maximum,\r\n    };\r\n}\r\n\r\n/**\r\n * Flip flipped faces\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to use and update\r\n */\r\nexport function FixFlippedFaces(positions: FloatArray, indices: IndicesArray): void {\r\n    const boundingInfo = extractMinAndMax(positions, 0, positions.length / 3);\r\n\r\n    const inside = boundingInfo.maximum.subtract(boundingInfo.minimum).scale(0.5).add(boundingInfo.minimum);\r\n    const tmpVectorA = new Vector3();\r\n    const tmpVectorB = new Vector3();\r\n    const tmpVectorC = new Vector3();\r\n    const tmpVectorAB = new Vector3();\r\n    const tmpVectorAC = new Vector3();\r\n    const tmpVectorNormal = new Vector3();\r\n    const tmpVectorAvgNormal = new Vector3();\r\n\r\n    // Clean indices\r\n    for (let index = 0; index < indices.length; index += 3) {\r\n        const a = indices[index];\r\n        const b = indices[index + 1];\r\n        const c = indices[index + 2];\r\n\r\n        // Evaluate face normal\r\n        tmpVectorA.fromArray(positions, a * 3);\r\n        tmpVectorB.fromArray(positions, b * 3);\r\n        tmpVectorC.fromArray(positions, c * 3);\r\n\r\n        tmpVectorB.subtractToRef(tmpVectorA, tmpVectorAB);\r\n        tmpVectorC.subtractToRef(tmpVectorA, tmpVectorAC);\r\n\r\n        Vector3.CrossToRef(tmpVectorAB, tmpVectorAC, tmpVectorNormal);\r\n\r\n        tmpVectorNormal.normalize();\r\n\r\n        // Calculate normal from face center to the inside of the geometry\r\n        const avgX = tmpVectorA.x + tmpVectorB.x + tmpVectorC.x;\r\n        const avgY = tmpVectorA.y + tmpVectorB.y + tmpVectorC.y;\r\n        const avgZ = tmpVectorA.z + tmpVectorB.z + tmpVectorC.z;\r\n\r\n        tmpVectorAvgNormal.set(avgX / 3, avgY / 3, avgZ / 3);\r\n        tmpVectorAvgNormal.subtractInPlace(inside);\r\n        tmpVectorAvgNormal.normalize();\r\n\r\n        if (Vector3.Dot(tmpVectorNormal, tmpVectorAvgNormal) >= 0) {\r\n            // Flip!\r\n            indices[index] = c;\r\n            indices[index + 2] = a;\r\n        }\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
