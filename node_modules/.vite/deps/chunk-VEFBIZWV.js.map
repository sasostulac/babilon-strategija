{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/stringDictionary.ts", "../../../dev/core/src/Materials/colorCurves.functions.ts", "../../../dev/core/src/Materials/colorCurves.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.functions.ts", "../../../dev/core/src/Materials/imageProcessingConfiguration.ts", "../../../dev/core/src/Collisions/pickingInfo.ts", "../../../dev/core/src/Actions/actionEvent.ts", "../../../dev/core/src/sceneComponent.ts", "../../../dev/core/src/Actions/abstractActionManager.ts", "../../../dev/core/src/Events/keyboardEvents.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceEnums.ts", "../../../dev/core/src/Events/deviceInputEvents.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceSource.ts", "../../../dev/core/src/DeviceInput/eventFactory.ts", "../../../dev/core/src/DeviceInput/nativeDeviceInputSystem.ts", "../../../dev/core/src/DeviceInput/webDeviceInputSystem.ts", "../../../dev/core/src/DeviceInput/internalDeviceSourceManager.ts", "../../../dev/core/src/DeviceInput/InputDevices/deviceSourceManager.ts", "../../../dev/core/src/FrameGraph/frameGraphTypes.ts", "../../../dev/core/src/FrameGraph/Passes/pass.ts", "../../../dev/core/src/FrameGraph/Passes/cullPass.ts", "../../../dev/core/src/FrameGraph/Passes/renderPass.ts", "../../../dev/core/src/FrameGraph/frameGraphTask.ts", "../../../dev/core/src/PostProcesses/thinBlurPostProcess.ts", "../../../dev/core/src/PostProcesses/blurPostProcess.ts", "../../../dev/core/src/Materials/effectFallbacks.ts", "../../../dev/core/src/Lights/Shadows/shadowGenerator.ts", "../../../dev/core/src/Culling/boundingBox.ts", "../../../dev/core/src/Culling/boundingSphere.ts", "../../../dev/core/src/Culling/boundingInfo.ts", "../../../dev/core/src/Cameras/camera.ts", "../../../dev/core/src/Rendering/depthRenderer.ts", "../../../dev/core/src/Misc/thinMinMaxReducer.ts", "../../../dev/core/src/Misc/minMaxReducer.ts", "../../../dev/core/src/Misc/depthReducer.ts", "../../../dev/core/src/Lights/Shadows/cascadedShadowGenerator.ts", "../../../dev/core/src/FrameGraph/Tasks/Rendering/shadowGeneratorTask.ts", "../../../dev/core/src/Lights/directionalLight.ts", "../../../dev/core/src/Materials/Textures/textureCreationOptions.ts", "../../../dev/core/src/FrameGraph/Tasks/PostProcesses/postProcessTask.ts", "../../../dev/core/src/FrameGraph/Tasks/Rendering/csmShadowGeneratorTask.ts", "../../../dev/core/src/FrameGraph/Tasks/Rendering/objectRendererTask.ts", "../../../dev/core/src/Materials/floatingOriginMatrixOverrides.ts", "../../../dev/core/src/import.helper.ts", "../../../dev/core/src/Inputs/scene.inputManager.ts", "../../../dev/core/src/Inputs/pointerPickingConfiguration.ts", "../../../dev/core/src/scene.ts"],
  "sourcesContent": ["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * This class implement a typical dictionary using a string as key and the generic type T as value.\r\n * The underlying implementation relies on an associative array to ensure the best performances.\r\n * The value can be anything including 'null' but except 'undefined'\r\n */\r\nexport class StringDictionary<T> {\r\n    /**\r\n     * This will clear this dictionary and copy the content from the 'source' one.\r\n     * If the T value is a custom object, it won't be copied/cloned, the same object will be used\r\n     * @param source the dictionary to take the content from and copy to this dictionary\r\n     */\r\n    public copyFrom(source: StringDictionary<T>) {\r\n        this.clear();\r\n        source.forEach((t, v) => this.add(t, v));\r\n    }\r\n\r\n    /**\r\n     * Get a value based from its key\r\n     * @param key the given key to get the matching value from\r\n     * @returns the value if found, otherwise undefined is returned\r\n     */\r\n    public get(key: string): T | undefined {\r\n        const val = this._data[key];\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key or add it if it doesn't exist.\r\n     * This method will ensure you that a given key/data will be present in the dictionary.\r\n     * @param key the given key to get the matching value from\r\n     * @param factory the factory that will create the value if the key is not present in the dictionary.\r\n     * The factory will only be invoked if there's no data for the given key.\r\n     * @returns the value corresponding to the key.\r\n     */\r\n    public getOrAddWithFactory(key: string, factory: (key: string) => T): T {\r\n        let val = this.get(key);\r\n        if (val !== undefined) {\r\n            return val;\r\n        }\r\n\r\n        val = factory(key);\r\n        if (val) {\r\n            this.add(key, val);\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Get a value from its key if present in the dictionary otherwise add it\r\n     * @param key the key to get the value from\r\n     * @param val if there's no such key/value pair in the dictionary add it with this value\r\n     * @returns the value corresponding to the key\r\n     */\r\n    public getOrAdd(key: string, val: T): T {\r\n        const curVal = this.get(key);\r\n        if (curVal !== undefined) {\r\n            return curVal;\r\n        }\r\n\r\n        this.add(key, val);\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Check if there's a given key in the dictionary\r\n     * @param key the key to check for\r\n     * @returns true if the key is present, false otherwise\r\n     */\r\n    public contains(key: string): boolean {\r\n        return this._data[key] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Add a new key and its corresponding value\r\n     * @param key the key to add\r\n     * @param value the value corresponding to the key\r\n     * @returns true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary\r\n     */\r\n    public add(key: string, value: T): boolean {\r\n        if (this._data[key] !== undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        ++this._count;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Update a specific value associated to a key\r\n     * @param key defines the key to use\r\n     * @param value defines the value to store\r\n     * @returns true if the value was updated (or false if the key was not found)\r\n     */\r\n    public set(key: string, value: T): boolean {\r\n        if (this._data[key] === undefined) {\r\n            return false;\r\n        }\r\n        this._data[key] = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Get the element of the given key and remove it from the dictionary\r\n     * @param key defines the key to search\r\n     * @returns the value associated with the key or null if not found\r\n     */\r\n    public getAndRemove(key: string): Nullable<T> {\r\n        const val = this.get(key);\r\n        if (val !== undefined) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return val;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a key/value from the dictionary.\r\n     * @param key the key to remove\r\n     * @returns true if the item was successfully deleted, false if no item with such key exist in the dictionary\r\n     */\r\n    public remove(key: string): boolean {\r\n        if (this.contains(key)) {\r\n            delete this._data[key];\r\n            --this._count;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Clear the whole content of the dictionary\r\n     */\r\n    public clear() {\r\n        this._data = {};\r\n        this._count = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current count\r\n     */\r\n    public get count() {\r\n        return this._count;\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on each key/val of the dictionary.\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute on a given key/value pair\r\n     */\r\n    public forEach(callback: (key: string, val: T) => void) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            callback(cur, val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\r\n     * If the callback returns null or undefined the method will iterate to the next key/value pair\r\n     * Note that you can remove any element in this dictionary in the callback implementation\r\n     * @param callback the callback to execute, if it return a valid T instanced object the enumeration will stop and the object will be returned\r\n     * @returns the first item\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public first<TRes>(callback: (key: string, val: T) => TRes) {\r\n        for (const cur in this._data) {\r\n            const val = this._data[cur];\r\n            const res = callback(cur, val);\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _count = 0;\r\n    private _data: { [key: string]: T } = {};\r\n}\r\n", "/**\r\n * Prepare the list of uniforms associated with the ColorCurves effects.\r\n * @param uniformsList The list of uniforms used in the effect\r\n */\r\nexport function PrepareUniformsForColorCurves(uniformsList: string[]): void {\r\n    uniformsList.push(\"vCameraColorCurveNeutral\", \"vCameraColorCurvePositive\", \"vCameraColorCurveNegative\");\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\n\r\n/**\r\n * The color grading curves provide additional color adjustment that is applied after any color grading transform (3D LUT).\r\n * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n */\r\nexport class ColorCurves {\r\n    private _dirty = true;\r\n\r\n    private _tempColor = new Color4(0, 0, 0, 0);\r\n\r\n    private _globalCurve = new Color4(0, 0, 0, 0);\r\n    private _highlightsCurve = new Color4(0, 0, 0, 0);\r\n    private _midtonesCurve = new Color4(0, 0, 0, 0);\r\n    private _shadowsCurve = new Color4(0, 0, 0, 0);\r\n\r\n    private _positiveCurve = new Color4(0, 0, 0, 0);\r\n    private _negativeCurve = new Color4(0, 0, 0, 0);\r\n\r\n    @serialize()\r\n    private _globalHue = 30;\r\n\r\n    @serialize()\r\n    private _globalDensity = 0;\r\n\r\n    @serialize()\r\n    private _globalSaturation = 0;\r\n\r\n    @serialize()\r\n    private _globalExposure = 0;\r\n\r\n    /**\r\n     * Gets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get globalHue(): number {\r\n        return this._globalHue;\r\n    }\r\n    /**\r\n     * Sets the global Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set globalHue(value: number) {\r\n        this._globalHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get globalDensity(): number {\r\n        return this._globalDensity;\r\n    }\r\n    /**\r\n     * Sets the global Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set globalDensity(value: number) {\r\n        this._globalDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get globalSaturation(): number {\r\n        return this._globalSaturation;\r\n    }\r\n    /**\r\n     * Sets the global Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set globalSaturation(value: number) {\r\n        this._globalSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get globalExposure(): number {\r\n        return this._globalExposure;\r\n    }\r\n    /**\r\n     * Sets the global Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set globalExposure(value: number) {\r\n        this._globalExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _highlightsHue = 30;\r\n\r\n    @serialize()\r\n    private _highlightsDensity = 0;\r\n\r\n    @serialize()\r\n    private _highlightsSaturation = 0;\r\n\r\n    @serialize()\r\n    private _highlightsExposure = 0;\r\n\r\n    /**\r\n     * Gets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get highlightsHue(): number {\r\n        return this._highlightsHue;\r\n    }\r\n    /**\r\n     * Sets the highlights Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set highlightsHue(value: number) {\r\n        this._highlightsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get highlightsDensity(): number {\r\n        return this._highlightsDensity;\r\n    }\r\n    /**\r\n     * Sets the highlights Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set highlightsDensity(value: number) {\r\n        this._highlightsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get highlightsSaturation(): number {\r\n        return this._highlightsSaturation;\r\n    }\r\n    /**\r\n     * Sets the highlights Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set highlightsSaturation(value: number) {\r\n        this._highlightsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get highlightsExposure(): number {\r\n        return this._highlightsExposure;\r\n    }\r\n    /**\r\n     * Sets the highlights Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set highlightsExposure(value: number) {\r\n        this._highlightsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    @serialize()\r\n    private _midtonesHue = 30;\r\n\r\n    @serialize()\r\n    private _midtonesDensity = 0;\r\n\r\n    @serialize()\r\n    private _midtonesSaturation = 0;\r\n\r\n    @serialize()\r\n    private _midtonesExposure = 0;\r\n\r\n    /**\r\n     * Gets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get midtonesHue(): number {\r\n        return this._midtonesHue;\r\n    }\r\n    /**\r\n     * Sets the midtones Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set midtonesHue(value: number) {\r\n        this._midtonesHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get midtonesDensity(): number {\r\n        return this._midtonesDensity;\r\n    }\r\n    /**\r\n     * Sets the midtones Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set midtonesDensity(value: number) {\r\n        this._midtonesDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get midtonesSaturation(): number {\r\n        return this._midtonesSaturation;\r\n    }\r\n    /**\r\n     * Sets the midtones Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set midtonesSaturation(value: number) {\r\n        this._midtonesSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get midtonesExposure(): number {\r\n        return this._midtonesExposure;\r\n    }\r\n    /**\r\n     * Sets the midtones Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set midtonesExposure(value: number) {\r\n        this._midtonesExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    private _shadowsHue = 30;\r\n    private _shadowsDensity = 0;\r\n    private _shadowsSaturation = 0;\r\n    private _shadowsExposure = 0;\r\n\r\n    /**\r\n     * Gets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public get shadowsHue(): number {\r\n        return this._shadowsHue;\r\n    }\r\n    /**\r\n     * Sets the shadows Hue value.\r\n     * The hue value is a standard HSB hue in the range [0,360] where 0=red, 120=green and 240=blue. The default value is 30 degrees (orange).\r\n     */\r\n    public set shadowsHue(value: number) {\r\n        this._shadowsHue = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public get shadowsDensity(): number {\r\n        return this._shadowsDensity;\r\n    }\r\n    /**\r\n     * Sets the shadows Density value.\r\n     * The density value is in range [-100,+100] where 0 means the color filter has no effect and +100 means the color filter has maximum effect.\r\n     * Values less than zero provide a filter of opposite hue.\r\n     */\r\n    public set shadowsDensity(value: number) {\r\n        this._shadowsDensity = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public get shadowsSaturation(): number {\r\n        return this._shadowsSaturation;\r\n    }\r\n    /**\r\n     * Sets the shadows Saturation value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase saturation and negative values decrease saturation.\r\n     */\r\n    public set shadowsSaturation(value: number) {\r\n        this._shadowsSaturation = value;\r\n        this._dirty = true;\r\n    }\r\n    /**\r\n     * Gets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public get shadowsExposure(): number {\r\n        return this._shadowsExposure;\r\n    }\r\n    /**\r\n     * Sets the shadows Exposure value.\r\n     * This is an adjustment value in the range [-100,+100], where the default value of 0.0 makes no adjustment, positive values increase exposure and negative values decrease exposure.\r\n     */\r\n    public set shadowsExposure(value: number) {\r\n        this._shadowsExposure = value;\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the class name\r\n     * @returns The class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCurves\";\r\n    }\r\n\r\n    /**\r\n     * Binds the color curves to the shader.\r\n     * @param colorCurves The color curve to bind\r\n     * @param effect The effect to bind to\r\n     * @param positiveUniform The positive uniform shader parameter\r\n     * @param neutralUniform The neutral uniform shader parameter\r\n     * @param negativeUniform The negative uniform shader parameter\r\n     */\r\n    public static Bind(\r\n        colorCurves: ColorCurves,\r\n        effect: Effect,\r\n        positiveUniform = \"vCameraColorCurvePositive\",\r\n        neutralUniform = \"vCameraColorCurveNeutral\",\r\n        negativeUniform = \"vCameraColorCurveNegative\"\r\n    ): void {\r\n        if (colorCurves._dirty) {\r\n            colorCurves._dirty = false;\r\n\r\n            // Fill in global info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._globalHue,\r\n                colorCurves._globalDensity,\r\n                colorCurves._globalSaturation,\r\n                colorCurves._globalExposure,\r\n                colorCurves._globalCurve\r\n            );\r\n\r\n            // Compute highlights info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._highlightsHue,\r\n                colorCurves._highlightsDensity,\r\n                colorCurves._highlightsSaturation,\r\n                colorCurves._highlightsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._highlightsCurve);\r\n\r\n            // Compute midtones info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._midtonesHue,\r\n                colorCurves._midtonesDensity,\r\n                colorCurves._midtonesSaturation,\r\n                colorCurves._midtonesExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._midtonesCurve);\r\n\r\n            // Compute shadows info.\r\n            colorCurves._getColorGradingDataToRef(\r\n                colorCurves._shadowsHue,\r\n                colorCurves._shadowsDensity,\r\n                colorCurves._shadowsSaturation,\r\n                colorCurves._shadowsExposure,\r\n                colorCurves._tempColor\r\n            );\r\n            colorCurves._tempColor.multiplyToRef(colorCurves._globalCurve, colorCurves._shadowsCurve);\r\n\r\n            // Compute deltas (neutral is midtones).\r\n            colorCurves._highlightsCurve.subtractToRef(colorCurves._midtonesCurve, colorCurves._positiveCurve);\r\n            colorCurves._midtonesCurve.subtractToRef(colorCurves._shadowsCurve, colorCurves._negativeCurve);\r\n        }\r\n\r\n        if (effect) {\r\n            effect.setFloat4(positiveUniform, colorCurves._positiveCurve.r, colorCurves._positiveCurve.g, colorCurves._positiveCurve.b, colorCurves._positiveCurve.a);\r\n            effect.setFloat4(neutralUniform, colorCurves._midtonesCurve.r, colorCurves._midtonesCurve.g, colorCurves._midtonesCurve.b, colorCurves._midtonesCurve.a);\r\n            effect.setFloat4(negativeUniform, colorCurves._negativeCurve.r, colorCurves._negativeCurve.g, colorCurves._negativeCurve.b, colorCurves._negativeCurve.a);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the ColorCurves effects.\r\n     * @param uniformsList The list of uniforms used in the effect\r\n     */\r\n    public static PrepareUniforms: (uniformsList: string[]) => void = PrepareUniformsForColorCurves;\r\n\r\n    /**\r\n     * Returns color grading data based on a hue, density, saturation and exposure value.\r\n     * @param hue\r\n     * @param density\r\n     * @param saturation The saturation.\r\n     * @param exposure The exposure.\r\n     * @param result The result data container.\r\n     */\r\n    private _getColorGradingDataToRef(hue: number, density: number, saturation: number, exposure: number, result: Color4): void {\r\n        if (hue == null) {\r\n            return;\r\n        }\r\n\r\n        hue = ColorCurves._Clamp(hue, 0, 360);\r\n        density = ColorCurves._Clamp(density, -100, 100);\r\n        saturation = ColorCurves._Clamp(saturation, -100, 100);\r\n        exposure = ColorCurves._Clamp(exposure, -100, 100);\r\n\r\n        // Remap the slider/config filter density with non-linear mapping and also scale by half\r\n        // so that the maximum filter density is only 50% control. This provides fine control\r\n        // for small values and reasonable range.\r\n        density = ColorCurves._ApplyColorGradingSliderNonlinear(density);\r\n        density *= 0.5;\r\n\r\n        exposure = ColorCurves._ApplyColorGradingSliderNonlinear(exposure);\r\n\r\n        if (density < 0) {\r\n            density *= -1;\r\n            hue = (hue + 180) % 360;\r\n        }\r\n\r\n        ColorCurves._FromHSBToRef(hue, density, 50 + 0.25 * exposure, result);\r\n        result.scaleToRef(2, result);\r\n        result.a = 1 + 0.01 * saturation;\r\n    }\r\n\r\n    /**\r\n     * Takes an input slider value and returns an adjusted value that provides extra control near the centre.\r\n     * @param value The input slider value in range [-100,100].\r\n     * @returns Adjusted value.\r\n     */\r\n    private static _ApplyColorGradingSliderNonlinear(value: number): number {\r\n        value /= 100;\r\n\r\n        let x: number = Math.abs(value);\r\n        x = Math.pow(x, 2);\r\n\r\n        if (value < 0) {\r\n            x *= -1;\r\n        }\r\n\r\n        x *= 100;\r\n\r\n        return x;\r\n    }\r\n\r\n    /**\r\n     * Returns an RGBA Color4 based on Hue, Saturation and Brightness (also referred to as value, HSV).\r\n     * @param hue The hue (H) input.\r\n     * @param saturation The saturation (S) input.\r\n     * @param brightness The brightness (B) input.\r\n     * @param result An RGBA color represented as Vector4.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private static _FromHSBToRef(hue: number, saturation: number, brightness: number, result: Color4): void {\r\n        let h: number = ColorCurves._Clamp(hue, 0, 360);\r\n        const s: number = ColorCurves._Clamp(saturation / 100, 0, 1);\r\n        const v: number = ColorCurves._Clamp(brightness / 100, 0, 1);\r\n\r\n        if (s === 0) {\r\n            result.r = v;\r\n            result.g = v;\r\n            result.b = v;\r\n        } else {\r\n            // sector 0 to 5\r\n            h /= 60;\r\n            const i = Math.floor(h);\r\n\r\n            // fractional part of h\r\n            const f = h - i;\r\n            const p = v * (1 - s);\r\n            const q = v * (1 - s * f);\r\n            const t = v * (1 - s * (1 - f));\r\n\r\n            switch (i) {\r\n                case 0:\r\n                    result.r = v;\r\n                    result.g = t;\r\n                    result.b = p;\r\n                    break;\r\n                case 1:\r\n                    result.r = q;\r\n                    result.g = v;\r\n                    result.b = p;\r\n                    break;\r\n                case 2:\r\n                    result.r = p;\r\n                    result.g = v;\r\n                    result.b = t;\r\n                    break;\r\n                case 3:\r\n                    result.r = p;\r\n                    result.g = q;\r\n                    result.b = v;\r\n                    break;\r\n                case 4:\r\n                    result.r = t;\r\n                    result.g = p;\r\n                    result.b = v;\r\n                    break;\r\n                default:\r\n                    // case 5:\r\n                    result.r = v;\r\n                    result.g = p;\r\n                    result.b = q;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        result.a = 1;\r\n    }\r\n\r\n    /**\r\n     * Returns a value clamped between min and max\r\n     * @param value The value to clamp\r\n     * @param min The minimum of value\r\n     * @param max The maximum of value\r\n     * @returns The clamped value.\r\n     */\r\n    private static _Clamp(value: number, min: number, max: number): number {\r\n        return Math.min(Math.max(value, min), max);\r\n    }\r\n\r\n    /**\r\n     * Clones the current color curve instance.\r\n     * @returns The cloned curves\r\n     */\r\n    public clone(): ColorCurves {\r\n        return SerializationHelper.Clone(() => new ColorCurves(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current color curve instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the color curve from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed curves\r\n     */\r\n    public static Parse(source: any): ColorCurves {\r\n        return SerializationHelper.Parse(() => new ColorCurves(), source, null, null);\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ColorCurvesParser = ColorCurves.Parse;\r\n", "import { PrepareUniformsForColorCurves } from \"./colorCurves.functions\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\n\r\n/**\r\n * Prepare the list of uniforms associated with the Image Processing effects.\r\n * @param uniforms The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareUniformsForImageProcessing(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.EXPOSURE) {\r\n        uniforms.push(\"exposureLinear\");\r\n    }\r\n    if (defines.CONTRAST) {\r\n        uniforms.push(\"contrast\");\r\n    }\r\n    if (defines.COLORGRADING) {\r\n        uniforms.push(\"colorTransformSettings\");\r\n    }\r\n    if (defines.VIGNETTE || defines.DITHER) {\r\n        uniforms.push(\"vInverseScreenSize\");\r\n    }\r\n    if (defines.VIGNETTE) {\r\n        uniforms.push(\"vignetteSettings1\");\r\n        uniforms.push(\"vignetteSettings2\");\r\n    }\r\n    if (defines.COLORCURVES) {\r\n        PrepareUniformsForColorCurves(uniforms);\r\n    }\r\n    if (defines.DITHER) {\r\n        uniforms.push(\"ditherIntensity\");\r\n    }\r\n}\r\n\r\n/**\r\n * Prepare the list of samplers associated with the Image Processing effects.\r\n * @param samplersList The list of uniforms used in the effect\r\n * @param defines the list of defines currently in use\r\n */\r\nexport function PrepareSamplersForImageProcessing(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n    if (defines.COLORGRADING) {\r\n        samplersList.push(\"txColorTransform\");\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Mix } from \"../Misc/tools.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { IImageProcessingConfigurationDefines } from \"./imageProcessingConfiguration.defines\";\r\nimport { PrepareSamplersForImageProcessing, PrepareUniformsForImageProcessing } from \"./imageProcessingConfiguration.functions\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Neutral Tone mapping developped by the Khronos group in order to constrain\r\n     * values between 0 and 1 without shifting Hue.\r\n     */\r\n    public static readonly TONEMAPPING_KHR_PBR_NEUTRAL = 2;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette center X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterX = 0;\r\n\r\n    /**\r\n     * Vignette center Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCenterY = 0;\r\n\r\n    /**\r\n     * Back Compat: Vignette center Y Offset.\r\n     * @deprecated use vignetteCenterY instead\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.vignetteCenterY;\r\n    }\r\n    public set vignetteCentreY(value: number) {\r\n        this.vignetteCenterY = value;\r\n    }\r\n\r\n    /**\r\n     * Back Compat: Vignette center X Offset.\r\n     * @deprecated use vignetteCenterX instead\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.vignetteCenterX;\r\n    }\r\n    public set vignetteCentreX(value: number) {\r\n        this.vignetteCenterX = value;\r\n    }\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringEnabled = false;\r\n    /**\r\n     * Gets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public get ditheringEnabled(): boolean {\r\n        return this._ditheringEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the dithering effect is enabled.\r\n     * The dithering effect can be used to reduce banding.\r\n     */\r\n    public set ditheringEnabled(value: boolean) {\r\n        if (this._ditheringEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _ditheringIntensity = 1.0 / 255.0;\r\n    /**\r\n     * Gets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public get ditheringIntensity(): number {\r\n        return this._ditheringIntensity;\r\n    }\r\n    /**\r\n     * Sets the dithering intensity. 0 is no dithering. Default is 1.0 / 255.0.\r\n     */\r\n    public set ditheringIntensity(value: number) {\r\n        if (this._ditheringIntensity === value) {\r\n            return;\r\n        }\r\n\r\n        this._ditheringIntensity = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @internal */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Width of the output texture used in the post process. If not provided, uses the width of the screen.\r\n     */\r\n    @serialize()\r\n    public outputTextureWidth = 0;\r\n\r\n    /**\r\n     * Height of the output texture used in the post process. If not provided, uses the height of the screen.\r\n     */\r\n    @serialize()\r\n    public outputTextureHeight = 0;\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @returns \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms: (uniforms: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareUniformsForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers: (samplersList: string[], defines: IImageProcessingConfigurationDefines) => void = PrepareSamplersForImageProcessing;\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = 0;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.DITHER = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        if (!this._toneMappingEnabled) {\r\n            defines.TONEMAPPING = 0;\r\n        } else {\r\n            switch (this._toneMappingType) {\r\n                case ImageProcessingConfiguration.TONEMAPPING_KHR_PBR_NEUTRAL:\r\n                    defines.TONEMAPPING = 3;\r\n                    break;\r\n                case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                    defines.TONEMAPPING = 2;\r\n                    break;\r\n                default:\r\n                    defines.TONEMAPPING = 1;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.DITHER = this._ditheringEnabled;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING =\r\n            defines.VIGNETTE || !!defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING || defines.DITHER;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette and dither handled together due to common uniform.\r\n        if (this._vignetteEnabled || this._ditheringEnabled) {\r\n            const inverseWidth = 1 / (this.outputTextureWidth || effect.getEngine().getRenderWidth());\r\n            const inverseHeight = 1 / (this.outputTextureHeight || effect.getEngine().getRenderHeight());\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            if (this._ditheringEnabled) {\r\n                effect.setFloat(\"ditherIntensity\", 0.5 * this._ditheringIntensity);\r\n            }\r\n\r\n            if (this._vignetteEnabled) {\r\n                const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n                let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n                let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n                const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n                vignetteScaleX = Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n                vignetteScaleY = Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n                effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCenterX, -vignetteScaleY * this.vignetteCenterY);\r\n\r\n                const vignettePower = -2.0 * this.vignetteWeight;\r\n                effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n            }\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @returns The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @returns a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @returns The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        const parsed = SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n        // Backward compatibility\r\n        if (source.vignetteCentreX !== undefined) {\r\n            parsed.vignetteCenterX = source.vignetteCentreX;\r\n        }\r\n        if (source.vignetteCentreY !== undefined) {\r\n            parsed.vignetteCenterY = source.vignetteCentreY;\r\n        }\r\n\r\n        return parsed;\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.ImageProcessingConfiguration\", ImageProcessingConfiguration);\r\n", "import type { Nullable, FloatArray } from \"../types\";\r\nimport { Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\n\r\n/**\r\n * Information about the result of picking within a scene\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/picking_collisions\r\n */\r\nexport class PickingInfo {\r\n    /**\r\n     * If the pick collided with an object\r\n     */\r\n    public hit = false;\r\n    /**\r\n     * Distance away where the pick collided\r\n     */\r\n    public distance = 0;\r\n    /**\r\n     * The location of pick collision\r\n     */\r\n    public pickedPoint: Nullable<Vector3> = null;\r\n    /**\r\n     * The mesh corresponding the pick collision\r\n     */\r\n    public pickedMesh: Nullable<AbstractMesh> = null;\r\n    /** (See getTextureCoordinates) The barycentric U coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bu = 0;\r\n    /** (See getTextureCoordinates) The barycentric V coordinate that is used when calculating the texture coordinates of the collision.*/\r\n    public bv = 0;\r\n    /** The index of the face on the mesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public faceId = -1;\r\n    /** The index of the face on the subMesh that was picked, or the index of the Line if the picked Mesh is a LinesMesh */\r\n    public subMeshFaceId = -1;\r\n    /** Id of the submesh that was picked */\r\n    public subMeshId = 0;\r\n    /** If a sprite was picked, this will be the sprite the pick collided with */\r\n    public pickedSprite: Nullable<Sprite> = null;\r\n    /** If we are picking a mesh with thin instance, this will give you the picked thin instance */\r\n    public thinInstanceIndex = -1;\r\n    /**\r\n     * The ray that was used to perform the picking.\r\n     */\r\n    public ray: Nullable<Ray> = null;\r\n    /**\r\n     * If a mesh was used to do the picking (eg. 6dof controller) as a \"near interaction\", this will be populated.\r\n     */\r\n    public originMesh: Nullable<AbstractMesh> = null;\r\n    /**\r\n     * The aim-space transform of the input used for picking, if it is an XR input source.\r\n     */\r\n    public aimTransform: Nullable<TransformNode> = null;\r\n    /**\r\n     * The grip-space transform of the input used for picking, if it is an XR input source.\r\n     * Some XR sources, such as input coming from head mounted displays, do not have this.\r\n     */\r\n    public gripTransform: Nullable<TransformNode> = null;\r\n\r\n    /**\r\n     * Gets the normal corresponding to the face the pick collided with\r\n     * @param useWorldCoordinates If the resulting normal should be relative to the world (default: false)\r\n     * @param useVerticesNormals If the vertices normals should be used to calculate the normal instead of the normal map (default: true)\r\n     * @returns The normal corresponding to the face the pick collided with\r\n     * @remarks Note that the returned normal will always point towards the picking ray.\r\n     */\r\n    public getNormal(useWorldCoordinates = false, useVerticesNormals = true): Nullable<Vector3> {\r\n        if (!this.pickedMesh || (useVerticesNormals && !this.pickedMesh.isVerticesDataPresent(VertexBuffer.NormalKind))) {\r\n            return null;\r\n        }\r\n\r\n        let indices = this.pickedMesh.getIndices();\r\n\r\n        if (indices?.length === 0) {\r\n            indices = null;\r\n        }\r\n\r\n        let result: Vector3;\r\n\r\n        const tmp0 = TmpVectors.Vector3[0];\r\n        const tmp1 = TmpVectors.Vector3[1];\r\n        const tmp2 = TmpVectors.Vector3[2];\r\n\r\n        if (useVerticesNormals) {\r\n            const normals = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            let normal0 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(normals[this.faceId * 3 * 3], normals[this.faceId * 3 * 3 + 1], normals[this.faceId * 3 * 3 + 2]);\r\n            let normal1 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(normals[(this.faceId * 3 + 1) * 3], normals[(this.faceId * 3 + 1) * 3 + 1], normals[(this.faceId * 3 + 1) * 3 + 2]);\r\n            let normal2 = indices\r\n                ? Vector3.FromArrayToRef(normals, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(normals[(this.faceId * 3 + 2) * 3], normals[(this.faceId * 3 + 2) * 3 + 1], normals[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            normal0 = normal0.scale(this.bu);\r\n            normal1 = normal1.scale(this.bv);\r\n            normal2 = normal2.scale(1.0 - this.bu - this.bv);\r\n\r\n            result = new Vector3(normal0.x + normal1.x + normal2.x, normal0.y + normal1.y + normal2.y, normal0.z + normal1.z + normal2.z);\r\n        } else {\r\n            const positions = <FloatArray>this.pickedMesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n            const vertex1 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3] * 3, tmp0)\r\n                : tmp0.copyFromFloats(positions[this.faceId * 3 * 3], positions[this.faceId * 3 * 3 + 1], positions[this.faceId * 3 * 3 + 2]);\r\n            const vertex2 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 1] * 3, tmp1)\r\n                : tmp1.copyFromFloats(positions[(this.faceId * 3 + 1) * 3], positions[(this.faceId * 3 + 1) * 3 + 1], positions[(this.faceId * 3 + 1) * 3 + 2]);\r\n            const vertex3 = indices\r\n                ? Vector3.FromArrayToRef(positions, indices[this.faceId * 3 + 2] * 3, tmp2)\r\n                : tmp2.copyFromFloats(positions[(this.faceId * 3 + 2) * 3], positions[(this.faceId * 3 + 2) * 3 + 1], positions[(this.faceId * 3 + 2) * 3 + 2]);\r\n\r\n            const p1p2 = vertex1.subtract(vertex2);\r\n            const p3p2 = vertex3.subtract(vertex2);\r\n\r\n            result = Vector3.Cross(p1p2, p3p2);\r\n        }\r\n\r\n        const transformNormalToWorld = (pickedMesh: AbstractMesh, n: Vector3) => {\r\n            if (this.thinInstanceIndex !== -1) {\r\n                const tm = (pickedMesh as Mesh).thinInstanceGetWorldMatrices()[this.thinInstanceIndex];\r\n\r\n                if (tm) {\r\n                    Vector3.TransformNormalToRef(n, tm, n);\r\n                }\r\n            }\r\n\r\n            let wm = pickedMesh.getWorldMatrix();\r\n\r\n            if (pickedMesh.nonUniformScaling) {\r\n                TmpVectors.Matrix[0].copyFrom(wm);\r\n                wm = TmpVectors.Matrix[0];\r\n                wm.setTranslationFromFloats(0, 0, 0);\r\n                wm.invert();\r\n                wm.transposeToRef(TmpVectors.Matrix[1]);\r\n\r\n                wm = TmpVectors.Matrix[1];\r\n            }\r\n\r\n            Vector3.TransformNormalToRef(n, wm, n);\r\n        };\r\n\r\n        if (useWorldCoordinates) {\r\n            transformNormalToWorld(this.pickedMesh, result);\r\n        }\r\n\r\n        if (this.ray) {\r\n            const normalForDirectionChecking = TmpVectors.Vector3[0].copyFrom(result);\r\n\r\n            if (!useWorldCoordinates) {\r\n                // the normal has not been transformed to world space as part as the normal processing, so we must do it now\r\n                transformNormalToWorld(this.pickedMesh, normalForDirectionChecking);\r\n            }\r\n\r\n            // Flip the normal if the picking ray is in the same direction.\r\n            if (Vector3.Dot(normalForDirectionChecking, this.ray.direction) > 0) {\r\n                result.negateInPlace();\r\n            }\r\n        }\r\n\r\n        result.normalize();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates of where the pick occurred\r\n     * @param uvSet The UV set to use to calculate the texture coordinates (default: VertexBuffer.UVKind)\r\n     * @returns The vector containing the coordinates of the texture\r\n     */\r\n    public getTextureCoordinates(uvSet = VertexBuffer.UVKind): Nullable<Vector2> {\r\n        if (!this.pickedMesh || !this.pickedMesh.isVerticesDataPresent(uvSet)) {\r\n            return null;\r\n        }\r\n\r\n        const indices = this.pickedMesh.getIndices();\r\n        if (!indices) {\r\n            return null;\r\n        }\r\n\r\n        const uvs = this.pickedMesh.getVerticesData(uvSet);\r\n        if (!uvs) {\r\n            return null;\r\n        }\r\n\r\n        let uv0 = Vector2.FromArray(uvs, indices[this.faceId * 3] * 2);\r\n        let uv1 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 1] * 2);\r\n        let uv2 = Vector2.FromArray(uvs, indices[this.faceId * 3 + 2] * 2);\r\n\r\n        uv0 = uv0.scale(this.bu);\r\n        uv1 = uv1.scale(this.bv);\r\n        uv2 = uv2.scale(1.0 - this.bu - this.bv);\r\n\r\n        return new Vector2(uv0.x + uv1.x + uv2.x, uv0.y + uv1.y + uv2.y);\r\n    }\r\n}\r\n", "import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any\r\n    ) {}\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: any, additionalData?: any): ActionEvent {\r\n        const scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: any, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: any): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}\r\n", "import type { Scene } from \"./scene\";\r\nimport type { SmartArrayNoDuplicate } from \"./Misc/smartArray\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\n\r\nimport type { Mesh } from \"./Meshes/mesh\";\r\nimport type { Effect } from \"./Materials/effect\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"./Meshes/subMesh\";\r\nimport type { RenderTargetTexture } from \"./Materials/Textures/renderTargetTexture\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\n/**\r\n * Groups all the scene component constants in one place to ease maintenance.\r\n * @internal\r\n */\r\nexport class SceneComponentConstants {\r\n    public static readonly NAME_EFFECTLAYER = \"EffectLayer\";\r\n    public static readonly NAME_LAYER = \"Layer\";\r\n    public static readonly NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\r\n    public static readonly NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\r\n    public static readonly NAME_PARTICLESYSTEM = \"ParticleSystem\";\r\n    public static readonly NAME_GAMEPAD = \"Gamepad\";\r\n    public static readonly NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\r\n    public static readonly NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\r\n    public static readonly NAME_PREPASSRENDERER = \"PrePassRenderer\";\r\n    public static readonly NAME_DEPTHRENDERER = \"DepthRenderer\";\r\n    public static readonly NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\r\n    public static readonly NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\r\n    public static readonly NAME_SPRITE = \"Sprite\";\r\n    public static readonly NAME_SUBSURFACE = \"SubSurface\";\r\n    public static readonly NAME_OUTLINERENDERER = \"Outline\";\r\n    public static readonly NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\r\n    public static readonly NAME_SHADOWGENERATOR = \"ShadowGenerator\";\r\n    public static readonly NAME_OCTREE = \"Octree\";\r\n    public static readonly NAME_PHYSICSENGINE = \"PhysicsEngine\";\r\n    public static readonly NAME_AUDIO = \"Audio\";\r\n    public static readonly NAME_FLUIDRENDERER = \"FluidRenderer\";\r\n    public static readonly NAME_IBLCDFGENERATOR = \"iblCDFGenerator\";\r\n    public static readonly NAME_CLUSTEREDLIGHTING = \"ClusteredLighting\";\r\n\r\n    public static readonly STEP_ISREADYFORMESH_EFFECTLAYER = 0;\r\n\r\n    public static readonly STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_BEFORECAMERADRAW_LAYER = 2;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\r\n\r\n    public static readonly STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\r\n    public static readonly STEP_BEFORECLEAR_PREPASS = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETCLEAR_PREPASS = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_AFTERCAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\r\n    public static readonly STEP_AFTERCAMERADRAW_LAYER = 4;\r\n    public static readonly STEP_AFTERCAMERADRAW_FLUIDRENDERER = 5;\r\n\r\n    public static readonly STEP_AFTERCAMERAPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETPOSTPROCESS_LAYER = 0;\r\n\r\n    public static readonly STEP_AFTERRENDER_AUDIO = 0;\r\n\r\n    public static readonly STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\r\n    public static readonly STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\r\n    public static readonly STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\r\n\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_FLUIDRENDERER = 1;\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_CLUSTEREDLIGHTING = 2;\r\n\r\n    public static readonly STEP_POINTERMOVE_SPRITE = 0;\r\n    public static readonly STEP_POINTERDOWN_SPRITE = 0;\r\n    public static readonly STEP_POINTERUP_SPRITE = 0;\r\n}\r\n\r\n/**\r\n * This represents a scene component.\r\n *\r\n * This is used to decouple the dependency the scene is having on the different workloads like\r\n * layers, post processes...\r\n */\r\nexport interface ISceneComponent {\r\n    /**\r\n     * The name of the component. Each component must have a unique name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * Register the component to one instance of a scene.\r\n     */\r\n    register(): void;\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    rebuild(): void;\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * This represents a SERIALIZABLE scene component.\r\n *\r\n * This extends Scene Component to add Serialization methods on top.\r\n */\r\nexport interface ISceneSerializableComponent extends ISceneComponent {\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    addFromContainer(container: IAssetContainer): void;\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    removeFromContainer(container: IAssetContainer, dispose?: boolean): void;\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    serialize(serializationObject: any): void;\r\n}\r\n\r\n/**\r\n * Strong typing of a Mesh related stage step action\r\n */\r\nexport type MeshStageAction = (mesh: AbstractMesh, hardwareInstancedRendering: boolean) => boolean;\r\n\r\n/**\r\n * Strong typing of a Evaluate Sub Mesh related stage step action\r\n */\r\nexport type EvaluateSubMeshStageAction = (mesh: AbstractMesh, subMesh: SubMesh) => void;\r\n\r\n/**\r\n * Strong typing of a pre active Mesh related stage step action\r\n */\r\nexport type PreActiveMeshStageAction = (mesh: AbstractMesh) => void;\r\n\r\n/**\r\n * Strong typing of a Camera related stage step action\r\n */\r\nexport type CameraStageAction = (camera: Camera) => void;\r\n\r\n/**\r\n * Strong typing of a Camera Frame buffer related stage step action\r\n */\r\nexport type CameraStageFrameBufferAction = (camera: Camera) => boolean;\r\n\r\n/**\r\n * Strong typing of a Render Target related stage step action\r\n */\r\nexport type RenderTargetStageAction = (renderTarget: RenderTargetTexture, faceIndex?: number, layer?: number) => void;\r\n\r\n/**\r\n * Strong typing of a RenderingGroup related stage step action\r\n */\r\nexport type RenderingGroupStageAction = (renderingGroupId: number) => void;\r\n\r\n/**\r\n * Strong typing of a Mesh Render related stage step action\r\n */\r\nexport type RenderingMeshStageAction = (mesh: Mesh, subMesh: SubMesh, batch: any, effect: Nullable<Effect>) => void;\r\n\r\n/**\r\n * Strong typing of a simple stage step action\r\n */\r\nexport type SimpleStageAction = () => void;\r\n\r\n/**\r\n * Strong typing of a render target action.\r\n */\r\nexport type RenderTargetsStageAction = (renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) => void;\r\n\r\n/**\r\n * Strong typing of a pointer move action.\r\n */\r\nexport type PointerMoveStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    isMeshPicked: boolean,\r\n    element: Nullable<HTMLElement>\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Strong typing of a pointer up/down action.\r\n */\r\nexport type PointerUpDownStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    evt: IPointerEvent,\r\n    doubleClick: boolean\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Representation of a stage in the scene (Basically a list of ordered steps)\r\n * @internal\r\n */\r\nexport class Stage<T extends Function> extends Array<{ index: number; component: ISceneComponent; action: T }> {\r\n    /**\r\n     * Hide ctor from the rest of the world.\r\n     * @param items The items to add.\r\n     */\r\n    private constructor(items?: { index: number; component: ISceneComponent; action: T }[]) {\r\n        super(...(<any>items));\r\n    }\r\n\r\n    /**\r\n     * Creates a new Stage.\r\n     * @returns A new instance of a Stage\r\n     */\r\n    static Create<T extends Function>(): Stage<T> {\r\n        return Object.create(Stage.prototype) as Stage<T>;\r\n    }\r\n\r\n    /**\r\n     * Registers a step in an ordered way in the targeted stage.\r\n     * @param index Defines the position to register the step in\r\n     * @param component Defines the component attached to the step\r\n     * @param action Defines the action to launch during the step\r\n     */\r\n    public registerStep(index: number, component: ISceneComponent, action: T): void {\r\n        let i = 0;\r\n        let maxIndex = Number.MAX_VALUE;\r\n        for (; i < this.length; i++) {\r\n            const step = this[i];\r\n            maxIndex = step.index;\r\n            if (index < maxIndex) {\r\n                break;\r\n            }\r\n        }\r\n        this.splice(i, 0, { index, component, action: action.bind(component) });\r\n    }\r\n\r\n    /**\r\n     * Clears all the steps from the stage.\r\n     */\r\n    public clear(): void {\r\n        this.length = 0;\r\n    }\r\n}\r\n", "import type { IDisposable } from \"../scene\";\r\nimport type { IActionEvent } from \"./actionEvent\";\r\nimport type { IAction } from \"./action\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n */\r\nexport abstract class AbstractActionManager implements IDisposable {\r\n    /** Gets the list of active triggers */\r\n    public static Triggers: { [key: string]: number } = {};\r\n\r\n    /** Gets the cursor to use when hovering items */\r\n    public hoverCursor: string = \"\";\r\n\r\n    /** Gets the list of actions */\r\n    public actions: IAction[] = [];\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\r\n    public isRecursive = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if this ActionManager should be disposed once the last Mesh using it is disposed\r\n     */\r\n    public disposeWhenUnowned = true;\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public abstract dispose(): void;\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public abstract get hasPointerTriggers(): boolean;\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public abstract get hasPickTriggers(): boolean;\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public abstract processTrigger(trigger: number, evt?: IActionEvent): void;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers(triggers: number[]): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @returns a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers2(triggerA: number, triggerB: number): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @returns whether the trigger is handled\r\n     */\r\n    public abstract hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean;\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public abstract serialize(name: string): any;\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @returns the action amended (prepared) after registration\r\n     */\r\n    public abstract registerAction(action: IAction): Nullable<IAction>;\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @returns a boolean indicating whether the action has been unregistered\r\n     */\r\n    public abstract unregisterAction(action: IAction): boolean;\r\n\r\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\r\n    public static get HasTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\r\n    public static get HasPickTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt >= Constants.ACTION_OnPickTrigger && tAsInt <= Constants.ACTION_OnPickUpTrigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager that handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @returns a boolean indicating whether the trigger is handled by at least one action manager\r\n     **/\r\n    public static HasSpecificTrigger(trigger: number): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt === trigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n", "import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public override type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public override event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Enum for Device Types\r\n */\r\nexport enum DeviceType {\r\n    /** Generic */\r\n    Generic = 0,\r\n    /** Keyboard */\r\n    Keyboard = 1,\r\n    /** Mouse */\r\n    Mouse = 2,\r\n    /** Touch Pointers */\r\n    Touch = 3,\r\n    /** PS4 Dual Shock */\r\n    DualShock = 4,\r\n    /** Xbox */\r\n    Xbox = 5,\r\n    /** Switch Controller */\r\n    Switch = 6,\r\n    /** PS5 DualSense */\r\n    DualSense = 7,\r\n}\r\n\r\n// Device Enums\r\n/**\r\n * Enum for All Pointers (Touch/Mouse)\r\n */\r\nexport enum PointerInput {\r\n    /** Horizontal Axis (Not used in events/observables; only in polling) */\r\n    Horizontal = 0,\r\n    /** Vertical Axis (Not used in events/observables; only in polling) */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Used in events/observables to identify if x/y changes occurred */\r\n    Move = 12,\r\n}\r\n\r\n/** @internal */\r\nexport const enum NativePointerInput {\r\n    /** Horizontal Axis */\r\n    Horizontal = PointerInput.Horizontal,\r\n    /** Vertical Axis */\r\n    Vertical = 1,\r\n    /** Left Click or Touch */\r\n    LeftClick = 2,\r\n    /** Middle Click */\r\n    MiddleClick = 3,\r\n    /** Right Click */\r\n    RightClick = 4,\r\n    /** Browser Back */\r\n    BrowserBack = 5,\r\n    /** Browser Forward */\r\n    BrowserForward = 6,\r\n    /** Mouse Wheel X */\r\n    MouseWheelX = 7,\r\n    /** Mouse Wheel Y */\r\n    MouseWheelY = 8,\r\n    /** Mouse Wheel Z */\r\n    MouseWheelZ = 9,\r\n    /** Delta X */\r\n    DeltaHorizontal = 10,\r\n    /** Delta Y */\r\n    DeltaVertical = 11,\r\n}\r\n\r\n/**\r\n * Enum for Dual Shock Gamepad\r\n */\r\nexport const enum DualShockInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Dual Sense Gamepad\r\n */\r\nexport const enum DualSenseInput {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** L2 */\r\n    L2 = 6,\r\n    /** R2 */\r\n    R2 = 7,\r\n    /** Create */\r\n    Create = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** L3 */\r\n    L3 = 10,\r\n    /** R3 */\r\n    R3 = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** TouchPad */\r\n    TouchPad = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n\r\n/**\r\n * Enum for Xbox Gamepad\r\n */\r\nexport const enum XboxInput {\r\n    /** A */\r\n    A = 0,\r\n    /** B */\r\n    B = 1,\r\n    /** X */\r\n    X = 2,\r\n    /** Y */\r\n    Y = 3,\r\n    /** LB */\r\n    LB = 4,\r\n    /** RB */\r\n    RB = 5,\r\n    /** LT */\r\n    LT = 6,\r\n    /** RT */\r\n    RT = 7,\r\n    /** Back */\r\n    Back = 8,\r\n    /** Start */\r\n    Start = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 17,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 18,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 19,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 20,\r\n}\r\n\r\n/**\r\n * Enum for Switch (Pro/JoyCon L+R) Gamepad\r\n */\r\nexport const enum SwitchInput {\r\n    /** B */\r\n    B = 0,\r\n    /** A */\r\n    A = 1,\r\n    /** Y */\r\n    Y = 2,\r\n    /** X */\r\n    X = 3,\r\n    /** L */\r\n    L = 4,\r\n    /** R */\r\n    R = 5,\r\n    /** ZL */\r\n    ZL = 6,\r\n    /** ZR */\r\n    ZR = 7,\r\n    /** Minus */\r\n    Minus = 8,\r\n    /** Plus */\r\n    Plus = 9,\r\n    /** LS */\r\n    LS = 10,\r\n    /** RS */\r\n    RS = 11,\r\n    /** DPadUp */\r\n    DPadUp = 12,\r\n    /** DPadDown */\r\n    DPadDown = 13,\r\n    /** DPadLeft */\r\n    DPadLeft = 14,\r\n    /** DRight */\r\n    DPadRight = 15,\r\n    /** Home */\r\n    Home = 16,\r\n    /** Capture */\r\n    Capture = 17,\r\n    /** LStickXAxis */\r\n    LStickXAxis = 18,\r\n    /** LStickYAxis */\r\n    LStickYAxis = 19,\r\n    /** RStickXAxis */\r\n    RStickXAxis = 20,\r\n    /** RStickYAxis */\r\n    RStickYAxis = 21,\r\n}\r\n", "import type { PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\n\r\n/**\r\n * Event Types\r\n */\r\nexport const enum DeviceInputEventType {\r\n    // Pointers\r\n    /** PointerMove */\r\n    PointerMove,\r\n    /** PointerDown */\r\n    PointerDown,\r\n    /** PointerUp */\r\n    PointerUp,\r\n}\r\n\r\n/**\r\n * Native friendly interface for Event Object\r\n */\r\nexport interface IUIEvent {\r\n    /**\r\n     * Input array index\r\n     */\r\n    inputIndex: number;\r\n\r\n    /**\r\n     * Current target for an event\r\n     */\r\n    currentTarget?: any;\r\n\r\n    /**\r\n     * Alias for target\r\n     * @deprecated Use target instead\r\n     */\r\n    srcElement?: any;\r\n\r\n    /**\r\n     * Type of event\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Reference to object where object was dispatched\r\n     */\r\n    target: any;\r\n\r\n    /**\r\n     * Tells user agent what to do when not explicitly handled\r\n     */\r\n    preventDefault: () => void;\r\n}\r\n\r\n/**\r\n * Native friendly interface for KeyboardEvent Object\r\n */\r\nexport interface IKeyboardEvent extends IUIEvent {\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Unicode value of character pressed\r\n     * @deprecated Required for event, use keyCode instead.\r\n     */\r\n    charCode?: number;\r\n\r\n    /**\r\n     * Code for key based on layout\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * String representation of key\r\n     */\r\n    key: string;\r\n    /**\r\n     * ASCII value of key\r\n     * @deprecated Used with DeviceSourceManager\r\n     */\r\n    keyCode: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n}\r\n\r\n/**\r\n * Native friendly interface for MouseEvent Object\r\n */\r\nexport interface IMouseEvent extends IUIEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical>;\r\n\r\n    /**\r\n     * Status of Alt key being pressed\r\n     */\r\n    altKey: boolean;\r\n\r\n    /**\r\n     * Value of single mouse button pressed\r\n     */\r\n    button: number;\r\n\r\n    /**\r\n     * Value of all mouse buttons pressed\r\n     */\r\n    buttons: number;\r\n\r\n    /**\r\n     * Current X coordinate\r\n     */\r\n    clientX: number;\r\n\r\n    /**\r\n     * Current Y coordinate\r\n     */\r\n    clientY: number;\r\n\r\n    /**\r\n     * Status of Ctrl key being pressed\r\n     */\r\n    ctrlKey: boolean;\r\n\r\n    /**\r\n     * Provides current click count\r\n     */\r\n    detail?: number;\r\n\r\n    /**\r\n     * Status of Meta key (eg. Windows key) being pressed\r\n     */\r\n    metaKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     */\r\n    movementX: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     */\r\n    movementY: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    mozMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    mozMovementY?: number;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    msMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    msMovementY?: number;\r\n\r\n    /**\r\n     * Current coordinate of X within container\r\n     */\r\n    offsetX: number;\r\n\r\n    /**\r\n     * Current coordinate of Y within container\r\n     */\r\n    offsetY: number;\r\n\r\n    /**\r\n     * Horizontal coordinate of event\r\n     */\r\n    pageX: number;\r\n\r\n    /**\r\n     * Vertical coordinate of event\r\n     */\r\n    pageY: number;\r\n\r\n    /**\r\n     * Status of Shift key being pressed\r\n     */\r\n    shiftKey: boolean;\r\n\r\n    /**\r\n     * Delta of movement on X axis\r\n     * @deprecated Use 'movementX' instead\r\n     */\r\n    webkitMovementX?: number;\r\n\r\n    /**\r\n     * Delta of movement on Y axis\r\n     * @deprecated Use 'movementY' instead\r\n     */\r\n    webkitMovementY?: number;\r\n\r\n    /**\r\n     * Alias of clientX\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Alias of clientY\r\n     */\r\n    y: number;\r\n}\r\n\r\n/**\r\n * Native friendly interface for PointerEvent Object\r\n */\r\nexport interface IPointerEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events, excluding ones that CANNOT be in events organically and mouse wheel values\r\n     */\r\n    inputIndex: Exclude<PointerInput, PointerInput.Horizontal | PointerInput.Vertical | PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ>;\r\n\r\n    /**\r\n     * Pointer Event ID\r\n     */\r\n    pointerId: number;\r\n\r\n    /**\r\n     * Type of pointer\r\n     */\r\n    pointerType: string;\r\n}\r\n\r\n/**\r\n * Native friendly interface for WheelEvent Object\r\n */\r\nexport interface IWheelEvent extends IMouseEvent {\r\n    /**\r\n     * Subset of possible PointerInput values for events that can only be used with mouse wheel\r\n     */\r\n    inputIndex: PointerInput.MouseWheelX | PointerInput.MouseWheelY | PointerInput.MouseWheelZ;\r\n\r\n    /**\r\n     * Units for delta value\r\n     */\r\n    deltaMode: number;\r\n\r\n    /**\r\n     * Horizontal scroll delta\r\n     */\r\n    deltaX: number;\r\n\r\n    /**\r\n     * Vertical scroll delta\r\n     */\r\n    deltaY: number;\r\n\r\n    /**\r\n     * Z-Axis scroll delta\r\n     */\r\n    deltaZ: number;\r\n\r\n    /**\r\n     * WheelDelta (From MouseWheel Event)\r\n     * @deprecated\r\n     */\r\n    wheelDelta?: number;\r\n}\r\n\r\n/**\r\n * Constants used for Events\r\n */\r\nexport class EventConstants {\r\n    /**\r\n     * Pixel delta for Wheel Events (Default)\r\n     */\r\n    public static DOM_DELTA_PIXEL = 0x00;\r\n\r\n    /**\r\n     * Line delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_LINE = 0x01;\r\n\r\n    /**\r\n     * Page delta for Wheel Events\r\n     */\r\n    public static DOM_DELTA_PAGE = 0x02;\r\n}\r\n", "import type { DeviceType } from \"./deviceEnums\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceInput } from \"./deviceTypes\";\r\nimport type { IDeviceInputSystem } from \"../inputInterfaces\";\r\nimport type { IKeyboardEvent, IPointerEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Subset of DeviceInput that only handles pointers and keyboard\r\n */\r\nexport type DeviceSourceEvent<T extends DeviceType> = T extends DeviceType.Keyboard\r\n    ? IKeyboardEvent\r\n    : T extends DeviceType.Mouse\r\n      ? IWheelEvent | IPointerEvent\r\n      : T extends DeviceType.Touch\r\n        ? IPointerEvent\r\n        : never;\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<DeviceSourceEvent<T>>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem - Reference to DeviceInputSystem\r\n     * @param deviceType - Type of device\r\n     * @param deviceSlot - \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: T,\r\n        /** [0] \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0\r\n    ) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex - index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n", "import { Constants } from \"../Engines/constants\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @param pointerId PointerId to use for pointer events\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo, pointerId);\r\n            default:\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @param pointerId PointerId to use for pointer events\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any,\r\n        pointerId?: number\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = pointerId ?? deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        let buttons = 0;\r\n\r\n        // Populate buttons property with current state of all mouse buttons\r\n        // Uses values found on: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.LeftClick);\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.RightClick) * 2;\r\n        buttons += deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.MiddleClick) * 4;\r\n        evt.buttons = buttons;\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        // While WheelEvents don't generally have a pointerId, we used to add one in the InputManager\r\n        // This line has been added to make the InputManager more platform-agnostic\r\n        // Similar code exists in the WebDeviceInputSystem to handle browser created events\r\n        evt.pointerId = 1;\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n", "import type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _native: INative;\r\n\r\n/** @internal */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n", "import type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { IPointerEvent, IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport { IsNavigatorAvailable } from \"../Misc/domManagement\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { DeviceEventFactory } from \"./eventFactory\";\r\nimport { DeviceType, PointerInput } from \"./InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_KEYCODES = 255;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst MAX_POINTER_INPUTS = Object.keys(PointerInput).length / 2;\r\n\r\n/** @internal */\r\nexport class WebDeviceInputSystem implements IDeviceInputSystem {\r\n    // Private Members\r\n    private _inputs: Array<{ [deviceSlot: number]: Array<number> }> = [];\r\n    private _gamepads: Array<DeviceType>;\r\n    private _keyboardActive: boolean = false;\r\n    private _pointerActive: boolean = false;\r\n    private _elementToAttachTo: HTMLElement;\r\n    private _metaKeys: Array<number>;\r\n    private readonly _engine: AbstractEngine;\r\n    private readonly _usingSafari: boolean = Tools.IsSafari();\r\n    // Found solution for determining if MacOS is being used here:\r\n    // https://stackoverflow.com/questions/10527983/best-way-to-detect-mac-os-x-or-windows-computers-with-javascript-or-jquery\r\n    private readonly _usingMacOs: boolean = IsNavigatorAvailable() && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\r\n\r\n    private _onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void;\r\n    private _onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _keyboardBlurEvent = (evt: any) => {};\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMoveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerDownEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerUpEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerCancelTouch = (pointerId: number) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerLeaveEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerWheelEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerBlurEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _pointerMacOsChromeOutEvent = (evt: any) => {};\r\n    private _wheelEventName: string;\r\n    private _eventsAttached: boolean = false;\r\n\r\n    private _mouseId = -1;\r\n    private readonly _isUsingFirefox = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Firefox\") !== -1;\r\n    private readonly _isUsingChromium = IsNavigatorAvailable() && navigator.userAgent && navigator.userAgent.indexOf(\"Chrome\") !== -1;\r\n\r\n    // Array to store active Pointer ID values; prevents issues with negative pointerIds\r\n    private _activeTouchIds: Array<number>;\r\n    private _maxTouchPoints: number = 0;\r\n\r\n    private _pointerInputClearObserver: Nullable<Observer<AbstractEngine>> = null;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadConnectedEvent = (evt: any) => {};\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _gamepadDisconnectedEvent = (evt: any) => {};\r\n\r\n    private _eventPrefix: string;\r\n\r\n    /**\r\n     * Constructor for the WebDeviceInputSystem\r\n     * @param engine Engine to reference\r\n     * @param onDeviceConnected Callback to execute when device is connected\r\n     * @param onDeviceDisconnected Callback to execute when device is disconnected\r\n     * @param onInputChanged Callback to execute when input changes on device\r\n     */\r\n    constructor(\r\n        engine: AbstractEngine,\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._eventPrefix = Tools.GetPointerPrefix(engine);\r\n        this._engine = engine;\r\n\r\n        this._onDeviceConnected = onDeviceConnected;\r\n        this._onDeviceDisconnected = onDeviceDisconnected;\r\n        this._onInputChanged = onInputChanged;\r\n\r\n        // If we need a pointerId, set one for future use\r\n        this._mouseId = this._isUsingFirefox ? 0 : 1;\r\n\r\n        this._enableEvents();\r\n\r\n        if (this._usingMacOs) {\r\n            this._metaKeys = [];\r\n        }\r\n\r\n        // Set callback to enable event handler switching when inputElement changes\r\n        if (!this._engine._onEngineViewChanged) {\r\n            this._engine._onEngineViewChanged = () => {\r\n                this._enableEvents();\r\n            };\r\n        }\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        const device = this._inputs[deviceType][deviceSlot];\r\n\r\n        if (!device) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to find device ${DeviceType[deviceType]}`;\r\n        }\r\n\r\n        if (deviceType >= DeviceType.DualShock && deviceType <= DeviceType.DualSense) {\r\n            this._updateDevice(deviceType, deviceSlot, inputIndex);\r\n        }\r\n\r\n        const currentValue = device[inputIndex];\r\n        if (currentValue === undefined) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to find input ${inputIndex} for device ${DeviceType[deviceType]} in slot ${deviceSlot}`;\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            Tools.Warn(`Unable to provide information for PointerInput.Move.  Try using PointerInput.Horizontal or PointerInput.Vertical for move data.`);\r\n        }\r\n\r\n        return currentValue;\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        return this._inputs[deviceType] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the eventlisteners\r\n     */\r\n    public dispose(): void {\r\n        // Callbacks\r\n        this._onDeviceConnected = () => {};\r\n        this._onDeviceDisconnected = () => {};\r\n        this._onInputChanged = () => {};\r\n        delete this._engine._onEngineViewChanged;\r\n\r\n        if (this._elementToAttachTo) {\r\n            this._disableEvents();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable listening for user input events\r\n     */\r\n    private _enableEvents(): void {\r\n        const inputElement = this?._engine.getInputElement();\r\n        if (inputElement && (!this._eventsAttached || this._elementToAttachTo !== inputElement)) {\r\n            // Remove events before adding to avoid double events or simultaneous events on multiple canvases\r\n            this._disableEvents();\r\n\r\n            // If the inputs array has already been created, zero it out to before setting up events\r\n            if (this._inputs) {\r\n                for (const inputs of this._inputs) {\r\n                    if (inputs) {\r\n                        for (const deviceSlotKey in inputs) {\r\n                            const deviceSlot = +deviceSlotKey;\r\n                            const device = inputs[deviceSlot];\r\n                            if (device) {\r\n                                for (let inputIndex = 0; inputIndex < device.length; inputIndex++) {\r\n                                    device[inputIndex] = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._elementToAttachTo = inputElement;\r\n            // Set tab index for the inputElement to the engine's canvasTabIndex, if and only if the element's tab index is -1\r\n            this._elementToAttachTo.tabIndex = this._elementToAttachTo.tabIndex !== -1 ? this._elementToAttachTo.tabIndex : this._engine.canvasTabIndex;\r\n            this._handleKeyActions();\r\n            this._handlePointerActions();\r\n            this._handleGamepadActions();\r\n            this._eventsAttached = true;\r\n\r\n            // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\r\n            this._checkForConnectedDevices();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disable listening for user input events\r\n     */\r\n    private _disableEvents(): void {\r\n        if (this._elementToAttachTo) {\r\n            // Blur Events\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._keyboardBlurEvent);\r\n            this._elementToAttachTo.removeEventListener(\"blur\", this._pointerBlurEvent);\r\n\r\n            // Keyboard Events\r\n            this._elementToAttachTo.removeEventListener(\"keydown\", this._keyboardDownEvent);\r\n            this._elementToAttachTo.removeEventListener(\"keyup\", this._keyboardUpEvent);\r\n\r\n            // Pointer Events\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n            this._elementToAttachTo.removeEventListener(this._eventPrefix + \"leave\", this._pointerLeaveEvent);\r\n            this._elementToAttachTo.removeEventListener(this._wheelEventName, this._pointerWheelEvent);\r\n            if (this._usingMacOs && this._isUsingChromium) {\r\n                this._elementToAttachTo.removeEventListener(\"lostpointercapture\", this._pointerMacOsChromeOutEvent);\r\n            }\r\n\r\n            // Gamepad Events\r\n            window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n            window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n        }\r\n\r\n        if (this._pointerInputClearObserver) {\r\n            this._engine.onEndFrameObservable.remove(this._pointerInputClearObserver);\r\n        }\r\n\r\n        this._eventsAttached = false;\r\n    }\r\n\r\n    /**\r\n     * Checks for existing connections to devices and register them, if necessary\r\n     * Currently handles gamepads and mouse\r\n     */\r\n    private _checkForConnectedDevices(): void {\r\n        if (navigator.getGamepads) {\r\n            const gamepads = navigator.getGamepads();\r\n\r\n            for (const gamepad of gamepads) {\r\n                if (gamepad) {\r\n                    this._addGamePad(gamepad);\r\n                }\r\n            }\r\n        }\r\n\r\n        // If the device in use has mouse capabilities, pre-register mouse\r\n        if (typeof matchMedia === \"function\" && matchMedia(\"(pointer:fine)\").matches) {\r\n            // This will provide a dummy value for the cursor position and is expected to be overridden when the first mouse event happens.\r\n            // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\r\n            this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\r\n        }\r\n    }\r\n\r\n    // Private functions\r\n    /**\r\n     * Add a gamepad to the DeviceInputSystem\r\n     * @param gamepad A single DOM Gamepad object\r\n     */\r\n    private _addGamePad(gamepad: any): void {\r\n        const deviceType = this._getGamepadDeviceType(gamepad.id);\r\n        const deviceSlot = gamepad.index;\r\n\r\n        this._gamepads = this._gamepads || new Array<DeviceType>(gamepad.index + 1);\r\n        this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\r\n\r\n        this._gamepads[deviceSlot] = deviceType;\r\n    }\r\n\r\n    /**\r\n     * Add pointer device to DeviceInputSystem\r\n     * @param deviceType Type of Pointer to add\r\n     * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n     * @param currentX Current X at point of adding\r\n     * @param currentY Current Y at point of adding\r\n     */\r\n    private _addPointerDevice(deviceType: DeviceType, deviceSlot: number, currentX: number, currentY: number): void {\r\n        if (!this._pointerActive) {\r\n            this._pointerActive = true;\r\n        }\r\n        this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n        const pointer = this._inputs[deviceType][deviceSlot]; /* initialize our pointer position immediately after registration */\r\n        pointer[0] = currentX;\r\n        pointer[1] = currentY;\r\n    }\r\n\r\n    /**\r\n     * Add device and inputs to device array\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param numberOfInputs Number of input entries to create for given device\r\n     */\r\n    private _registerDevice(deviceType: DeviceType, deviceSlot: number, numberOfInputs: number): void {\r\n        if (deviceSlot === undefined) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `Unable to register device ${DeviceType[deviceType]} to undefined slot.`;\r\n        }\r\n\r\n        if (!this._inputs[deviceType]) {\r\n            this._inputs[deviceType] = {};\r\n        }\r\n\r\n        if (!this._inputs[deviceType][deviceSlot]) {\r\n            const device = new Array<number>(numberOfInputs);\r\n\r\n            device.fill(0);\r\n\r\n            this._inputs[deviceType][deviceSlot] = device;\r\n            this._onDeviceConnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Given a specific device name, remove that device from the device map\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     */\r\n    private _unregisterDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        if (this._inputs[deviceType][deviceSlot]) {\r\n            delete this._inputs[deviceType][deviceSlot];\r\n            this._onDeviceDisconnected(deviceType, deviceSlot);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from keyboard interaction\r\n     */\r\n    private _handleKeyActions(): void {\r\n        this._keyboardDownEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOs && evt.metaKey && evt.key !== \"Meta\") {\r\n                    if (!this._metaKeys.includes(evt.keyCode)) {\r\n                        this._metaKeys.push(evt.keyCode);\r\n                    }\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardUpEvent = (evt) => {\r\n            if (!this._keyboardActive) {\r\n                this._keyboardActive = true;\r\n                this._registerDevice(DeviceType.Keyboard, 0, MAX_KEYCODES);\r\n            }\r\n\r\n            const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n            if (kbKey) {\r\n                kbKey[evt.keyCode] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                deviceEvent.inputIndex = evt.keyCode;\r\n\r\n                if (this._usingMacOs && evt.key === \"Meta\" && this._metaKeys.length > 0) {\r\n                    for (const keyCode of this._metaKeys) {\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, keyCode, 0, this, this._elementToAttachTo);\r\n                        kbKey[keyCode] = 0;\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n\r\n                this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n            }\r\n        };\r\n\r\n        this._keyboardBlurEvent = () => {\r\n            if (this._keyboardActive) {\r\n                const kbKey = this._inputs[DeviceType.Keyboard][0];\r\n\r\n                for (let i = 0; i < kbKey.length; i++) {\r\n                    if (kbKey[i] !== 0) {\r\n                        kbKey[i] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Keyboard, 0, i, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Keyboard, 0, deviceEvent);\r\n                    }\r\n                }\r\n                if (this._usingMacOs) {\r\n                    this._metaKeys.splice(0, this._metaKeys.length);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._elementToAttachTo.addEventListener(\"keydown\", this._keyboardDownEvent);\r\n        this._elementToAttachTo.addEventListener(\"keyup\", this._keyboardUpEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._keyboardBlurEvent);\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from pointer interaction\r\n     */\r\n    private _handlePointerActions(): void {\r\n        // If maxTouchPoints is defined, use that value.  Otherwise, allow for a minimum for supported gestures like pinch\r\n        this._maxTouchPoints = (IsNavigatorAvailable() && navigator.maxTouchPoints) || 2;\r\n        if (!this._activeTouchIds) {\r\n            this._activeTouchIds = new Array<number>(this._maxTouchPoints);\r\n        }\r\n\r\n        for (let i = 0; i < this._maxTouchPoints; i++) {\r\n            this._activeTouchIds[i] = -1;\r\n        }\r\n\r\n        this._pointerMoveEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            // In the event that we're getting pointermove events from touch inputs that we aren't tracking,\r\n            // look for an available slot and retroactively connect it.\r\n            if (deviceType === DeviceType.Touch && deviceSlot === -1) {\r\n                const idx = this._activeTouchIds.indexOf(-1);\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                    // Because this is a \"new\" input, inform the connected callback\r\n                    this._onDeviceConnected(deviceType, deviceSlot);\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const deviceEvent = evt as IPointerEvent;\r\n                deviceEvent.inputIndex = PointerInput.Move;\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n\r\n                // For touches that aren't started with a down, we need to set the button state to 1\r\n                if (deviceType === DeviceType.Touch && pointer[PointerInput.LeftClick] === 0) {\r\n                    pointer[PointerInput.LeftClick] = 1;\r\n                }\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                // Lets Propagate the event for move with same position.\r\n                if (!this._usingSafari && evt.button !== -1) {\r\n                    deviceEvent.inputIndex = evt.button + 2;\r\n                    pointer[evt.button + 2] = pointer[evt.button + 2] ? 0 : 1; // Reverse state of button if evt.button has value\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerDownEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            let deviceSlot = deviceType === DeviceType.Mouse ? 0 : evt.pointerId;\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                // See if this pointerId is already using an existing slot\r\n                // (possible on some devices which raise the pointerMove event before the pointerDown event, e.g. when using a pen)\r\n                let idx = this._activeTouchIds.indexOf(evt.pointerId);\r\n                if (idx === -1) {\r\n                    // If the pointerId wasn't already using a slot, find an open one\r\n                    idx = this._activeTouchIds.indexOf(-1);\r\n                }\r\n\r\n                if (idx >= 0) {\r\n                    deviceSlot = idx;\r\n                    this._activeTouchIds[idx] = evt.pointerId;\r\n                } else {\r\n                    // We can't find an open slot to store new pointer so just return (can only support max number of touches)\r\n                    Tools.Warn(`Max number of touches exceeded.  Ignoring touches in excess of ${this._maxTouchPoints}`);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = {};\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\r\n            } else if (deviceType === DeviceType.Touch) {\r\n                this._onDeviceConnected(deviceType, deviceSlot);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                if (deviceType === DeviceType.Mouse) {\r\n                    // Mouse; Set pointerId if undefined\r\n                    if (evt.pointerId === undefined) {\r\n                        evt.pointerId = this._mouseId;\r\n                    }\r\n\r\n                    if (!document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(this._mouseId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Touch; Since touches are dynamically assigned, only set capture if we have an id\r\n                    if (evt.pointerId && !document.pointerLockElement) {\r\n                        try {\r\n                            this._elementToAttachTo.setPointerCapture(evt.pointerId);\r\n                        } catch (e) {\r\n                            // DO NOTHING\r\n                        }\r\n                    }\r\n                }\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[evt.button + 2] = 1;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = evt.button + 2;\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerUpEvent = (evt) => {\r\n            const deviceType = this._getPointerType(evt);\r\n            const deviceSlot = deviceType === DeviceType.Mouse ? 0 : this._activeTouchIds.indexOf(evt.pointerId);\r\n\r\n            if (deviceType === DeviceType.Touch) {\r\n                // If we're getting a pointerup event for a touch that isn't active, just return.\r\n                if (deviceSlot === -1) {\r\n                    return;\r\n                } else {\r\n                    this._activeTouchIds[deviceSlot] = -1;\r\n                }\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType]?.[deviceSlot];\r\n            let button = evt.button;\r\n            let shouldProcessPointerUp = pointer && pointer[button + 2] !== 0;\r\n\r\n            // Workaround for an issue in Firefox on MacOS only where the browser allows the user to change left button\r\n            // actions into right button actions by holding down control. If the user starts a drag with the control button\r\n            // down, then lifts control, then releases the mouse, we'll get mismatched up and down events (the down will be\r\n            // the right button, and the up will be the left button). In that specific case, where we get an up from a button\r\n            // which didn't have a corresponding down, and we are in Firefox on MacOS, we should process the up event as if it\r\n            // was from the other button.\r\n            // Ideally this would be fixed in Firefox so that if you start a drag with the control button down, then the button\r\n            // passed along to both pointer down and up would be the right button regardless of the order in which control and the\r\n            // mouse button were released.\r\n            // If Firefox makes a fix to ensure this is the case, this workaround can be removed.\r\n            // Relevant forum thread: https://forum.babylonjs.com/t/camera-pan-getting-stuck-in-firefox/57158\r\n            if (!shouldProcessPointerUp && this._isUsingFirefox && this._usingMacOs && pointer) {\r\n                // Try the other button (left or right button)\r\n                button = button === 2 ? 0 : 2;\r\n\r\n                shouldProcessPointerUp = pointer[button + 2] !== 0;\r\n            }\r\n\r\n            if (shouldProcessPointerUp) {\r\n                const previousHorizontal = pointer[PointerInput.Horizontal];\r\n                const previousVertical = pointer[PointerInput.Vertical];\r\n\r\n                pointer[PointerInput.Horizontal] = evt.clientX;\r\n                pointer[PointerInput.Vertical] = evt.clientY;\r\n                pointer[button + 2] = 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (previousHorizontal !== evt.clientX || previousVertical !== evt.clientY) {\r\n                    deviceEvent.inputIndex = PointerInput.Move;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n\r\n                // NOTE: The +2 used here to is because PointerInput has the same value progression for its mouse buttons as PointerEvent.button\r\n                // However, we have our X and Y values front-loaded to group together the touch inputs but not break this progression\r\n                // EG. ([X, Y, Left-click], Middle-click, etc...)\r\n                deviceEvent.inputIndex = button + 2;\r\n\r\n                if (deviceType === DeviceType.Mouse && this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                } else if (evt.pointerId && this._elementToAttachTo.hasPointerCapture?.(evt.pointerId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(evt.pointerId);\r\n                }\r\n\r\n                this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n\r\n                if (deviceType === DeviceType.Touch) {\r\n                    this._onDeviceDisconnected(deviceType, deviceSlot);\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerCancelTouch = (pointerId: number) => {\r\n            const deviceSlot = this._activeTouchIds.indexOf(pointerId);\r\n\r\n            // If we're getting a pointercancel event for a touch that isn't active, just return\r\n            if (deviceSlot === -1) {\r\n                return;\r\n            }\r\n\r\n            if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                this._elementToAttachTo.releasePointerCapture(pointerId);\r\n            }\r\n\r\n            this._inputs[DeviceType.Touch][deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n            const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Touch, deviceSlot, PointerInput.LeftClick, 0, this, this._elementToAttachTo, pointerId);\r\n\r\n            this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n            this._activeTouchIds[deviceSlot] = -1;\r\n            this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n        };\r\n\r\n        this._pointerCancelEvent = (evt) => {\r\n            if (evt.pointerType === \"mouse\") {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            } else {\r\n                this._pointerCancelTouch(evt.pointerId);\r\n            }\r\n        };\r\n\r\n        this._pointerLeaveEvent = (evt) => {\r\n            if (evt.pointerType === \"pen\") {\r\n                // If a pen leaves the hover range detectible by the hardware this event is raised and we need to cancel the operation\r\n                // Note that pen operations are treated as touch operations\r\n                this._pointerCancelTouch(evt.pointerId);\r\n            }\r\n        };\r\n\r\n        // Set Wheel Event Name, code originally from scene.inputManager\r\n        this._wheelEventName =\r\n            \"onwheel\" in document.createElement(\"div\")\r\n                ? \"wheel\" // Modern browsers support \"wheel\"\r\n                : (<any>document).onmousewheel !== undefined\r\n                  ? \"mousewheel\" // Webkit and IE support at least \"mousewheel\"\r\n                  : \"DOMMouseScroll\"; // let's assume that remaining browsers are older Firefox\r\n\r\n        // Code originally in scene.inputManager.ts\r\n        // Chrome reports warning in console if wheel listener doesn't set an explicit passive option.\r\n        // IE11 only supports captureEvent:boolean, not options:object, and it defaults to false.\r\n        // Feature detection technique copied from: https://github.com/github/eventlistener-polyfill (MIT license)\r\n        let passiveSupported = false;\r\n        const noop = function () {};\r\n\r\n        try {\r\n            const options = Object.defineProperty({}, \"passive\", {\r\n                get: function () {\r\n                    passiveSupported = true;\r\n                },\r\n            });\r\n\r\n            this._elementToAttachTo.addEventListener(\"test\", noop, options);\r\n            this._elementToAttachTo.removeEventListener(\"test\", noop, options);\r\n        } catch (e) {\r\n            /* */\r\n        }\r\n\r\n        this._pointerBlurEvent = () => {\r\n            // Handle mouse buttons\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n\r\n                if (this._mouseId >= 0 && this._elementToAttachTo.hasPointerCapture?.(this._mouseId)) {\r\n                    this._elementToAttachTo.releasePointerCapture(this._mouseId);\r\n                }\r\n\r\n                for (let inputIndex = PointerInput.LeftClick; inputIndex <= PointerInput.BrowserForward; inputIndex++) {\r\n                    if (pointer[inputIndex] === 1) {\r\n                        pointer[inputIndex] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(DeviceType.Mouse, 0, inputIndex, 0, this, this._elementToAttachTo);\r\n\r\n                        this._onInputChanged(DeviceType.Mouse, 0, deviceEvent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle Active Touches\r\n            if (this.isDeviceAvailable(DeviceType.Touch)) {\r\n                const pointer = this._inputs[DeviceType.Touch];\r\n\r\n                for (let deviceSlot = 0; deviceSlot < this._activeTouchIds.length; deviceSlot++) {\r\n                    const pointerId = this._activeTouchIds[deviceSlot];\r\n\r\n                    if (this._elementToAttachTo.hasPointerCapture?.(pointerId)) {\r\n                        this._elementToAttachTo.releasePointerCapture(pointerId);\r\n                    }\r\n\r\n                    if (pointerId !== -1 && pointer[deviceSlot]?.[PointerInput.LeftClick] === 1) {\r\n                        pointer[deviceSlot][PointerInput.LeftClick] = 0;\r\n\r\n                        const deviceEvent: IUIEvent = DeviceEventFactory.CreateDeviceEvent(\r\n                            DeviceType.Touch,\r\n                            deviceSlot,\r\n                            PointerInput.LeftClick,\r\n                            0,\r\n                            this,\r\n                            this._elementToAttachTo,\r\n                            pointerId\r\n                        );\r\n\r\n                        this._onInputChanged(DeviceType.Touch, deviceSlot, deviceEvent);\r\n\r\n                        this._activeTouchIds[deviceSlot] = -1;\r\n                        this._onDeviceDisconnected(DeviceType.Touch, deviceSlot);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this._pointerWheelEvent = (evt) => {\r\n            const deviceType = DeviceType.Mouse;\r\n            const deviceSlot = 0;\r\n\r\n            if (!this._inputs[deviceType]) {\r\n                this._inputs[deviceType] = [];\r\n            }\r\n\r\n            if (!this._inputs[deviceType][deviceSlot]) {\r\n                this._pointerActive = true;\r\n                this._registerDevice(deviceType, deviceSlot, MAX_POINTER_INPUTS);\r\n            }\r\n\r\n            const pointer = this._inputs[deviceType][deviceSlot];\r\n            if (pointer) {\r\n                pointer[PointerInput.MouseWheelX] = evt.deltaX || 0;\r\n                pointer[PointerInput.MouseWheelY] = evt.deltaY || evt.wheelDelta || 0;\r\n                pointer[PointerInput.MouseWheelZ] = evt.deltaZ || 0;\r\n\r\n                const deviceEvent = evt as IUIEvent;\r\n                // By default, there is no pointerId for mouse wheel events so we'll add one here\r\n                // This logic was originally in the InputManager but was added here to make the\r\n                // InputManager more platform-agnostic\r\n                if (evt.pointerId === undefined) {\r\n                    evt.pointerId = this._mouseId;\r\n                }\r\n\r\n                if (pointer[PointerInput.MouseWheelX] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelX;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelY] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelY;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n                if (pointer[PointerInput.MouseWheelZ] !== 0) {\r\n                    deviceEvent.inputIndex = PointerInput.MouseWheelZ;\r\n                    this._onInputChanged(deviceType, deviceSlot, deviceEvent);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Workaround for MacOS Chromium Browsers for lost pointer capture bug\r\n        if (this._usingMacOs && this._isUsingChromium) {\r\n            this._pointerMacOsChromeOutEvent = (evt) => {\r\n                if (evt.buttons > 1) {\r\n                    this._pointerCancelEvent(evt);\r\n                }\r\n            };\r\n            this._elementToAttachTo.addEventListener(\"lostpointercapture\", this._pointerMacOsChromeOutEvent);\r\n        }\r\n\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"move\", this._pointerMoveEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"down\", this._pointerDownEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"up\", this._pointerUpEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"cancel\", this._pointerCancelEvent);\r\n        this._elementToAttachTo.addEventListener(this._eventPrefix + \"leave\", this._pointerLeaveEvent);\r\n        this._elementToAttachTo.addEventListener(\"blur\", this._pointerBlurEvent);\r\n        this._elementToAttachTo.addEventListener(this._wheelEventName, this._pointerWheelEvent, passiveSupported ? { passive: false } : false);\r\n\r\n        // Since there's no up or down event for mouse wheel or delta x/y, clear mouse values at end of frame\r\n        this._pointerInputClearObserver = this._engine.onEndFrameObservable.add(() => {\r\n            if (this.isDeviceAvailable(DeviceType.Mouse)) {\r\n                const pointer = this._inputs[DeviceType.Mouse][0];\r\n                pointer[PointerInput.MouseWheelX] = 0;\r\n                pointer[PointerInput.MouseWheelY] = 0;\r\n                pointer[PointerInput.MouseWheelZ] = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle all actions that come from gamepad interaction\r\n     */\r\n    private _handleGamepadActions(): void {\r\n        this._gamepadConnectedEvent = (evt: any) => {\r\n            this._addGamePad(evt.gamepad);\r\n        };\r\n\r\n        this._gamepadDisconnectedEvent = (evt: any) => {\r\n            if (this._gamepads) {\r\n                const deviceType = this._getGamepadDeviceType(evt.gamepad.id);\r\n                const deviceSlot = evt.gamepad.index;\r\n\r\n                this._unregisterDevice(deviceType, deviceSlot);\r\n                delete this._gamepads[deviceSlot];\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\r\n        window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\r\n    }\r\n\r\n    /**\r\n     * Update all non-event based devices with each frame\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     */\r\n    private _updateDevice(deviceType: DeviceType, deviceSlot: number, inputIndex: number): void {\r\n        // Gamepads\r\n        const gp = navigator.getGamepads()[deviceSlot];\r\n\r\n        if (gp && deviceType === this._gamepads[deviceSlot]) {\r\n            const device = this._inputs[deviceType][deviceSlot];\r\n\r\n            if (inputIndex >= gp.buttons.length) {\r\n                device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\r\n            } else {\r\n                device[inputIndex] = gp.buttons[inputIndex].value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets DeviceType from the device name\r\n     * @param deviceName Name of Device from DeviceInputSystem\r\n     * @returns DeviceType enum value\r\n     */\r\n    private _getGamepadDeviceType(deviceName: string): DeviceType {\r\n        if (deviceName.indexOf(\"054c\") !== -1) {\r\n            // DualShock 4 Gamepad\r\n            return deviceName.indexOf(\"0ce6\") !== -1 ? DeviceType.DualSense : DeviceType.DualShock;\r\n        } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\r\n            // Xbox Gamepad\r\n            return DeviceType.Xbox;\r\n        } else if (deviceName.indexOf(\"057e\") !== -1) {\r\n            // Switch Gamepad\r\n            return DeviceType.Switch;\r\n        }\r\n\r\n        return DeviceType.Generic;\r\n    }\r\n\r\n    /**\r\n     * Get DeviceType from a given pointer/mouse/touch event.\r\n     * @param evt PointerEvent to evaluate\r\n     * @returns DeviceType interpreted from event\r\n     */\r\n    private _getPointerType(evt: any): DeviceType {\r\n        let deviceType = DeviceType.Mouse;\r\n\r\n        if (evt.pointerType === \"touch\" || evt.pointerType === \"pen\" || evt.touches) {\r\n            deviceType = DeviceType.Touch;\r\n        }\r\n\r\n        return deviceType;\r\n    }\r\n}\r\n", "import type { IDisposable } from \"../scene\";\r\nimport { DeviceType } from \"./InputDevices/deviceEnums\";\r\nimport type { Observable } from \"../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./InputDevices/deviceSource\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../Events/deviceInputEvents\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../Engines/abstractEngine\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface AbstractEngine {\r\n        /** @internal */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @internal */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Public Members\r\n    public readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: AbstractEngine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n", "import { DeviceType } from \"./deviceEnums\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceSource } from \"./deviceSource\";\r\nimport type { IObservableManager, DeviceSourceType } from \"../internalDeviceSourceManager\";\r\nimport { InternalDeviceSourceManager } from \"../internalDeviceSourceManager\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport type { IKeyboardEvent, IPointerEvent, IUIEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable, IObservableManager {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Private Members\r\n    private _engine: AbstractEngine;\r\n    private _onDisposeObserver: Nullable<Observer<AbstractEngine>>;\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType - Type of Device\r\n     * @param deviceSlot - Slot or ID of device\r\n     * @returns DeviceSource\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot] as DeviceSource<T>;\r\n    }\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType - Type of Device\r\n     * @returns All available DeviceSources of a given type\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        // If device type hasn't had any devices connected yet, return empty array.\r\n        if (!this._devices[deviceType]) {\r\n            return [];\r\n        }\r\n        return this._devices[deviceType].filter((source) => {\r\n            return !!source;\r\n        }) as Array<DeviceSource<T>>;\r\n    }\r\n\r\n    /**\r\n     * Default constructor\r\n     * @param engine - Used to get canvas (if applicable)\r\n     */\r\n    constructor(engine: AbstractEngine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array(numberOfDeviceTypes);\r\n        this._firstDevice = new Array(numberOfDeviceTypes);\r\n        this._engine = engine;\r\n\r\n        if (!this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\r\n        }\r\n        this._engine._deviceSourceManager._refCount++;\r\n\r\n        // Observables\r\n        this.onDeviceConnectedObservable = new Observable((observer) => {\r\n            for (const devices of this._devices) {\r\n                if (devices) {\r\n                    for (const device of devices) {\r\n                        if (device) {\r\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device as DeviceSourceType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.onDeviceDisconnectedObservable = new Observable();\r\n\r\n        this._engine._deviceSourceManager.registerManager(this);\r\n\r\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceSourceManager\r\n     */\r\n    public dispose(): void {\r\n        // Null out observable refs\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n\r\n        if (this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager.unregisterManager(this);\r\n            if (--this._engine._deviceSourceManager._refCount < 1) {\r\n                this._engine._deviceSourceManager.dispose();\r\n                delete this._engine._deviceSourceManager;\r\n            }\r\n        }\r\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\r\n    }\r\n\r\n    // Hidden Functions\r\n    /**\r\n     * @param deviceSource - Source to add\r\n     * @internal\r\n     */\r\n    public _addDevice(deviceSource: DeviceSourceType): void {\r\n        if (!this._devices[deviceSource.deviceType]) {\r\n            this._devices[deviceSource.deviceType] = [];\r\n        }\r\n\r\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\r\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\r\n            this._updateFirstDevices(deviceSource.deviceType);\r\n        }\r\n\r\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @internal\r\n     */\r\n    public _removeDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        const deviceSource = this._devices[deviceType]?.[deviceSlot]; // Grab local reference to use before removing from devices\r\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource as DeviceSourceType);\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @param eventData - Event\r\n     * @internal\r\n     */\r\n    public _onInputChanged<T extends DeviceType>(deviceType: T, deviceSlot: number, eventData: IUIEvent): void {\r\n        this._devices[deviceType]?.[deviceSlot]?.onInputChangedObservable.notifyObservers(eventData as IKeyboardEvent | IWheelEvent | IPointerEvent);\r\n    }\r\n\r\n    // Private Functions\r\n    private _updateFirstDevices(type: DeviceType): void {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualSense:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic: {\r\n                delete this._firstDevice[type];\r\n                // eslint-disable-next-line no-case-declarations\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable, TextureSize, FrameGraphContext } from \"core/index\";\r\n\r\n/**\r\n * Represents a texture handle in the frame graph.\r\n */\r\nexport type FrameGraphTextureHandle = number;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer color texture.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const backbufferColorTextureHandle: FrameGraphTextureHandle = 0;\r\n\r\n/**\r\n * Represents a texture handle for the backbuffer depth/stencil texture.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const backbufferDepthStencilTextureHandle: FrameGraphTextureHandle = 1;\r\n\r\n/**\r\n * Options used to describe a texture to be created in the frame graph.\r\n */\r\nexport type FrameGraphTextureOptions = {\r\n    /** Specifies if mipmaps must be created for the textures (default: false) */\r\n    createMipMaps?: boolean;\r\n\r\n    /** Defines sample count (default: 1) */\r\n    samples?: number;\r\n\r\n    /** Defines the types of the textures */\r\n    types?: number[];\r\n\r\n    /** Defines the format of the textures (RED, RG, RGB, RGBA, ALPHA...) */\r\n    formats?: number[];\r\n\r\n    /** Defines if sRGB format should be used for each of texture */\r\n    useSRGBBuffers?: boolean[];\r\n\r\n    /** Defines the creation flags of the textures (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg) */\r\n    creationFlags?: number[];\r\n\r\n    /** Defines the names of the textures (used for debugging purpose) */\r\n    labels?: string[];\r\n};\r\n\r\n/**\r\n * Options used to create a texture / list of textures in the frame graph.\r\n */\r\nexport type FrameGraphTextureCreationOptions = {\r\n    /** Size of the textures. If sizeIsPercentage is true, these are percentages relative to the screen size (100 = 100%) */\r\n    size: TextureSize;\r\n\r\n    /** Options used to create the textures */\r\n    options: FrameGraphTextureOptions;\r\n\r\n    /** If true, indicates that \"size\" is percentages relative to the screen size */\r\n    sizeIsPercentage: boolean;\r\n\r\n    /** Indicates that the texture is a history texture (default: false) */\r\n    isHistoryTexture?: boolean;\r\n};\r\n\r\n/**\r\n * Represents a texture description in the frame graph.\r\n * This is basically the same thing than FrameGraphTextureCreationOptions, but the size is never in percentage and always in pixels.\r\n */\r\nexport type FrameGraphTextureDescription = {\r\n    /** Size of the texture */\r\n    size: { width: number; height: number };\r\n\r\n    /** Options used to create the texture */\r\n    options: FrameGraphTextureOptions;\r\n};\r\n\r\n/**\r\n * Defines a pass in the frame graph.\r\n */\r\nexport interface IFrameGraphPass {\r\n    /**\r\n     * The name of the pass.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * Whether the pass is disabled.\r\n     */\r\n    disabled: boolean;\r\n\r\n    /**\r\n     * Sets the function to execute when the pass is executed\r\n     * @param func The function to execute when the pass is executed\r\n     */\r\n    setExecuteFunc(func: (context: FrameGraphContext) => void): void;\r\n\r\n    /** @internal */\r\n    _execute(): void;\r\n\r\n    /** @internal */\r\n    _isValid(): Nullable<string>;\r\n}\r\n", "import type { Nullable, FrameGraphContext, IFrameGraphPass, FrameGraphTask } from \"core/index\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class FrameGraphPass<T extends FrameGraphContext> implements IFrameGraphPass {\r\n    private _executeFunc: (context: T) => void;\r\n\r\n    public disabled = false;\r\n\r\n    constructor(\r\n        public name: string,\r\n        protected readonly _parentTask: FrameGraphTask,\r\n        protected readonly _context: T\r\n    ) {}\r\n\r\n    public setExecuteFunc(func: (context: T) => void) {\r\n        this._executeFunc = func;\r\n    }\r\n\r\n    public _execute() {\r\n        if (!this.disabled) {\r\n            this._executeFunc(this._context);\r\n        }\r\n    }\r\n\r\n    public _isValid(): Nullable<string> {\r\n        return this._executeFunc !== undefined ? null : \"Execute function is not set (call setExecuteFunc to set it)\";\r\n    }\r\n}\r\n", "import type { Nullable, AbstractEngine, IFrameGraphPass, FrameGraphContext, FrameGraphObjectList, FrameGraphTask } from \"core/index\";\r\nimport { FrameGraphPass } from \"./pass\";\r\n\r\n/**\r\n * Cull pass used to filter objects that are not visible.\r\n */\r\nexport class FrameGraphCullPass extends FrameGraphPass<FrameGraphContext> {\r\n    protected readonly _engine: AbstractEngine;\r\n    protected _objectList: FrameGraphObjectList;\r\n\r\n    /**\r\n     * Checks if a pass is a cull pass.\r\n     * @param pass The pass to check.\r\n     * @returns True if the pass is a cull pass, else false.\r\n     */\r\n    public static IsCullPass(pass: IFrameGraphPass): pass is FrameGraphCullPass {\r\n        return (pass as FrameGraphCullPass).setObjectList !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the object list used by the cull pass.\r\n     */\r\n    public get objectList(): FrameGraphObjectList {\r\n        return this._objectList;\r\n    }\r\n\r\n    /**\r\n     * Sets the object list to use for culling.\r\n     * @param objectList The object list to use for culling.\r\n     */\r\n    public setObjectList(objectList: FrameGraphObjectList) {\r\n        this._objectList = objectList;\r\n    }\r\n\r\n    /** @internal */\r\n    constructor(name: string, parentTask: FrameGraphTask, context: FrameGraphContext, engine: AbstractEngine) {\r\n        super(name, parentTask, context);\r\n        this._engine = engine;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isValid(): Nullable<string> {\r\n        const errMsg = super._isValid();\r\n        return errMsg ? errMsg : this._objectList !== undefined ? null : \"Object list is not set (call setObjectList to set it)\";\r\n    }\r\n}\r\n", "import type { Nullable, FrameGraphRenderContext, AbstractEngine, IFrameGraphPass, FrameGraphTextureHandle, FrameGraphTask, FrameGraphRenderTarget } from \"core/index\";\r\nimport { FrameGraphPass } from \"./pass\";\r\n\r\n/**\r\n * Render pass used to render objects.\r\n */\r\nexport class FrameGraphRenderPass extends FrameGraphPass<FrameGraphRenderContext> {\r\n    protected readonly _engine: AbstractEngine;\r\n    protected _renderTarget: FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined;\r\n    protected _renderTargetDepth: FrameGraphTextureHandle | undefined;\r\n    protected _frameGraphRenderTarget: FrameGraphRenderTarget | undefined;\r\n    protected _dependencies: Set<FrameGraphTextureHandle> = new Set();\r\n\r\n    /**\r\n     * Checks if a pass is a render pass.\r\n     * @param pass The pass to check.\r\n     * @returns True if the pass is a render pass, else false.\r\n     */\r\n    public static IsRenderPass(pass: IFrameGraphPass): pass is FrameGraphRenderPass {\r\n        return (pass as FrameGraphRenderPass).setRenderTarget !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target(s) used by the render pass.\r\n     */\r\n    public get renderTarget(): FrameGraphTextureHandle | FrameGraphTextureHandle[] | undefined {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the render target depth used by the render pass.\r\n     */\r\n    public get renderTargetDepth(): FrameGraphTextureHandle | undefined {\r\n        return this._renderTargetDepth;\r\n    }\r\n\r\n    /**\r\n     * If true, the depth attachment will be read-only (may allow some optimizations in WebGPU)\r\n     */\r\n    public depthReadOnly = false;\r\n\r\n    /**\r\n     * If true, the stencil attachment will be read-only (may allow some optimizations in WebGPU)\r\n     */\r\n    public stencilReadOnly = false;\r\n\r\n    /** @internal */\r\n    constructor(name: string, parentTask: FrameGraphTask, context: FrameGraphRenderContext, engine: AbstractEngine) {\r\n        super(name, parentTask, context);\r\n        this._engine = engine;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target(s) to use for rendering.\r\n     * @param renderTargetHandle The render target to use for rendering, or an array of render targets to use for multi render target rendering.\r\n     */\r\n    public setRenderTarget(renderTargetHandle?: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        this._renderTarget = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Sets the render target depth to use for rendering.\r\n     * @param renderTargetHandle The render target depth to use for rendering.\r\n     */\r\n    public setRenderTargetDepth(renderTargetHandle?: FrameGraphTextureHandle) {\r\n        this._renderTargetDepth = renderTargetHandle;\r\n    }\r\n\r\n    /**\r\n     * Adds dependencies to the render pass.\r\n     * @param dependencies The dependencies to add.\r\n     */\r\n    public addDependencies(dependencies?: FrameGraphTextureHandle | FrameGraphTextureHandle[]) {\r\n        if (dependencies === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (Array.isArray(dependencies)) {\r\n            for (const dependency of dependencies) {\r\n                this._dependencies.add(dependency);\r\n            }\r\n        } else {\r\n            this._dependencies.add(dependencies);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Collects the dependencies of the render pass.\r\n     * @param dependencies The set of dependencies to update.\r\n     */\r\n    public collectDependencies(dependencies: Set<FrameGraphTextureHandle>): void {\r\n        const iterator = this._dependencies.keys();\r\n        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n            dependencies.add(key.value);\r\n        }\r\n\r\n        if (this._renderTarget !== undefined) {\r\n            if (Array.isArray(this._renderTarget)) {\r\n                for (const handle of this._renderTarget) {\r\n                    if (handle !== undefined) {\r\n                        dependencies.add(handle);\r\n                    }\r\n                }\r\n            } else {\r\n                dependencies.add(this._renderTarget);\r\n            }\r\n        }\r\n\r\n        if (this._renderTargetDepth !== undefined) {\r\n            dependencies.add(this._renderTargetDepth);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _execute() {\r\n        this._frameGraphRenderTarget =\r\n            this._frameGraphRenderTarget || this._context.createRenderTarget(this.name, this._renderTarget, this._renderTargetDepth, this.depthReadOnly, this.stencilReadOnly);\r\n\r\n        this._context.bindRenderTarget(this._frameGraphRenderTarget, `frame graph render pass - ${this.name}`);\r\n\r\n        super._execute();\r\n\r\n        this._context._flushDebugMessages();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isValid(): Nullable<string> {\r\n        const errMsg = super._isValid();\r\n        return errMsg\r\n            ? errMsg\r\n            : this._renderTarget !== undefined || this.renderTargetDepth !== undefined\r\n              ? null\r\n              : \"Render target and render target depth cannot both be undefined.\";\r\n    }\r\n}\r\n", "import type { FrameGraph, FrameGraphObjectList, IFrameGraphPass, Nullable, FrameGraphTextureHandle, InternalTexture, FrameGraphRenderContext } from \"core/index\";\r\nimport { FrameGraphCullPass } from \"./Passes/cullPass\";\r\nimport { FrameGraphRenderPass } from \"./Passes/renderPass\";\r\nimport { Observable } from \"core/Misc/observable\";\r\n\r\n/**\r\n * Represents a task in a frame graph.\r\n * @experimental\r\n */\r\nexport abstract class FrameGraphTask {\r\n    protected readonly _frameGraph: FrameGraph;\r\n\r\n    private readonly _passes: IFrameGraphPass[] = [];\r\n    private readonly _passesDisabled: IFrameGraphPass[] = [];\r\n\r\n    // Note: must be a getter/setter even if there's no specific processing, otherwise inherited classes can't make it a getter/setter!\r\n    // Same thing for the disabled property\r\n    protected _name: string;\r\n\r\n    /**\r\n     * The name of the task.\r\n     */\r\n    public get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public set name(value: string) {\r\n        this._name = value;\r\n    }\r\n\r\n    protected _disabled = false;\r\n\r\n    /**\r\n     * Whether the task is disabled.\r\n     */\r\n    public get disabled() {\r\n        return this._disabled;\r\n    }\r\n\r\n    public set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the render passes of the task.\r\n     */\r\n    public get passes() {\r\n        return this._passes;\r\n    }\r\n\r\n    /**\r\n     * Gets the disabled render passes of the task.\r\n     */\r\n    public get passesDisabled() {\r\n        return this._passesDisabled;\r\n    }\r\n\r\n    /**\r\n     * The (texture) dependencies of the task (optional).\r\n     */\r\n    public dependencies?: Set<FrameGraphTextureHandle>;\r\n\r\n    /**\r\n     * Records the task in the frame graph. Use this function to add content (render passes, ...) to the task.\r\n     */\r\n    public abstract record(): void;\r\n\r\n    /**\r\n     * An observable that is triggered after the textures have been allocated.\r\n     */\r\n    public onTexturesAllocatedObservable: Observable<FrameGraphRenderContext> = new Observable();\r\n\r\n    /**\r\n     * Checks if the task is ready to be executed.\r\n     * @returns True if the task is ready to be executed, else false.\r\n     */\r\n    public isReady(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the task.\r\n     */\r\n    public dispose() {\r\n        this._reset();\r\n        this.onTexturesAllocatedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Constructs a new frame graph task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph) {\r\n        this.name = name;\r\n        this._frameGraph = frameGraph;\r\n        this._reset();\r\n    }\r\n\r\n    /** @internal */\r\n    public _reset() {\r\n        this._passes.length = 0;\r\n        this._passesDisabled.length = 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public _addPass(pass: IFrameGraphPass, disabled: boolean) {\r\n        if (disabled) {\r\n            this._passesDisabled.push(pass);\r\n        } else {\r\n            this._passes.push(pass);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkTask() {\r\n        let outputTexture: Nullable<Nullable<InternalTexture>[]> = null;\r\n        let outputDepthTexture: Nullable<InternalTexture> = null;\r\n        let outputObjectList: FrameGraphObjectList | undefined;\r\n\r\n        for (const pass of this._passes) {\r\n            const errMsg = pass._isValid();\r\n            if (errMsg) {\r\n                throw new Error(`Pass \"${pass.name}\" is not valid. ${errMsg}`);\r\n            }\r\n            if (FrameGraphRenderPass.IsRenderPass(pass)) {\r\n                const handles = Array.isArray(pass.renderTarget) ? pass.renderTarget : [pass.renderTarget];\r\n                outputTexture = [];\r\n                for (const handle of handles) {\r\n                    if (handle !== undefined) {\r\n                        outputTexture.push(this._frameGraph.textureManager.getTextureFromHandle(handle));\r\n                    }\r\n                }\r\n                outputDepthTexture = pass.renderTargetDepth !== undefined ? this._frameGraph.textureManager.getTextureFromHandle(pass.renderTargetDepth) : null;\r\n            } else if (FrameGraphCullPass.IsCullPass(pass)) {\r\n                outputObjectList = pass.objectList;\r\n            }\r\n        }\r\n\r\n        let disabledOutputTexture: Nullable<Nullable<InternalTexture>[]> = null;\r\n        let disabledOutputTextureHandle: (FrameGraphTextureHandle | undefined)[] = [];\r\n        let disabledOutputDepthTexture: Nullable<InternalTexture> = null;\r\n        let disabledOutputObjectList: FrameGraphObjectList | undefined;\r\n\r\n        for (const pass of this._passesDisabled) {\r\n            const errMsg = pass._isValid();\r\n            if (errMsg) {\r\n                throw new Error(`Pass \"${pass.name}\" is not valid. ${errMsg}`);\r\n            }\r\n            if (FrameGraphRenderPass.IsRenderPass(pass)) {\r\n                const handles = Array.isArray(pass.renderTarget) ? pass.renderTarget : [pass.renderTarget];\r\n                disabledOutputTexture = [];\r\n                for (const handle of handles) {\r\n                    if (handle !== undefined) {\r\n                        disabledOutputTexture.push(this._frameGraph.textureManager.getTextureFromHandle(handle));\r\n                    }\r\n                }\r\n                disabledOutputTextureHandle = handles;\r\n                disabledOutputDepthTexture = pass.renderTargetDepth !== undefined ? this._frameGraph.textureManager.getTextureFromHandle(pass.renderTargetDepth) : null;\r\n            } else if (FrameGraphCullPass.IsCullPass(pass)) {\r\n                disabledOutputObjectList = pass.objectList;\r\n            }\r\n        }\r\n\r\n        if (this._passesDisabled.length > 0) {\r\n            if (!this._checkSameRenderTarget(outputTexture, disabledOutputTexture)) {\r\n                let ok = true;\r\n                for (const handle of disabledOutputTextureHandle) {\r\n                    if (handle !== undefined && !this._frameGraph.textureManager.isHistoryTexture(handle)) {\r\n                        ok = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    throw new Error(`The output texture of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n                }\r\n            }\r\n            if (outputDepthTexture !== disabledOutputDepthTexture) {\r\n                throw new Error(`The output depth texture of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n            }\r\n            if (outputObjectList !== disabledOutputObjectList) {\r\n                throw new Error(`The output object list of the task \"${this.name}\" is different when it is enabled or disabled.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _getPasses(): IFrameGraphPass[] {\r\n        return this.disabled && this._passesDisabled.length > 0 ? this._passesDisabled : this._passes;\r\n    }\r\n\r\n    private _checkSameRenderTarget(src: Nullable<Nullable<InternalTexture>[]>, dst: Nullable<Nullable<InternalTexture>[]>) {\r\n        if (src === null || dst === null) {\r\n            return src === dst;\r\n        }\r\n\r\n        if (src.length !== dst.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < src.length; i++) {\r\n            if (src[i] !== dst[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import type { Nullable, AbstractEngine, EffectWrapperCreationOptions, Vector2, Effect } from \"core/index\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n/**\r\n * Post process used to apply a blur effect\r\n */\r\nexport class ThinBlurPostProcess extends EffectWrapper {\r\n    /**\r\n     * The vertex shader url\r\n     */\r\n    public static readonly VertexUrl = \"kernelBlur\";\r\n\r\n    /**\r\n     * The fragment shader url\r\n     */\r\n    public static readonly FragmentUrl = \"kernelBlur\";\r\n\r\n    /**\r\n     * The list of uniforms used by the effect\r\n     */\r\n    public static readonly Uniforms = [\"delta\", \"direction\"];\r\n\r\n    /**\r\n     * The list of samplers used by the effect\r\n     */\r\n    public static readonly Samplers = [\"circleOfConfusionSampler\"];\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(Promise.all([import(\"../ShadersWGSL/kernelBlur.fragment\"), import(\"../ShadersWGSL/kernelBlur.vertex\")]));\r\n        } else {\r\n            list.push(Promise.all([import(\"../Shaders/kernelBlur.fragment\"), import(\"../Shaders/kernelBlur.vertex\")]));\r\n        }\r\n    }\r\n\r\n    protected _kernel: number;\r\n    protected _idealKernel: number;\r\n    protected _packedFloat: boolean = false;\r\n    private _staticDefines: string = \"\";\r\n\r\n    /**\r\n     * Constructs a new blur post process\r\n     * @param name Name of the effect\r\n     * @param engine Engine to use to render the effect. If not provided, the last created engine will be used\r\n     * @param direction Direction in which to apply the blur\r\n     * @param kernel Kernel size of the blur\r\n     * @param options Options to configure the effect\r\n     */\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, direction?: Vector2, kernel?: number, options?: EffectWrapperCreationOptions) {\r\n        const blockCompilationFinal = !!options?.blockCompilation;\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinBlurPostProcess.FragmentUrl,\r\n            uniforms: ThinBlurPostProcess.Uniforms,\r\n            samplers: ThinBlurPostProcess.Samplers,\r\n            vertexUrl: ThinBlurPostProcess.VertexUrl,\r\n            blockCompilation: true,\r\n        });\r\n\r\n        this._staticDefines = options ? (Array.isArray(options.defines) ? options.defines.join(\"\\n\") : options.defines || \"\") : \"\";\r\n\r\n        this.options.blockCompilation = blockCompilationFinal;\r\n\r\n        if (direction !== undefined) {\r\n            this.direction = direction;\r\n        }\r\n        if (kernel !== undefined) {\r\n            this.kernel = kernel;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Width of the texture to apply the blur on\r\n     */\r\n    public textureWidth: number = 0;\r\n\r\n    /**\r\n     * Height of the texture to apply the blur on\r\n     */\r\n    public textureHeight: number = 0;\r\n\r\n    /** The direction in which to blur the image. */\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    public set kernel(v: number) {\r\n        if (this._idealKernel === v) {\r\n            return;\r\n        }\r\n\r\n        v = Math.max(v, 1);\r\n        this._idealKernel = v;\r\n        this._kernel = this._nearestBestKernel(v);\r\n        if (!this.options.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._idealKernel;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the blur needs to unpack/repack floats\r\n     */\r\n    public set packedFloat(v: boolean) {\r\n        if (this._packedFloat === v) {\r\n            return;\r\n        }\r\n        this._packedFloat = v;\r\n        if (!this.options.blockCompilation) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._packedFloat;\r\n    }\r\n\r\n    public override bind(noDefaultBindings = false) {\r\n        super.bind(noDefaultBindings);\r\n        this._drawWrapper.effect!.setFloat2(\"delta\", (1 / this.textureWidth) * this.direction.x, (1 / this.textureHeight) * this.direction.y);\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateParameters(onCompiled?: (effect: Effect) => void, onError?: (effect: Effect, errors: string) => void): void {\r\n        // Generate sampling offsets and weights\r\n        const n = this._kernel;\r\n        const centerIndex = (n - 1) / 2;\r\n\r\n        // Generate Gaussian sampling weights over kernel\r\n        let offsets = [];\r\n        let weights = [];\r\n        let totalWeight = 0;\r\n        for (let i = 0; i < n; i++) {\r\n            const u = i / (n - 1);\r\n            const w = this._gaussianWeight(u * 2.0 - 1);\r\n            offsets[i] = i - centerIndex;\r\n            weights[i] = w;\r\n            totalWeight += w;\r\n        }\r\n\r\n        // Normalize weights\r\n        for (let i = 0; i < weights.length; i++) {\r\n            weights[i] /= totalWeight;\r\n        }\r\n\r\n        // Optimize: combine samples to take advantage of hardware linear sampling\r\n        // Walk from left to center, combining pairs (symmetrically)\r\n        const linearSamplingWeights = [];\r\n        const linearSamplingOffsets = [];\r\n\r\n        const linearSamplingMap = [];\r\n\r\n        for (let i = 0; i <= centerIndex; i += 2) {\r\n            const j = Math.min(i + 1, Math.floor(centerIndex));\r\n\r\n            const singleCenterSample = i === j;\r\n\r\n            if (singleCenterSample) {\r\n                linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n            } else {\r\n                const sharedCell = j === centerIndex;\r\n\r\n                const weightLinear = weights[i] + weights[j] * (sharedCell ? 0.5 : 1);\r\n                const offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\r\n\r\n                if (offsetLinear === 0) {\r\n                    linearSamplingMap.push({ o: offsets[i], w: weights[i] });\r\n                    linearSamplingMap.push({ o: offsets[i + 1], w: weights[i + 1] });\r\n                } else {\r\n                    linearSamplingMap.push({ o: offsetLinear, w: weightLinear });\r\n                    linearSamplingMap.push({ o: -offsetLinear, w: weightLinear });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < linearSamplingMap.length; i++) {\r\n            linearSamplingOffsets[i] = linearSamplingMap[i].o;\r\n            linearSamplingWeights[i] = linearSamplingMap[i].w;\r\n        }\r\n\r\n        // Replace with optimized\r\n        offsets = linearSamplingOffsets;\r\n        weights = linearSamplingWeights;\r\n\r\n        // Generate shaders\r\n        const maxVaryingRows = this.options.engine.getCaps().maxVaryingVectors - (this.options.shaderLanguage === ShaderLanguage.WGSL ? 1 : 0); // Because of the additional builtins\r\n        const freeVaryingVec2 = Math.max(maxVaryingRows, 0) - 1; // Because of sampleCenter\r\n\r\n        let varyingCount = Math.min(offsets.length, freeVaryingVec2);\r\n\r\n        let defines = \"\";\r\n        defines += this._staticDefines;\r\n\r\n        // The DOF fragment should ignore the center pixel when looping as it is handled manually in the fragment shader.\r\n        if (this._staticDefines.indexOf(\"DOF\") != -1) {\r\n            defines += `#define CENTER_WEIGHT ${this._glslFloat(weights[varyingCount - 1])}\\n`;\r\n            varyingCount--;\r\n        }\r\n\r\n        for (let i = 0; i < varyingCount; i++) {\r\n            defines += `#define KERNEL_OFFSET${i} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_WEIGHT${i} ${this._glslFloat(weights[i])}\\n`;\r\n        }\r\n\r\n        let depCount = 0;\r\n        for (let i = freeVaryingVec2; i < offsets.length; i++) {\r\n            defines += `#define KERNEL_DEP_OFFSET${depCount} ${this._glslFloat(offsets[i])}\\n`;\r\n            defines += `#define KERNEL_DEP_WEIGHT${depCount} ${this._glslFloat(weights[i])}\\n`;\r\n            depCount++;\r\n        }\r\n\r\n        if (this.packedFloat) {\r\n            defines += `#define PACKEDFLOAT 1`;\r\n        }\r\n\r\n        this.options.blockCompilation = false;\r\n\r\n        this.updateEffect(\r\n            defines,\r\n            null,\r\n            null,\r\n            {\r\n                varyingCount: varyingCount,\r\n                depCount: depCount,\r\n            },\r\n            onCompiled,\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n     * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n     * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n     * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n     * The gaps between physical kernels are compensated for in the weighting of the samples\r\n     * @param idealKernel Ideal blur kernel.\r\n     * @returns Nearest best kernel.\r\n     */\r\n    protected _nearestBestKernel(idealKernel: number): number {\r\n        const v = Math.round(idealKernel);\r\n        for (const k of [v, v - 1, v + 1, v - 2, v + 2]) {\r\n            if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\r\n                return Math.max(k, 3);\r\n            }\r\n        }\r\n        return Math.max(v, 3);\r\n    }\r\n\r\n    /**\r\n     * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n     * @param x The point on the Gaussian distribution to sample.\r\n     * @returns the value of the Gaussian function at x.\r\n     */\r\n    protected _gaussianWeight(x: number): number {\r\n        //reference: Engines/ImageProcessingBlur.cpp #dcc760\r\n        // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\r\n        // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\r\n        // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\r\n        // truncated at around 1.3% of peak strength.\r\n\r\n        //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\r\n        const sigma = 1 / 3;\r\n        const denominator = Math.sqrt(2.0 * Math.PI) * sigma;\r\n        const exponent = -((x * x) / (2.0 * sigma * sigma));\r\n        const weight = (1.0 / denominator) * Math.exp(exponent);\r\n        return weight;\r\n    }\r\n\r\n    /**\r\n     * Generates a string that can be used as a floating point number in GLSL.\r\n     * @param x Value to print.\r\n     * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n     * @returns GLSL float string.\r\n     */\r\n    protected _glslFloat(x: number, decimalFigures = 8) {\r\n        return x.toFixed(decimalFigures).replace(/0+$/, \"\");\r\n    }\r\n}\r\n", "import type { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, serializeAsVector2 } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\nimport { ThinBlurPostProcess } from \"./thinBlurPostProcess\";\r\n\r\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a gaussian blur in two passes.\r\n */\r\nexport class BlurPostProcess extends PostProcess {\r\n    /** The direction in which to blur the image. */\r\n    @serializeAsVector2()\r\n    public get direction() {\r\n        return this._effectWrapper.direction;\r\n    }\r\n\r\n    public set direction(value: Vector2) {\r\n        this._effectWrapper.direction = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\r\n    @serialize()\r\n    public set kernel(v: number) {\r\n        this._effectWrapper.kernel = v;\r\n    }\r\n\r\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\r\n    public get kernel(): number {\r\n        return this._effectWrapper.kernel;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not the blur needs to unpack/repack floats\r\n     */\r\n    @serialize()\r\n    public set packedFloat(v: boolean) {\r\n        this._effectWrapper.packedFloat = v;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not the blur is unpacking/repacking floats\r\n     */\r\n    public get packedFloat(): boolean {\r\n        return this._effectWrapper.packedFloat;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlurPostProcess\" string\r\n     */\r\n    public override getClassName(): string {\r\n        return \"BlurPostProcess\";\r\n    }\r\n\r\n    protected override _effectWrapper: ThinBlurPostProcess;\r\n\r\n    /**\r\n     * Creates a new instance BlurPostProcess\r\n     * @param name The name of the effect.\r\n     * @param direction The direction in which to blur the image.\r\n     * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param defines\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     * @param textureFormat Format of textures used when performing the post process. (default: TEXTUREFORMAT_RGBA)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        direction: Vector2,\r\n        kernel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode: number = Texture.BILINEAR_SAMPLINGMODE,\r\n        engine?: AbstractEngine,\r\n        reusable?: boolean,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        defines = \"\",\r\n        blockCompilation = false,\r\n        textureFormat = Constants.TEXTUREFORMAT_RGBA\r\n    ) {\r\n        const blockCompilationFinal = typeof options === \"number\" ? blockCompilation : !!options.blockCompilation;\r\n        const localOptions = {\r\n            uniforms: ThinBlurPostProcess.Uniforms,\r\n            samplers: ThinBlurPostProcess.Samplers,\r\n            size: typeof options === \"number\" ? options : undefined,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            textureType,\r\n            vertexUrl: ThinBlurPostProcess.VertexUrl,\r\n            indexParameters: { varyingCount: 0, depCount: 0 },\r\n            textureFormat,\r\n            defines,\r\n            ...(options as PostProcessOptions),\r\n            blockCompilation: true,\r\n        };\r\n\r\n        super(name, ThinBlurPostProcess.FragmentUrl, {\r\n            effectWrapper: typeof options === \"number\" || !options.effectWrapper ? new ThinBlurPostProcess(name, engine, undefined, undefined, localOptions) : undefined,\r\n            ...localOptions,\r\n        });\r\n\r\n        this._effectWrapper.options.blockCompilation = blockCompilationFinal;\r\n\r\n        this.direction = direction;\r\n        this.onApplyObservable.add(() => {\r\n            this._effectWrapper.textureWidth = this._outputTexture ? this._outputTexture.width : this.width;\r\n            this._effectWrapper.textureHeight = this._outputTexture ? this._outputTexture.height : this.height;\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    public override updateEffect(\r\n        _defines: Nullable<string> = null,\r\n        _uniforms: Nullable<string[]> = null,\r\n        _samplers: Nullable<string[]> = null,\r\n        _indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void\r\n    ) {\r\n        this._effectWrapper._updateParameters(onCompiled, onError);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static override _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlurPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlurPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.direction,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    undefined,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlurPostProcess\", BlurPostProcess);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\nimport type { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<string> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<string>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n", "import type { SmartArray } from \"../../Misc/smartArray\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport { Light } from \"../../Lights/light\";\r\nimport type { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { PostProcess } from \"../../PostProcesses/postProcess\";\r\nimport { BlurPostProcess } from \"../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { EffectFallbacks } from \"../../Materials/effectFallbacks\";\r\nimport { RenderingManager } from \"../../Rendering/renderingManager\";\r\nimport { DrawWrapper } from \"../../Materials/drawWrapper\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\n\r\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"../../Materials/clipPlaneMaterialHelper\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport {\r\n    BindMorphTargetParameters,\r\n    BindSceneUniformBuffer,\r\n    PrepareDefinesAndAttributesForMorphTargets,\r\n    PushAttributesForInstances,\r\n} from \"../../Materials/materialHelper.functions\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\n\r\n/**\r\n * Defines the options associated with the creation of a custom shader for a shadow generator.\r\n */\r\nexport interface ICustomShaderOptions {\r\n    /**\r\n     * Gets or sets the custom shader name to use\r\n     */\r\n    shaderName: string;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes?: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms?: string[];\r\n\r\n    /**\r\n     * The list of sampler names used in the shader\r\n     */\r\n    samplers?: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines?: string[];\r\n}\r\n\r\n/**\r\n * Interface to implement to create a shadow generator compatible with BJS.\r\n */\r\nexport interface IShadowGenerator {\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    id: string;\r\n\r\n    /**\r\n     * Specifies if the `ShadowGenerator` should be serialized, `true` to skip serialization.\r\n     * Note a `ShadowGenerator` will not be serialized if its light has `doNotSerialize=true`\r\n     */\r\n    doNotSerialize?: boolean;\r\n\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    getShadowMap(): Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean;\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    prepareDefines(defines: MaterialDefines, lightIndex: number): void;\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * It implies the uniforms available on the materials are the standard BJS ones.\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    bindShadowLight(lightIndex: string, effect: Effect): void;\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    getTransformMatrix(): Matrix;\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    recreateShadowMap(): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void;\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void>;\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    serialize(): any;\r\n\r\n    /**\r\n     * Disposes the Shadow map and related Textures and effects.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * Default implementation IShadowGenerator.\r\n * This is the main object responsible of generating shadows in the framework.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n * @see [WebGL](https://playground.babylonjs.com/#IFYDRS#0)\r\n * @see [WebGPU](https://playground.babylonjs.com/#IFYDRS#835)\r\n */\r\nexport class ShadowGenerator implements IShadowGenerator {\r\n    /**\r\n     * Name of the shadow generator class\r\n     */\r\n    public static CLASSNAME = \"ShadowGenerator\";\r\n\r\n    /**\r\n     * Force all the shadow generators to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    /**\r\n     * Shadow generator mode None: no filtering applied.\r\n     */\r\n    public static readonly FILTER_NONE = 0;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_EXPONENTIALSHADOWMAP = 1;\r\n    /**\r\n     * Shadow generator mode Poisson Sampling: Percentage Closer Filtering.\r\n     * (Multiple Tap around evenly distributed around the pixel are used to evaluate the shadow strength)\r\n     */\r\n    public static readonly FILTER_POISSONSAMPLING = 2;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLUREXPONENTIALSHADOWMAP = 3;\r\n    /**\r\n     * Shadow generator mode ESM: Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_CLOSEEXPONENTIALSHADOWMAP = 4;\r\n    /**\r\n     * Shadow generator mode ESM: Blurred Exponential Shadow Mapping using the inverse of the exponential preventing\r\n     * edge artifacts on steep falloff.\r\n     * (http://developer.download.nvidia.com/presentations/2008/GDC/GDC08_SoftShadowMapping.pdf)\r\n     */\r\n    public static readonly FILTER_BLURCLOSEEXPONENTIALSHADOWMAP = 5;\r\n    /**\r\n     * Shadow generator mode PCF: Percentage Closer Filtering\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * (https://developer.nvidia.com/gpugems/GPUGems/gpugems_ch11.html)\r\n     */\r\n    public static readonly FILTER_PCF = 6;\r\n    /**\r\n     * Shadow generator mode PCSS: Percentage Closering Soft Shadow.\r\n     * benefits from Webgl 2 shadow samplers. Fallback to Poisson Sampling in Webgl 1\r\n     * Contact Hardening\r\n     */\r\n    public static readonly FILTER_PCSS = 7;\r\n\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Highest Quality.\r\n     *\r\n     * Execute PCF on a 5*5 kernel improving a lot the shadow aliasing artifacts.\r\n     *\r\n     * Execute PCSS with 32 taps blocker search and 64 taps PCF.\r\n     */\r\n    public static readonly QUALITY_HIGH = 0;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * Good tradeoff for quality/perf cross devices\r\n     *\r\n     * Execute PCF on a 3*3 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 32 taps PCF.\r\n     */\r\n    public static readonly QUALITY_MEDIUM = 1;\r\n    /**\r\n     * Reserved for PCF and PCSS\r\n     * The lowest quality but the fastest.\r\n     *\r\n     * Execute PCF on a 1*1 kernel.\r\n     *\r\n     * Execute PCSS with 16 taps blocker search and 16 taps PCF.\r\n     */\r\n    public static readonly QUALITY_LOW = 2;\r\n\r\n    /**\r\n     * Defines the default alpha cutoff value used for transparent alpha tested materials.\r\n     */\r\n    public static DEFAULT_ALPHA_CUTOFF = 0.5;\r\n\r\n    /** Gets or set the id of the shadow generator. It will be the one from the light if not defined */\r\n    public id: string;\r\n\r\n    /** Gets or sets the custom shader name to use */\r\n    public customShaderOptions: ICustomShaderOptions;\r\n\r\n    /** Gets or sets a custom function to allow/disallow rendering a sub mesh in the shadow map */\r\n    public customAllowRendering: (subMesh: SubMesh) => boolean;\r\n\r\n    /**\r\n     * Observable triggered before the shadow is rendered. Can be used to update internal effect state\r\n     */\r\n    public onBeforeShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered after the shadow is rendered. Can be used to restore internal effect state\r\n     */\r\n    public onAfterShadowMapRenderObservable = new Observable<Effect>();\r\n\r\n    /**\r\n     * Observable triggered before a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onBeforeShadowMapRenderObservable)\r\n     */\r\n    public onBeforeShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    /**\r\n     * Observable triggered after a mesh is rendered in the shadow map.\r\n     * Can be used to update internal effect state (that you can get from the onAfterShadowMapRenderObservable)\r\n     */\r\n    public onAfterShadowMapRenderMeshObservable = new Observable<Mesh>();\r\n\r\n    /**\r\n     * Specifies if the `ShadowGenerator` should be serialized, `true` to skip serialization.\r\n     * Note a `ShadowGenerator` will not be serialized if its light has `doNotSerialize=true`\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    protected _bias = 0.00005;\r\n    /**\r\n     * Gets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public get bias(): number {\r\n        return this._bias;\r\n    }\r\n    /**\r\n     * Sets the bias: offset applied on the depth preventing acnea (in light direction).\r\n     */\r\n    public set bias(bias: number) {\r\n        this._bias = bias;\r\n    }\r\n\r\n    protected _normalBias = 0;\r\n    /**\r\n     * Gets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public get normalBias(): number {\r\n        return this._normalBias;\r\n    }\r\n    /**\r\n     * Sets the normalBias: offset applied on the depth preventing acnea (along side the normal direction and proportional to the light/normal angle).\r\n     */\r\n    public set normalBias(normalBias: number) {\r\n        this._normalBias = normalBias;\r\n    }\r\n\r\n    protected _blurBoxOffset = 1;\r\n    /**\r\n     * Gets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public get blurBoxOffset(): number {\r\n        return this._blurBoxOffset;\r\n    }\r\n    /**\r\n     * Sets the blur box offset: offset applied during the blur pass.\r\n     * Only useful if useKernelBlur = false\r\n     */\r\n    public set blurBoxOffset(value: number) {\r\n        if (this._blurBoxOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurBoxOffset = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurScale = 2;\r\n    /**\r\n     * Gets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public get blurScale(): number {\r\n        return this._blurScale;\r\n    }\r\n    /**\r\n     * Sets the blur scale: scale of the blurred texture compared to the main shadow map.\r\n     * 2 means half of the size.\r\n     */\r\n    public set blurScale(value: number) {\r\n        if (this._blurScale === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurScale = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _blurKernel = 1;\r\n    /**\r\n     * Gets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public get blurKernel(): number {\r\n        return this._blurKernel;\r\n    }\r\n    /**\r\n     * Sets the blur kernel: kernel size of the blur pass.\r\n     * Only useful if useKernelBlur = true\r\n     */\r\n    public set blurKernel(value: number) {\r\n        if (this._blurKernel === value) {\r\n            return;\r\n        }\r\n\r\n        this._blurKernel = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _useKernelBlur = false;\r\n    /**\r\n     * Gets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public get useKernelBlur(): boolean {\r\n        return this._useKernelBlur;\r\n    }\r\n    /**\r\n     * Sets whether the blur pass is a kernel blur (if true) or box blur.\r\n     * Only useful in filtered mode (useBlurExponentialShadowMap...)\r\n     */\r\n    public set useKernelBlur(value: boolean) {\r\n        if (this._useKernelBlur === value) {\r\n            return;\r\n        }\r\n\r\n        this._useKernelBlur = value;\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _depthScale: number;\r\n    /**\r\n     * Gets the depth scale used in ESM mode.\r\n     */\r\n    public get depthScale(): number {\r\n        return this._depthScale !== undefined ? this._depthScale : this._light.getDepthScale();\r\n    }\r\n    /**\r\n     * Sets the depth scale used in ESM mode.\r\n     * This can override the scale stored on the light.\r\n     */\r\n    public set depthScale(value: number) {\r\n        this._depthScale = value;\r\n    }\r\n\r\n    protected _validateFilter(filter: number): number {\r\n        return filter;\r\n    }\r\n\r\n    protected _filter = ShadowGenerator.FILTER_NONE;\r\n    /**\r\n     * Gets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public get filter(): number {\r\n        return this._filter;\r\n    }\r\n    /**\r\n     * Sets the current mode of the shadow generator (normal, PCF, ESM...).\r\n     * The returned value is a number equal to one of the available mode defined in ShadowMap.FILTER_x like _FILTER_NONE\r\n     */\r\n    public set filter(value: number) {\r\n        value = this._validateFilter(value);\r\n\r\n        // Blurring the cubemap is going to be too expensive. Reverting to unblurred version\r\n        if (this._light.needCube()) {\r\n            if (value === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n                this.useExponentialShadowMap = true;\r\n                return;\r\n            } else if (value === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n                this.useCloseExponentialShadowMap = true;\r\n                return;\r\n            }\r\n            // PCF on cubemap would also be expensive\r\n            else if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Weblg1 fallback for PCF.\r\n        if (value === ShadowGenerator.FILTER_PCF || value === ShadowGenerator.FILTER_PCSS) {\r\n            if (!this._scene.getEngine()._features.supportShadowSamplers) {\r\n                this.usePoissonSampling = true;\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this._filter === value) {\r\n            return;\r\n        }\r\n\r\n        this._filter = value;\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to Poisson Sampling.\r\n     */\r\n    public get usePoissonSampling(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_POISSONSAMPLING;\r\n    }\r\n    /**\r\n     * Sets the current filter to Poisson Sampling.\r\n     */\r\n    public set usePoissonSampling(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_POISSONSAMPLING);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_POISSONSAMPLING) {\r\n            return;\r\n        }\r\n\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to ESM.\r\n     */\r\n    public get useExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter is to ESM.\r\n     */\r\n    public set useExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_EXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered ESM.\r\n     */\r\n    public get useBlurExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Gets if the current filter is set to filtered  ESM.\r\n     */\r\n    public set useBlurExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLUREXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_CLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public get useBlurCloseExponentialShadowMap(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP;\r\n    }\r\n    /**\r\n     * Sets the current filter to filtered \"close ESM\" (using the inverse of the\r\n     * exponential to prevent steep falloff artifacts).\r\n     */\r\n    public set useBlurCloseExponentialShadowMap(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_BLURCLOSEEXPONENTIALSHADOWMAP) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public get usePercentageCloserFiltering(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCF;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCF\" (percentage closer filtering).\r\n     */\r\n    public set usePercentageCloserFiltering(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCF);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCF) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _filteringQuality = ShadowGenerator.QUALITY_HIGH;\r\n    /**\r\n     * Gets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public get filteringQuality(): number {\r\n        return this._filteringQuality;\r\n    }\r\n    /**\r\n     * Sets the PCF or PCSS Quality.\r\n     * Only valid if usePercentageCloserFiltering or usePercentageCloserFiltering is true.\r\n     */\r\n    public set filteringQuality(filteringQuality: number) {\r\n        if (this._filteringQuality === filteringQuality) {\r\n            return;\r\n        }\r\n\r\n        this._filteringQuality = filteringQuality;\r\n\r\n        this._disposeBlurPostProcesses();\r\n        this._applyFilterValues();\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets if the current filter is set to \"PCSS\" (contact hardening).\r\n     */\r\n    public get useContactHardeningShadow(): boolean {\r\n        return this.filter === ShadowGenerator.FILTER_PCSS;\r\n    }\r\n    /**\r\n     * Sets the current filter to \"PCSS\" (contact hardening).\r\n     */\r\n    public set useContactHardeningShadow(value: boolean) {\r\n        const filter = this._validateFilter(ShadowGenerator.FILTER_PCSS);\r\n\r\n        if (!value && this.filter !== ShadowGenerator.FILTER_PCSS) {\r\n            return;\r\n        }\r\n        this.filter = value ? filter : ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    protected _contactHardeningLightSizeUVRatio = 0.1;\r\n    /**\r\n     * Gets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public get contactHardeningLightSizeUVRatio(): number {\r\n        return this._contactHardeningLightSizeUVRatio;\r\n    }\r\n    /**\r\n     * Sets the Light Size (in shadow map uv unit) used in PCSS to determine the blocker search area and the penumbra size.\r\n     * Using a ratio helps keeping shape stability independently of the map size.\r\n     *\r\n     * It does not account for the light projection as it was having too much\r\n     * instability during the light setup or during light position changes.\r\n     *\r\n     * Only valid if useContactHardeningShadow is true.\r\n     */\r\n    public set contactHardeningLightSizeUVRatio(contactHardeningLightSizeUVRatio: number) {\r\n        this._contactHardeningLightSizeUVRatio = contactHardeningLightSizeUVRatio;\r\n    }\r\n\r\n    protected _darkness = 0;\r\n\r\n    /** Gets or sets the actual darkness of a shadow */\r\n    public get darkness() {\r\n        return this._darkness;\r\n    }\r\n\r\n    public set darkness(value: number) {\r\n        this.setDarkness(value);\r\n    }\r\n\r\n    /**\r\n     * Returns the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * 0 means strongest and 1 would means no shadow.\r\n     * @returns the darkness.\r\n     */\r\n    public getDarkness(): number {\r\n        return this._darkness;\r\n    }\r\n    /**\r\n     * Sets the darkness value (float). This can only decrease the actual darkness of a shadow.\r\n     * @param darkness The darkness value 0 means strongest and 1 would means no shadow.\r\n     * @returns the shadow generator allowing fluent coding.\r\n     */\r\n    public setDarkness(darkness: number): ShadowGenerator {\r\n        if (darkness >= 1.0) {\r\n            this._darkness = 1.0;\r\n        } else if (darkness <= 0.0) {\r\n            this._darkness = 0.0;\r\n        } else {\r\n            this._darkness = darkness;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected _transparencyShadow = false;\r\n\r\n    /** Gets or sets the ability to have transparent shadow */\r\n    public get transparencyShadow() {\r\n        return this._transparencyShadow;\r\n    }\r\n\r\n    public set transparencyShadow(value: boolean) {\r\n        this.setTransparencyShadow(value);\r\n    }\r\n\r\n    /**\r\n     * Sets the ability to have transparent shadow (boolean).\r\n     * @param transparent True if transparent else False\r\n     * @returns the shadow generator allowing fluent coding\r\n     */\r\n    public setTransparencyShadow(transparent: boolean): ShadowGenerator {\r\n        this._transparencyShadow = transparent;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Enables or disables shadows with varying strength based on the transparency\r\n     * When it is enabled, the strength of the shadow is taken equal to mesh.visibility\r\n     * If you enabled an alpha texture on your material, the alpha value red from the texture is also combined to compute the strength:\r\n     *          mesh.visibility * alphaTexture.a\r\n     * The texture used is the diffuse by default, but it can be set to the opacity by setting useOpacityTextureForTransparentShadow\r\n     * Note that by definition transparencyShadow must be set to true for enableSoftTransparentShadow to work!\r\n     */\r\n    public enableSoftTransparentShadow: boolean = false;\r\n\r\n    /**\r\n     * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\r\n     */\r\n    public useOpacityTextureForTransparentShadow: boolean = false;\r\n\r\n    protected _shadowMap: Nullable<RenderTargetTexture>;\r\n    protected _shadowMap2: Nullable<RenderTargetTexture>;\r\n\r\n    /**\r\n     * Gets the main RTT containing the shadow map (usually storing depth from the light point of view).\r\n     * @returns The render target texture if present otherwise, null\r\n     */\r\n    public getShadowMap(): Nullable<RenderTargetTexture> {\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the RTT used during rendering (can be a blurred version of the shadow map or the shadow map itself).\r\n     * @returns The render target texture if the shadow map is present otherwise, null\r\n     */\r\n    public getShadowMapForRendering(): Nullable<RenderTargetTexture> {\r\n        if (this._shadowMap2) {\r\n            return this._shadowMap2;\r\n        }\r\n\r\n        return this._shadowMap;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"ShadowGenerator\"\r\n     */\r\n    public getClassName(): string {\r\n        return ShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    /**\r\n     * Helper function to add a mesh and its descendants to the list of shadow casters.\r\n     * @param mesh Mesh to add\r\n     * @param includeDescendants boolean indicating if the descendants should be added. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public addShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap) {\r\n            return this;\r\n        }\r\n\r\n        if (!this._shadowMap.renderList) {\r\n            this._shadowMap.renderList = [];\r\n        }\r\n\r\n        if (this._shadowMap.renderList.indexOf(mesh) === -1) {\r\n            this._shadowMap.renderList.push(mesh);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const childMesh of mesh.getChildMeshes()) {\r\n                if (this._shadowMap.renderList.indexOf(childMesh) === -1) {\r\n                    this._shadowMap.renderList.push(childMesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Helper function to remove a mesh and its descendants from the list of shadow casters\r\n     * @param mesh Mesh to remove\r\n     * @param includeDescendants boolean indicating if the descendants should be removed. Default to true\r\n     * @returns the Shadow Generator itself\r\n     */\r\n    public removeShadowCaster(mesh: AbstractMesh, includeDescendants = true): ShadowGenerator {\r\n        if (!this._shadowMap || !this._shadowMap.renderList) {\r\n            return this;\r\n        }\r\n\r\n        const index = this._shadowMap.renderList.indexOf(mesh);\r\n\r\n        if (index !== -1) {\r\n            this._shadowMap.renderList.splice(index, 1);\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of mesh.getChildren()) {\r\n                this.removeShadowCaster(<any>child);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Controls the extent to which the shadows fade out at the edge of the frustum\r\n     */\r\n    public frustumEdgeFalloff = 0;\r\n\r\n    protected _light: IShadowLight;\r\n    /**\r\n     * Returns the associated light object.\r\n     * @returns the light generating the shadow\r\n     */\r\n    public getLight(): IShadowLight {\r\n        return this._light;\r\n    }\r\n\r\n    /** Shader language used by the generator */\r\n    protected _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    /**\r\n     * Gets the shader language used in this generator.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /**\r\n     * If true the shadow map is generated by rendering the back face of the mesh instead of the front face.\r\n     * This can help with self-shadowing as the geometry making up the back of objects is slightly offset.\r\n     * It might on the other hand introduce peter panning.\r\n     */\r\n    public forceBackFacesOnly = false;\r\n\r\n    protected _camera: Nullable<Camera>;\r\n\r\n    protected _getCamera() {\r\n        return this._camera ?? this._scene.activeCamera;\r\n    }\r\n\r\n    protected _scene: Scene;\r\n    protected _useRedTextureType: boolean;\r\n    protected _lightDirection = Vector3.Zero();\r\n\r\n    protected _viewMatrix = Matrix.Zero();\r\n    protected _projectionMatrix = Matrix.Zero();\r\n    protected _transformMatrix = Matrix.Zero();\r\n    protected _cachedPosition: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDirection: Vector3 = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    protected _cachedDefines: string;\r\n    protected _currentRenderId: number;\r\n    protected _boxBlurPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurXPostprocess: Nullable<PostProcess>;\r\n    protected _kernelBlurYPostprocess: Nullable<PostProcess>;\r\n    protected _blurPostProcesses: PostProcess[];\r\n    protected _mapSize: number;\r\n    protected _currentFaceIndex = 0;\r\n    protected _currentFaceIndexCache = 0;\r\n    protected _textureType: number;\r\n    protected _defaultTextureMatrix = Matrix.Identity();\r\n    protected _storedUniqueId: Nullable<number>;\r\n    protected _useUBO: boolean;\r\n    protected _sceneUBOs: UniformBuffer[];\r\n    protected _currentSceneUBO: UniformBuffer;\r\n    protected _opacityTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Gets or sets the size of the texture what stores the shadows\r\n     */\r\n    public get mapSize(): number {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public set mapSize(size: number) {\r\n        this._mapSize = size;\r\n        this._light._markMeshesAsLightDirty();\r\n        this.recreateShadowMap();\r\n    }\r\n\r\n    /**\r\n     * Creates a ShadowGenerator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The light object generating the shadows.\r\n     * @param usefullFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\r\n     * @param useRedTextureType Forces the generator to use a Red instead of a RGBA type for the shadow map texture format (default: false)\r\n     * @param forceGLSL defines a boolean indicating if the shader must be compiled in GLSL even if we are using WebGPU\r\n     */\r\n    constructor(mapSize: number, light: IShadowLight, usefullFloatFirst?: boolean, camera?: Nullable<Camera>, useRedTextureType?: boolean, forceGLSL = false) {\r\n        this._mapSize = mapSize;\r\n        this._light = light;\r\n        this._scene = light.getScene();\r\n        this._camera = camera ?? null;\r\n        this._useRedTextureType = !!useRedTextureType;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._initShaderSourceAsync(forceGLSL);\r\n\r\n        let shadowGenerators = light._shadowGenerators;\r\n        if (!shadowGenerators) {\r\n            shadowGenerators = light._shadowGenerators = new Map();\r\n        }\r\n        shadowGenerators.set(this._camera, this);\r\n        this.id = light.id;\r\n        this._useUBO = this._scene.getEngine().supportsUniformBuffers;\r\n\r\n        if (this._useUBO) {\r\n            this._sceneUBOs = [];\r\n            this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for Shadow Generator (light \"${this._light.name}\")`));\r\n        }\r\n\r\n        ShadowGenerator._SceneComponentInitialization(this._scene);\r\n\r\n        // Texture type fallback from float to int if not supported.\r\n        const caps = this._scene.getEngine().getCaps();\r\n\r\n        if (!usefullFloatFirst) {\r\n            if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n            }\r\n        } else {\r\n            if (caps.textureFloatRender && caps.textureFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_FLOAT;\r\n            } else if (caps.textureHalfFloatRender && caps.textureHalfFloatLinearFiltering) {\r\n                this._textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n            } else {\r\n                this._textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n            }\r\n        }\r\n\r\n        this._initializeGenerator();\r\n        this._applyFilterValues();\r\n    }\r\n\r\n    protected _initializeGenerator(): void {\r\n        this._light._markMeshesAsLightDirty();\r\n        this._initializeShadowMap();\r\n    }\r\n\r\n    protected _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        this._shadowMap?.dispose();\r\n        if (engine._features.supportDepthStencilTexture) {\r\n            this._shadowMap = new RenderTargetTexture(\r\n                this._light.name + \"_shadowMap\",\r\n                this._mapSize,\r\n                this._scene,\r\n                false,\r\n                true,\r\n                this._textureType,\r\n                this._light.needCube(),\r\n                undefined,\r\n                false,\r\n                false,\r\n                undefined,\r\n                this._useRedTextureType ? Constants.TEXTUREFORMAT_RED : Constants.TEXTUREFORMAT_RGBA\r\n            );\r\n            this._shadowMap.createDepthStencilTexture(\r\n                engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS,\r\n                true,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                `DepthStencilForShadowGenerator-${this._light.name}`\r\n            );\r\n        } else {\r\n            this._shadowMap = new RenderTargetTexture(this._light.name + \"_shadowMap\", this._mapSize, this._scene, false, true, this._textureType, this._light.needCube());\r\n        }\r\n        this._shadowMap.noPrePassRenderer = true;\r\n    }\r\n\r\n    protected _initializeShadowMap(): void {\r\n        this._createTargetRenderTexture();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._shadowMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._shadowMap.anisotropicFilteringLevel = 1;\r\n        this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        this._shadowMap.renderParticles = false;\r\n        this._shadowMap.ignoreCameraViewport = true;\r\n        if (this._storedUniqueId) {\r\n            this._shadowMap.uniqueId = this._storedUniqueId;\r\n        }\r\n\r\n        // Custom render function.\r\n        this._shadowMap.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ) => this._renderForShadowMap(opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes);\r\n\r\n        // When preWarm is false, forces the mesh is ready function to true as we are double checking it\r\n        // in the custom render function. Also it prevents side effects and useless\r\n        // shader variations in DEPTHPREPASS mode.\r\n        this._shadowMap.customIsReadyFunction = (mesh: AbstractMesh, _refreshRate: number, preWarm?: boolean): boolean => {\r\n            if (!preWarm || !mesh.subMeshes) {\r\n                return true;\r\n            }\r\n\r\n            let isReady = true;\r\n            for (const subMesh of mesh.subMeshes) {\r\n                const renderingMesh = subMesh.getRenderingMesh();\r\n                const scene = this._scene;\r\n                const engine = scene.getEngine();\r\n                const material = subMesh.getMaterial();\r\n\r\n                if (!material || subMesh.verticesCount === 0 || (this.customAllowRendering && !this.customAllowRendering(subMesh))) {\r\n                    continue;\r\n                }\r\n\r\n                const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                if (batch.mustReturn) {\r\n                    continue;\r\n                }\r\n\r\n                const hardwareInstancedRendering =\r\n                    engine.getCaps().instancedArrays &&\r\n                    ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n                const isTransparent = material.needAlphaBlendingForMesh(renderingMesh);\r\n\r\n                isReady = this.isReady(subMesh, hardwareInstancedRendering, isTransparent) && isReady;\r\n            }\r\n\r\n            return isReady;\r\n        };\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n        });\r\n\r\n        // Record Face Index before render.\r\n        this._shadowMap.onBeforeRenderObservable.add((faceIndex: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[0]);\r\n            }\r\n            this._currentFaceIndex = faceIndex;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this.getTransformMatrix(); // generate the view/projection matrix\r\n            this._scene.setTransformMatrix(this._viewMatrix, this._projectionMatrix);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        // Blur if required after render.\r\n        this._shadowMap.onAfterUnbindObservable.add(() => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._currentSceneUBO);\r\n            }\r\n            this._scene.updateTransformMatrix(); // restore the view/projection matrices of the active camera\r\n\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(true);\r\n            }\r\n            if (!this.useBlurExponentialShadowMap && !this.useBlurCloseExponentialShadowMap) {\r\n                engine._debugPopGroup?.(1);\r\n                return;\r\n            }\r\n            const shadowMap = this.getShadowMapForRendering();\r\n\r\n            if (shadowMap) {\r\n                this._scene.postProcessManager.directRender(this._blurPostProcesses, shadowMap.renderTarget, true);\r\n                engine.unBindFramebuffer(shadowMap.renderTarget!, true);\r\n            }\r\n\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        // Clear according to the chosen filter.\r\n        const clearZero = new Color4(0, 0, 0, 0);\r\n        const clearOne = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this._shadowMap.onClearObservable.add((engine) => {\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.clear(clearOne, false, true, false);\r\n            } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n                engine.clear(clearZero, true, true, false);\r\n            } else {\r\n                engine.clear(clearOne, true, true, false);\r\n            }\r\n        });\r\n\r\n        // Recreate on resize.\r\n        this._shadowMap.onResizeObservable.add((rtt) => {\r\n            this._storedUniqueId = this._shadowMap!.uniqueId;\r\n            this._mapSize = rtt.getRenderSize();\r\n            this._light._markMeshesAsLightDirty();\r\n            this.recreateShadowMap();\r\n        });\r\n\r\n        // Ensures rendering groupids do not erase the depth buffer\r\n        // or we would lose the shadows information.\r\n        for (let i = RenderingManager.MIN_RENDERINGGROUPS; i < RenderingManager.MAX_RENDERINGGROUPS; i++) {\r\n            this._shadowMap.setRenderingAutoClearDepthStencil(i, false);\r\n        }\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n    private async _initShaderSourceAsync(forceGLSL = false) {\r\n        const engine = this._scene.getEngine();\r\n\r\n        if (engine.isWebGPU && !forceGLSL && !ShadowGenerator.ForceGLSL) {\r\n            this._shaderLanguage = ShaderLanguage.WGSL;\r\n\r\n            await Promise.all([\r\n                import(\"../../ShadersWGSL/shadowMap.fragment\"),\r\n                import(\"../../ShadersWGSL/shadowMap.vertex\"),\r\n                import(\"../../ShadersWGSL/depthBoxBlur.fragment\"),\r\n                import(\"../../ShadersWGSL/ShadersInclude/shadowMapFragmentSoftTransparentShadow\"),\r\n            ]);\r\n        } else {\r\n            await Promise.all([\r\n                import(\"../../Shaders/shadowMap.fragment\"),\r\n                import(\"../../Shaders/shadowMap.vertex\"),\r\n                import(\"../../Shaders/depthBoxBlur.fragment\"),\r\n                import(\"../../Shaders/ShadersInclude/shadowMapFragmentSoftTransparentShadow\"),\r\n            ]);\r\n        }\r\n\r\n        this._shadersLoaded = true;\r\n    }\r\n\r\n    protected _initializeBlurRTTAndPostProcesses(): void {\r\n        const engine = this._scene.getEngine();\r\n        const targetSize = this._mapSize / this.blurScale;\r\n\r\n        if (!this.useKernelBlur || this.blurScale !== 1.0) {\r\n            this._shadowMap2 = new RenderTargetTexture(this._light.name + \"_shadowMap2\", targetSize, this._scene, false, true, this._textureType, undefined, undefined, false);\r\n            this._shadowMap2.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n            this._shadowMap2.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n\r\n        if (this.useKernelBlur) {\r\n            this._kernelBlurXPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurX\",\r\n                new Vector2(1, 0),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n            this._kernelBlurXPostprocess.width = targetSize;\r\n            this._kernelBlurXPostprocess.height = targetSize;\r\n            this._kernelBlurXPostprocess.externalTextureSamplerBinding = true;\r\n            this._kernelBlurXPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._kernelBlurYPostprocess = new BlurPostProcess(\r\n                this._light.name + \"KernelBlurY\",\r\n                new Vector2(0, 1),\r\n                this.blurKernel,\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                this._textureType\r\n            );\r\n\r\n            this._kernelBlurXPostprocess.autoClear = false;\r\n            this._kernelBlurYPostprocess.autoClear = false;\r\n\r\n            if (this._textureType === Constants.TEXTURETYPE_UNSIGNED_BYTE) {\r\n                (<BlurPostProcess>this._kernelBlurXPostprocess).packedFloat = true;\r\n                (<BlurPostProcess>this._kernelBlurYPostprocess).packedFloat = true;\r\n            }\r\n\r\n            this._blurPostProcesses = [this._kernelBlurXPostprocess, this._kernelBlurYPostprocess];\r\n        } else {\r\n            this._boxBlurPostprocess = new PostProcess(\r\n                this._light.name + \"DepthBoxBlur\",\r\n                \"depthBoxBlur\",\r\n                [\"screenSize\", \"boxOffset\"],\r\n                [],\r\n                1.0,\r\n                null,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                engine,\r\n                false,\r\n                \"#define OFFSET \" + this._blurBoxOffset,\r\n                this._textureType,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                this._shaderLanguage\r\n            );\r\n            this._boxBlurPostprocess.externalTextureSamplerBinding = true;\r\n            this._boxBlurPostprocess.onApplyObservable.add((effect) => {\r\n                effect.setFloat2(\"screenSize\", targetSize, targetSize);\r\n                effect.setTexture(\"textureSampler\", this._shadowMap);\r\n            });\r\n\r\n            this._boxBlurPostprocess.autoClear = false;\r\n\r\n            this._blurPostProcesses = [this._boxBlurPostprocess];\r\n        }\r\n    }\r\n\r\n    protected _renderForShadowMap(\r\n        opaqueSubMeshes: SmartArray<SubMesh>,\r\n        alphaTestSubMeshes: SmartArray<SubMesh>,\r\n        transparentSubMeshes: SmartArray<SubMesh>,\r\n        depthOnlySubMeshes: SmartArray<SubMesh>\r\n    ): void {\r\n        let index: number;\r\n\r\n        if (depthOnlySubMeshes.length) {\r\n            for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(depthOnlySubMeshes.data[index]);\r\n            }\r\n        }\r\n\r\n        for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(opaqueSubMeshes.data[index]);\r\n        }\r\n\r\n        for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n            this._renderSubMeshForShadowMap(alphaTestSubMeshes.data[index]);\r\n        }\r\n\r\n        if (this._transparencyShadow) {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                this._renderSubMeshForShadowMap(transparentSubMeshes.data[index], true);\r\n            }\r\n        } else {\r\n            for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect, mesh: AbstractMesh): void {\r\n        effect.setMatrix(\"viewProjection\", this.getTransformMatrix());\r\n    }\r\n\r\n    protected _renderSubMeshForShadowMap(subMesh: SubMesh, isTransparent: boolean = false): void {\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const effectiveMesh = subMesh.getEffectiveMesh();\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const material = subMesh.getMaterial();\r\n\r\n        effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n        if (!material || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n            return;\r\n        }\r\n\r\n        // Culling\r\n        // Note:\r\n        // In rhs mode, we assume that meshes will be rendered in right-handed space (i.e. with an RHS camera), so the default value of material.sideOrientation is updated accordingly (see material constructor).\r\n        // However, when generating a shadow map, we render from the point of view of the light, whose view/projection matrices are always in lhs mode.\r\n        // We therefore need to \"undo\" the sideOrientation inversion that was previously performed when constructing the material.\r\n        const useRHS = scene.useRightHandedSystem;\r\n        const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n        let sideOrientation = material._getEffectiveOrientation(renderingMesh);\r\n\r\n        if ((detNeg && !useRHS) || (!detNeg && useRHS)) {\r\n            sideOrientation =\r\n                sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation;\r\n        }\r\n        const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n        engine.setState(material.backFaceCulling, undefined, undefined, reverseSideOrientation, material.cullBackFaces);\r\n\r\n        // Managing instances\r\n        const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n        if (batch.mustReturn) {\r\n            return;\r\n        }\r\n\r\n        const hardwareInstancedRendering =\r\n            engine.getCaps().instancedArrays &&\r\n            ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n        if (this.customAllowRendering && !this.customAllowRendering(subMesh)) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady(subMesh, hardwareInstancedRendering, isTransparent)) {\r\n            subMesh._renderId = scene.getRenderId();\r\n\r\n            const shadowDepthWrapper = material.shadowDepthWrapper;\r\n\r\n            const drawWrapper = shadowDepthWrapper?.getEffect(subMesh, this, engine.currentRenderPassId) ?? subMesh._getDrawWrapper()!;\r\n            const effect = DrawWrapper.GetEffect(drawWrapper)!;\r\n\r\n            engine.enableEffect(drawWrapper);\r\n\r\n            if (!hardwareInstancedRendering) {\r\n                renderingMesh._bind(subMesh, effect, material.fillMode);\r\n            }\r\n\r\n            this.getTransformMatrix(); // make sure _cachedDirection et _cachedPosition are up to date\r\n\r\n            effect.setFloat3(\"biasAndScaleSM\", this.bias, this.normalBias, this.depthScale);\r\n\r\n            if (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT) {\r\n                effect.setVector3(\"lightDataSM\", this._cachedDirection);\r\n            } else {\r\n                effect.setVector3(\"lightDataSM\", this._cachedPosition);\r\n            }\r\n\r\n            const camera = this._getCamera();\r\n            effect.setFloat2(\"depthValuesSM\", this.getLight().getDepthMinZ(camera), this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera));\r\n\r\n            if (isTransparent && this.enableSoftTransparentShadow) {\r\n                effect.setFloat2(\"softTransparentShadowSM\", effectiveMesh.visibility * material.alpha, this._opacityTexture?.getAlphaFromRGB ? 1 : 0);\r\n            }\r\n\r\n            if (shadowDepthWrapper) {\r\n                subMesh._setMainDrawWrapperOverride(drawWrapper);\r\n                if (shadowDepthWrapper.standalone) {\r\n                    shadowDepthWrapper.baseMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                } else {\r\n                    material.bindForSubMesh(effectiveMesh.getWorldMatrix(), renderingMesh, subMesh);\r\n                }\r\n                subMesh._setMainDrawWrapperOverride(null);\r\n            } else {\r\n                // Alpha test\r\n                if (this._opacityTexture) {\r\n                    effect.setTexture(\"diffuseSampler\", this._opacityTexture);\r\n                    effect.setMatrix(\"diffuseMatrix\", this._opacityTexture.getTextureMatrix() || this._defaultTextureMatrix);\r\n                }\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    const skeleton = renderingMesh.skeleton;\r\n\r\n                    if (skeleton.isUsingTextureForMatrices) {\r\n                        const boneTexture = skeleton.getTransformMatrixTexture(renderingMesh);\r\n\r\n                        if (!boneTexture) {\r\n                            return;\r\n                        }\r\n\r\n                        effect.setTexture(\"boneSampler\", boneTexture);\r\n                        effect.setFloat(\"boneTextureWidth\", 4.0 * (skeleton.bones.length + 1));\r\n                    } else {\r\n                        effect.setMatrices(\"mBones\", skeleton.getTransformMatrices(renderingMesh));\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                BindMorphTargetParameters(renderingMesh, effect);\r\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                    renderingMesh.morphTargetManager._bind(effect);\r\n                }\r\n\r\n                // Baked vertex animations\r\n                const bvaManager = subMesh.getMesh().bakedVertexAnimationManager;\r\n                if (bvaManager && bvaManager.isEnabled) {\r\n                    bvaManager.bind(effect, hardwareInstancedRendering);\r\n                }\r\n\r\n                // Clip planes\r\n                BindClipPlane(effect, material, scene);\r\n            }\r\n\r\n            if (!this._useUBO && !shadowDepthWrapper) {\r\n                this._bindCustomEffectForRenderSubMeshForShadowMap(subMesh, effect, effectiveMesh);\r\n            }\r\n\r\n            BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\r\n            this._scene.getSceneUniformBuffer().bindUniformBuffer();\r\n\r\n            const world = effectiveMesh.getWorldMatrix();\r\n\r\n            // In the non hardware instanced mode, the Mesh ubo update is done by the callback passed to renderingMesh._processRendering (see below)\r\n            if (hardwareInstancedRendering) {\r\n                effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                effectiveMesh.transferToEffect(world);\r\n            }\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, true, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onBeforeShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n            this.onBeforeShadowMapRenderObservable.notifyObservers(effect);\r\n\r\n            // Draw\r\n            renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, worldOverride) => {\r\n                if (effectiveMesh !== renderingMesh && !isInstance) {\r\n                    renderingMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    renderingMesh.transferToEffect(worldOverride);\r\n                } else {\r\n                    effectiveMesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                    effectiveMesh.transferToEffect(isInstance ? worldOverride : world);\r\n                }\r\n            });\r\n\r\n            if (this.forceBackFacesOnly) {\r\n                engine.setState(true, 0, false, false, material.cullBackFaces);\r\n            }\r\n\r\n            // Observables\r\n            this.onAfterShadowMapRenderObservable.notifyObservers(effect);\r\n            this.onAfterShadowMapRenderMeshObservable.notifyObservers(renderingMesh);\r\n        } else {\r\n            // Need to reset refresh rate of the shadowMap\r\n            if (this._shadowMap) {\r\n                this._shadowMap.resetRefreshCounter();\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _applyFilterValues(): void {\r\n        if (!this._shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (this.filter === ShadowGenerator.FILTER_NONE || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n            this._shadowMap.updateSamplingMode(Texture.NEAREST_SAMPLINGMODE);\r\n        } else {\r\n            this._shadowMap.updateSamplingMode(Texture.BILINEAR_SAMPLINGMODE);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param onCompiled Callback triggered at the and of the effects compilation\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     */\r\n    public forceCompilation(onCompiled?: (generator: IShadowGenerator) => void, options?: Partial<{ useInstances: boolean }>): void {\r\n        const localOptions = {\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const renderList = shadowMap.renderList;\r\n        if (!renderList) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const subMeshes: SubMesh[] = [];\r\n        for (const mesh of renderList) {\r\n            subMeshes.push(...mesh.subMeshes);\r\n        }\r\n        if (subMeshes.length === 0) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n            return;\r\n        }\r\n\r\n        let currentIndex = 0;\r\n\r\n        const checkReady = () => {\r\n            if (!this._scene || !this._scene.getEngine()) {\r\n                return;\r\n            }\r\n\r\n            while (\r\n                this.isReady(\r\n                    subMeshes[currentIndex],\r\n                    localOptions.useInstances,\r\n                    subMeshes[currentIndex].getMaterial()?.needAlphaBlendingForMesh(subMeshes[currentIndex].getMesh()) ?? false\r\n                )\r\n            ) {\r\n                currentIndex++;\r\n                if (currentIndex >= subMeshes.length) {\r\n                    if (onCompiled) {\r\n                        onCompiled(this);\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(checkReady, 16);\r\n        };\r\n\r\n        checkReady();\r\n    }\r\n\r\n    /**\r\n     * Forces all the attached effect to compile to enable rendering only once ready vs. lazily compiling effects.\r\n     * @param options Sets of optional options forcing the compilation with different modes\r\n     * @returns A promise that resolves when the compilation completes\r\n     */\r\n    public async forceCompilationAsync(options?: Partial<{ useInstances: boolean }>): Promise<void> {\r\n        return await new Promise((resolve) => {\r\n            this.forceCompilation(() => {\r\n                resolve();\r\n            }, options);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _isReadyCustomDefines(defines: any, subMesh: SubMesh, useInstances: boolean): void {}\r\n\r\n    private _prepareShadowDefines(subMesh: SubMesh, useInstances: boolean, defines: string[], isTransparent: boolean): string[] {\r\n        defines.push(\"#define SM_LIGHTTYPE_\" + this._light.getClassName().toUpperCase());\r\n\r\n        defines.push(\"#define SM_FLOAT \" + (this._textureType !== Constants.TEXTURETYPE_UNSIGNED_BYTE ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_ESM \" + (this.useExponentialShadowMap || this.useBlurExponentialShadowMap ? \"1\" : \"0\"));\r\n\r\n        defines.push(\"#define SM_DEPTHTEXTURE \" + (this.usePercentageCloserFiltering || this.useContactHardeningShadow ? \"1\" : \"0\"));\r\n\r\n        const mesh = subMesh.getMesh();\r\n\r\n        // Normal bias.\r\n        defines.push(\"#define SM_NORMALBIAS \" + (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind) ? \"1\" : \"0\"));\r\n        defines.push(\"#define SM_DIRECTIONINLIGHTDATA \" + (this.getLight().getTypeID() === Light.LIGHTTYPEID_DIRECTIONALLIGHT ? \"1\" : \"0\"));\r\n\r\n        // Point light\r\n        defines.push(\"#define SM_USEDISTANCE \" + (this._light.needCube() ? \"1\" : \"0\"));\r\n\r\n        // Soft transparent shadows\r\n        defines.push(\"#define SM_SOFTTRANSPARENTSHADOW \" + (this.enableSoftTransparentShadow && isTransparent ? \"1\" : \"0\"));\r\n\r\n        this._isReadyCustomDefines(defines, subMesh, useInstances);\r\n\r\n        return defines;\r\n    }\r\n\r\n    /**\r\n     * Determine whether the shadow generator is ready or not (mainly all effects and related post processes needs to be ready).\r\n     * @param subMesh The submesh we want to render in the shadow map\r\n     * @param useInstances Defines whether will draw in the map using instances\r\n     * @param isTransparent Indicates that isReady is called for a transparent subMesh\r\n     * @returns true if ready otherwise, false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean, isTransparent: boolean): boolean {\r\n        if (!this._shadersLoaded) {\r\n            return false;\r\n        }\r\n\r\n        const material = subMesh.getMaterial(),\r\n            shadowDepthWrapper = material?.shadowDepthWrapper;\r\n\r\n        this._opacityTexture = null;\r\n\r\n        if (!material) {\r\n            return false;\r\n        }\r\n\r\n        const defines: string[] = [];\r\n\r\n        this._prepareShadowDefines(subMesh, useInstances, defines, isTransparent);\r\n\r\n        if (shadowDepthWrapper) {\r\n            if (!shadowDepthWrapper.isReadyForSubMesh(subMesh, defines, this, useInstances, this._scene.getEngine().currentRenderPassId)) {\r\n                return false;\r\n            }\r\n        } else {\r\n            const subMeshEffect = subMesh._getDrawWrapper(undefined, true)!;\r\n\r\n            let effect = subMeshEffect.effect!;\r\n            let cachedDefines = subMeshEffect.defines;\r\n\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            const mesh = subMesh.getMesh();\r\n\r\n            let useNormal = false;\r\n            let uv1 = false;\r\n            let uv2 = false;\r\n            const color = false;\r\n\r\n            // Normal bias.\r\n            if (this.normalBias && mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n                defines.push(\"#define NORMAL\");\r\n                useNormal = true;\r\n                if (mesh.nonUniformScaling) {\r\n                    defines.push(\"#define NONUNIFORMSCALING\");\r\n                }\r\n            }\r\n\r\n            // Alpha test\r\n            const needAlphaTesting = material.needAlphaTestingForMesh(mesh);\r\n\r\n            if (needAlphaTesting || material.needAlphaBlendingForMesh(mesh)) {\r\n                if (this.useOpacityTextureForTransparentShadow) {\r\n                    this._opacityTexture = (material as any).opacityTexture;\r\n                } else {\r\n                    this._opacityTexture = material.getAlphaTestTexture();\r\n                }\r\n                if (this._opacityTexture) {\r\n                    if (!this._opacityTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n\r\n                    const alphaCutOff = (material as any).alphaCutOff ?? ShadowGenerator.DEFAULT_ALPHA_CUTOFF;\r\n\r\n                    defines.push(\"#define ALPHATEXTURE\");\r\n                    if (needAlphaTesting) {\r\n                        defines.push(`#define ALPHATESTVALUE ${alphaCutOff}${alphaCutOff % 1 === 0 ? \".\" : \"\"}`);\r\n                    }\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                        attribs.push(VertexBuffer.UVKind);\r\n                        defines.push(\"#define UV1\");\r\n                        uv1 = true;\r\n                    }\r\n                    if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                        if (this._opacityTexture.coordinatesIndex === 1) {\r\n                            attribs.push(VertexBuffer.UV2Kind);\r\n                            defines.push(\"#define UV2\");\r\n                            uv2 = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Bones\r\n            const fallbacks = new EffectFallbacks();\r\n            if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n                attribs.push(VertexBuffer.MatricesIndicesKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsKind);\r\n                if (mesh.numBoneInfluencers > 4) {\r\n                    attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                    attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n                }\r\n                const skeleton = mesh.skeleton;\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n                if (mesh.numBoneInfluencers > 0) {\r\n                    fallbacks.addCPUSkinningFallback(0, mesh);\r\n                }\r\n\r\n                if (skeleton.isUsingTextureForMatrices) {\r\n                    defines.push(\"#define BONETEXTURE\");\r\n                } else {\r\n                    defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n                }\r\n            } else {\r\n                defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n            }\r\n\r\n            // Morph targets\r\n            const numMorphInfluencers = mesh.morphTargetManager\r\n                ? PrepareDefinesAndAttributesForMorphTargets(\r\n                      mesh.morphTargetManager,\r\n                      defines,\r\n                      attribs,\r\n                      mesh,\r\n                      true, // usePositionMorph\r\n                      useNormal, // useNormalMorph\r\n                      false, // useTangentMorph\r\n                      uv1, // useUVMorph\r\n                      uv2, // useUV2Morph\r\n                      color // useColorMorph\r\n                  )\r\n                : 0;\r\n\r\n            // ClipPlanes\r\n            PrepareStringDefinesForClipPlanes(material, this._scene, defines);\r\n\r\n            // Instances\r\n            if (useInstances) {\r\n                defines.push(\"#define INSTANCES\");\r\n                PushAttributesForInstances(attribs);\r\n                if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                    defines.push(\"#define THIN_INSTANCES\");\r\n                }\r\n            }\r\n\r\n            if (this.customShaderOptions) {\r\n                if (this.customShaderOptions.defines) {\r\n                    for (const define of this.customShaderOptions.defines) {\r\n                        if (defines.indexOf(define) === -1) {\r\n                            defines.push(define);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Baked vertex animations\r\n            const bvaManager = mesh.bakedVertexAnimationManager;\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (useInstances) {\r\n                    attribs.push(\"bakedVertexAnimationSettingsInstanced\");\r\n                }\r\n            }\r\n\r\n            // Get correct effect\r\n            const join = defines.join(\"\\n\");\r\n            if (cachedDefines !== join) {\r\n                cachedDefines = join;\r\n\r\n                let shaderName = \"shadowMap\";\r\n                const uniforms = [\r\n                    \"world\",\r\n                    \"mBones\",\r\n                    \"viewProjection\",\r\n                    \"diffuseMatrix\",\r\n                    \"lightDataSM\",\r\n                    \"depthValuesSM\",\r\n                    \"biasAndScaleSM\",\r\n                    \"morphTargetInfluences\",\r\n                    \"morphTargetCount\",\r\n                    \"boneTextureWidth\",\r\n                    \"softTransparentShadowSM\",\r\n                    \"morphTargetTextureInfo\",\r\n                    \"morphTargetTextureIndices\",\r\n                    \"bakedVertexAnimationSettings\",\r\n                    \"bakedVertexAnimationTextureSizeInverted\",\r\n                    \"bakedVertexAnimationTime\",\r\n                    \"bakedVertexAnimationTexture\",\r\n                ];\r\n                const samplers = [\"diffuseSampler\", \"boneSampler\", \"morphTargets\", \"bakedVertexAnimationTexture\"];\r\n                const uniformBuffers = [\"Scene\", \"Mesh\"];\r\n\r\n                AddClipPlaneUniforms(uniforms);\r\n\r\n                // Custom shader?\r\n                if (this.customShaderOptions) {\r\n                    shaderName = this.customShaderOptions.shaderName;\r\n\r\n                    if (this.customShaderOptions.attributes) {\r\n                        for (const attrib of this.customShaderOptions.attributes) {\r\n                            if (attribs.indexOf(attrib) === -1) {\r\n                                attribs.push(attrib);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.uniforms) {\r\n                        for (const uniform of this.customShaderOptions.uniforms) {\r\n                            if (uniforms.indexOf(uniform) === -1) {\r\n                                uniforms.push(uniform);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.customShaderOptions.samplers) {\r\n                        for (const sampler of this.customShaderOptions.samplers) {\r\n                            if (samplers.indexOf(sampler) === -1) {\r\n                                samplers.push(sampler);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const engine = this._scene.getEngine();\r\n\r\n                effect = engine.createEffect(\r\n                    shaderName,\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: uniformBuffers,\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: null,\r\n                        onError: null,\r\n                        indexParameters: { maxSimultaneousMorphTargets: numMorphInfluencers },\r\n                        shaderLanguage: this._shaderLanguage,\r\n                    },\r\n                    engine\r\n                );\r\n\r\n                subMeshEffect.setEffect(effect, cachedDefines);\r\n            }\r\n\r\n            if (!effect.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (this.useBlurExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            if (!this._blurPostProcesses || !this._blurPostProcesses.length) {\r\n                this._initializeBlurRTTAndPostProcesses();\r\n            }\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess && !this._kernelBlurXPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._kernelBlurYPostprocess && !this._kernelBlurYPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n        if (this._boxBlurPostprocess && !this._boxBlurPostprocess.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public prepareDefines(defines: any, lightIndex: number): void {\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOW\" + lightIndex] = true;\r\n\r\n        if (this.useContactHardeningShadow) {\r\n            defines[\"SHADOWPCSS\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePercentageCloserFiltering) {\r\n            defines[\"SHADOWPCF\" + lightIndex] = true;\r\n            if (this._filteringQuality === ShadowGenerator.QUALITY_LOW) {\r\n                defines[\"SHADOWLOWQUALITY\" + lightIndex] = true;\r\n            } else if (this._filteringQuality === ShadowGenerator.QUALITY_MEDIUM) {\r\n                defines[\"SHADOWMEDIUMQUALITY\" + lightIndex] = true;\r\n            }\r\n            // else default to high.\r\n        } else if (this.usePoissonSampling) {\r\n            defines[\"SHADOWPOISSON\" + lightIndex] = true;\r\n        } else if (this.useExponentialShadowMap || this.useBlurExponentialShadowMap) {\r\n            defines[\"SHADOWESM\" + lightIndex] = true;\r\n        } else if (this.useCloseExponentialShadowMap || this.useBlurCloseExponentialShadowMap) {\r\n            defines[\"SHADOWCLOSEESM\" + lightIndex] = true;\r\n        }\r\n\r\n        if (light.needCube()) {\r\n            defines[\"SHADOWCUBE\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binding the information for\r\n     */\r\n    public bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = this._getCamera();\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        if (!light.needCube()) {\r\n            effect.setMatrix(\"lightMatrix\" + lightIndex, this.getTransformMatrix());\r\n        }\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        const shadowMapForRendering = this.getShadowMapForRendering();\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), shadowMap.getSize().width, 1 / shadowMap.getSize().width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\r\n            effect.setTexture(\"depthTexture\" + lightIndex, shadowMapForRendering);\r\n            light._uniformBuffer.updateFloat4(\r\n                \"shadowsInfo\",\r\n                this.getDarkness(),\r\n                1 / shadowMap.getSize().width,\r\n                this._contactHardeningLightSizeUVRatio * shadowMap.getSize().width,\r\n                this.frustumEdgeFalloff,\r\n                lightIndex\r\n            );\r\n        } else {\r\n            effect.setTexture(\"shadowTexture\" + lightIndex, shadowMapForRendering);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), this.blurScale / shadowMap.getSize().width, this.depthScale, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix used to render the shadow map.\r\n     */\r\n    public get viewMatrix() {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the projection matrix used to render the shadow map.\r\n     */\r\n    public get projectionMatrix() {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix used to project the meshes into the map from the light point of view.\r\n     * (eq to shadow projection matrix * light transform matrix)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        const scene = this._scene;\r\n        if (this._currentRenderId === scene.getRenderId() && this._currentFaceIndexCache === this._currentFaceIndex) {\r\n            return this._transformMatrix;\r\n        }\r\n\r\n        this._currentRenderId = scene.getRenderId();\r\n        this._currentFaceIndexCache = this._currentFaceIndex;\r\n\r\n        let lightPosition = this._light.position;\r\n        if (this._light.computeTransformedInformation()) {\r\n            lightPosition = this._light.transformedPosition;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(this._currentFaceIndex), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        if (\r\n            this._light.needProjectionMatrixCompute() ||\r\n            !this._cachedPosition ||\r\n            !this._cachedDirection ||\r\n            !lightPosition.equals(this._cachedPosition) ||\r\n            !this._lightDirection.equals(this._cachedDirection)\r\n        ) {\r\n            this._cachedPosition.copyFrom(lightPosition);\r\n            this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n            Matrix.LookAtLHToRef(lightPosition, lightPosition.add(this._lightDirection), Vector3.Up(), this._viewMatrix);\r\n\r\n            const shadowMap = this.getShadowMap();\r\n\r\n            if (shadowMap) {\r\n                const renderList = shadowMap.renderList;\r\n\r\n                if (renderList) {\r\n                    this._light.setShadowProjectionMatrix(this._projectionMatrix, this._viewMatrix, renderList);\r\n                }\r\n            }\r\n\r\n            this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        }\r\n\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    /**\r\n     * Recreates the shadow map dependencies like RTT and post processes. This can be used during the switch between\r\n     * Cube and 2D textures for instance.\r\n     */\r\n    public recreateShadowMap(): void {\r\n        const shadowMap = this._shadowMap;\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        // Track render list.\r\n        const renderList = shadowMap.renderList;\r\n        // Clean up existing data.\r\n        this._disposeRTTandPostProcesses();\r\n        // Reinitializes.\r\n        this._initializeGenerator();\r\n        // Reaffect the filter to ensure a correct fallback if necessary.\r\n        this.filter = this._filter;\r\n        // Reaffect the filter.\r\n        this._applyFilterValues();\r\n        // Reaffect Render List.\r\n        if (renderList) {\r\n            // Note: don't do this._shadowMap!.renderList = renderList;\r\n            // The renderList hooked array is accessing the old RenderTargetTexture (see RenderTargetTexture._hookArray), which is disposed at this point (by the call to _disposeRTTandPostProcesses)\r\n            if (!this._shadowMap!.renderList) {\r\n                this._shadowMap!.renderList = [];\r\n            }\r\n            for (const mesh of renderList) {\r\n                this._shadowMap!.renderList.push(mesh);\r\n            }\r\n        } else {\r\n            this._shadowMap!.renderList = null;\r\n        }\r\n    }\r\n\r\n    protected _disposeBlurPostProcesses(): void {\r\n        if (this._shadowMap2) {\r\n            this._shadowMap2.dispose();\r\n            this._shadowMap2 = null;\r\n        }\r\n\r\n        if (this._boxBlurPostprocess) {\r\n            this._boxBlurPostprocess.dispose();\r\n            this._boxBlurPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurXPostprocess) {\r\n            this._kernelBlurXPostprocess.dispose();\r\n            this._kernelBlurXPostprocess = null;\r\n        }\r\n\r\n        if (this._kernelBlurYPostprocess) {\r\n            this._kernelBlurYPostprocess.dispose();\r\n            this._kernelBlurYPostprocess = null;\r\n        }\r\n\r\n        this._blurPostProcesses = [];\r\n    }\r\n\r\n    protected _disposeRTTandPostProcesses(): void {\r\n        if (this._shadowMap) {\r\n            this._shadowMap.dispose();\r\n            this._shadowMap = null;\r\n        }\r\n\r\n        this._disposeBlurPostProcesses();\r\n    }\r\n\r\n    protected _disposeSceneUBOs(): void {\r\n        if (this._sceneUBOs) {\r\n            for (const ubo of this._sceneUBOs) {\r\n                ubo.dispose();\r\n            }\r\n            this._sceneUBOs = [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public dispose(): void {\r\n        this._disposeRTTandPostProcesses();\r\n\r\n        this._disposeSceneUBOs();\r\n\r\n        if (this._light) {\r\n            if (this._light._shadowGenerators) {\r\n                const iterator = this._light._shadowGenerators.entries();\r\n                for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\r\n                    const [camera, shadowGenerator] = entry.value;\r\n                    if (shadowGenerator === this) {\r\n                        this._light._shadowGenerators.delete(camera);\r\n                    }\r\n                }\r\n                if (this._light._shadowGenerators.size === 0) {\r\n                    this._light._shadowGenerators = null;\r\n                }\r\n            }\r\n            this._light._markMeshesAsLightDirty();\r\n        }\r\n\r\n        this.onBeforeShadowMapRenderMeshObservable.clear();\r\n        this.onBeforeShadowMapRenderObservable.clear();\r\n        this.onAfterShadowMapRenderMeshObservable.clear();\r\n        this.onAfterShadowMapRenderObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.className = this.getClassName();\r\n        serializationObject.lightId = this._light.id;\r\n        serializationObject.cameraId = this._camera?.id;\r\n        serializationObject.id = this.id;\r\n        serializationObject.mapSize = shadowMap.getRenderSize();\r\n        serializationObject.forceBackFacesOnly = this.forceBackFacesOnly;\r\n        serializationObject.darkness = this.getDarkness();\r\n        serializationObject.transparencyShadow = this._transparencyShadow;\r\n        serializationObject.frustumEdgeFalloff = this.frustumEdgeFalloff;\r\n        serializationObject.bias = this.bias;\r\n        serializationObject.normalBias = this.normalBias;\r\n        serializationObject.usePercentageCloserFiltering = this.usePercentageCloserFiltering;\r\n        serializationObject.useContactHardeningShadow = this.useContactHardeningShadow;\r\n        serializationObject.contactHardeningLightSizeUVRatio = this.contactHardeningLightSizeUVRatio;\r\n        serializationObject.filteringQuality = this.filteringQuality;\r\n        serializationObject.useExponentialShadowMap = this.useExponentialShadowMap;\r\n        serializationObject.useBlurExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.useBlurCloseExponentialShadowMap = this.useBlurExponentialShadowMap;\r\n        serializationObject.usePoissonSampling = this.usePoissonSampling;\r\n        serializationObject.depthScale = this.depthScale;\r\n        serializationObject.blurBoxOffset = this.blurBoxOffset;\r\n        serializationObject.blurKernel = this.blurKernel;\r\n        serializationObject.blurScale = this.blurScale;\r\n        serializationObject.useKernelBlur = this.useKernelBlur;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @param constr A function that builds a shadow generator or undefined to create an instance of the default shadow generator\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static Parse(parsedShadowGenerator: any, scene: Scene, constr?: (mapSize: number, light: IShadowLight, camera: Nullable<Camera>) => ShadowGenerator): ShadowGenerator {\r\n        const light = <IShadowLight>scene.getLightById(parsedShadowGenerator.lightId);\r\n        const camera: Nullable<Camera> = parsedShadowGenerator.cameraId !== undefined ? scene.getCameraById(parsedShadowGenerator.cameraId) : null;\r\n        const shadowGenerator = constr ? constr(parsedShadowGenerator.mapSize, light, camera) : new ShadowGenerator(parsedShadowGenerator.mapSize, light, undefined, camera);\r\n        const shadowMap = shadowGenerator.getShadowMap();\r\n\r\n        if (parsedShadowGenerator.renderList.length && shadowMap) {\r\n            const renderSet = new Set<string>(parsedShadowGenerator.renderList);\r\n            let renderList = shadowMap.renderList;\r\n            if (!renderList) {\r\n                renderList = shadowMap.renderList = [];\r\n            }\r\n            const meshes = scene.meshes;\r\n            for (const mesh of meshes) {\r\n                if (renderSet.has(mesh.id)) {\r\n                    renderList.push(mesh);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (parsedShadowGenerator.id !== undefined) {\r\n            shadowGenerator.id = parsedShadowGenerator.id;\r\n        }\r\n\r\n        shadowGenerator.forceBackFacesOnly = !!parsedShadowGenerator.forceBackFacesOnly;\r\n\r\n        if (parsedShadowGenerator.darkness !== undefined) {\r\n            shadowGenerator.setDarkness(parsedShadowGenerator.darkness);\r\n        }\r\n\r\n        if (parsedShadowGenerator.transparencyShadow) {\r\n            shadowGenerator.setTransparencyShadow(true);\r\n        }\r\n\r\n        if (parsedShadowGenerator.frustumEdgeFalloff !== undefined) {\r\n            shadowGenerator.frustumEdgeFalloff = parsedShadowGenerator.frustumEdgeFalloff;\r\n        }\r\n\r\n        if (parsedShadowGenerator.bias !== undefined) {\r\n            shadowGenerator.bias = parsedShadowGenerator.bias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.normalBias !== undefined) {\r\n            shadowGenerator.normalBias = parsedShadowGenerator.normalBias;\r\n        }\r\n\r\n        if (parsedShadowGenerator.usePercentageCloserFiltering) {\r\n            shadowGenerator.usePercentageCloserFiltering = true;\r\n        } else if (parsedShadowGenerator.useContactHardeningShadow) {\r\n            shadowGenerator.useContactHardeningShadow = true;\r\n        } else if (parsedShadowGenerator.usePoissonSampling) {\r\n            shadowGenerator.usePoissonSampling = true;\r\n        } else if (parsedShadowGenerator.useExponentialShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurExponentialShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useCloseExponentialShadowMap) {\r\n            shadowGenerator.useCloseExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurCloseExponentialShadowMap) {\r\n            shadowGenerator.useBlurCloseExponentialShadowMap = true;\r\n        }\r\n        // Backward compat\r\n        else if (parsedShadowGenerator.useVarianceShadowMap) {\r\n            shadowGenerator.useExponentialShadowMap = true;\r\n        } else if (parsedShadowGenerator.useBlurVarianceShadowMap) {\r\n            shadowGenerator.useBlurExponentialShadowMap = true;\r\n        }\r\n\r\n        if (parsedShadowGenerator.contactHardeningLightSizeUVRatio !== undefined) {\r\n            shadowGenerator.contactHardeningLightSizeUVRatio = parsedShadowGenerator.contactHardeningLightSizeUVRatio;\r\n        }\r\n\r\n        if (parsedShadowGenerator.filteringQuality !== undefined) {\r\n            shadowGenerator.filteringQuality = parsedShadowGenerator.filteringQuality;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthScale) {\r\n            shadowGenerator.depthScale = parsedShadowGenerator.depthScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurScale) {\r\n            shadowGenerator.blurScale = parsedShadowGenerator.blurScale;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurBoxOffset) {\r\n            shadowGenerator.blurBoxOffset = parsedShadowGenerator.blurBoxOffset;\r\n        }\r\n\r\n        if (parsedShadowGenerator.useKernelBlur) {\r\n            shadowGenerator.useKernelBlur = parsedShadowGenerator.useKernelBlur;\r\n        }\r\n\r\n        if (parsedShadowGenerator.blurKernel) {\r\n            shadowGenerator.blurKernel = parsedShadowGenerator.blurKernel;\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\n\r\nimport type { ICullable } from \"./boundingInfo\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\n/**\r\n * Class used to store bounding box information\r\n */\r\nexport class BoundingBox implements ICullable {\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in local space\r\n     */\r\n    public readonly vectors: Vector3[] = BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the center of the bounding box in local space\r\n     */\r\n    public readonly center: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the center of the bounding box in world space\r\n     */\r\n    public readonly centerWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets half the size of the extent in local space. Multiply by 2 to obtain the full size of the box!\r\n     */\r\n    public readonly extendSize: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets half the size of the extent in world space. Multiply by 2 to obtain the full size of the box!\r\n     */\r\n    public readonly extendSizeWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the OBB (object bounding box) directions\r\n     */\r\n    public readonly directions: Vector3[] = BuildArray(3, Vector3.Zero);\r\n    /**\r\n     * Gets the 8 vectors representing the bounding box in world space\r\n     */\r\n    public readonly vectorsWorld: Vector3[] = BuildArray(8, Vector3.Zero);\r\n    /**\r\n     * Gets the minimum vector in world space\r\n     */\r\n    public readonly minimumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in world space\r\n     */\r\n    public readonly maximumWorld: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum: Vector3 = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum: Vector3 = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _tag: number;\r\n\r\n    /** @internal */\r\n    public _drawWrapperFront: Nullable<DrawWrapper> = null;\r\n    /** @internal */\r\n    public _drawWrapperBack: Nullable<DrawWrapper> = null;\r\n\r\n    /**\r\n     * Creates a new bounding box\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Recreates the entire bounding box from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const vectors = this.vectors;\r\n\r\n        this.minimum.copyFromFloats(minX, minY, minZ);\r\n        this.maximum.copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[0].copyFromFloats(minX, minY, minZ);\r\n        vectors[1].copyFromFloats(maxX, maxY, maxZ);\r\n        vectors[2].copyFromFloats(maxX, minY, minZ);\r\n        vectors[3].copyFromFloats(minX, maxY, minZ);\r\n        vectors[4].copyFromFloats(minX, minY, maxZ);\r\n        vectors[5].copyFromFloats(maxX, maxY, minZ);\r\n        vectors[6].copyFromFloats(minX, maxY, maxZ);\r\n        vectors[7].copyFromFloats(maxX, minY, maxZ);\r\n\r\n        // OBB\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        max.subtractToRef(min, this.extendSize).scaleInPlace(0.5);\r\n\r\n        this._worldMatrix = worldMatrix || Matrix.IdentityReadOnly;\r\n\r\n        this._update(this._worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding box by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingBox {\r\n        const tmpVectors = BoundingBox._TmpVector3;\r\n        const diff = this.maximum.subtractToRef(this.minimum, tmpVectors[0]);\r\n        const len = diff.length();\r\n        diff.normalizeFromLength(len);\r\n        const distance = len * factor;\r\n        const newRadius = diff.scaleInPlace(distance * 0.5);\r\n\r\n        const min = this.center.subtractToRef(newRadius, tmpVectors[1]);\r\n        const max = this.center.addToRef(newRadius, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(world: DeepImmutable<Matrix>): void {\r\n        const minWorld = this.minimumWorld;\r\n        const maxWorld = this.maximumWorld;\r\n        const directions = this.directions;\r\n        const vectorsWorld = this.vectorsWorld;\r\n        const vectors = this.vectors;\r\n\r\n        if (!world.isIdentity()) {\r\n            minWorld.setAll(Number.MAX_VALUE);\r\n            maxWorld.setAll(-Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < 8; ++index) {\r\n                const v = vectorsWorld[index];\r\n                Vector3.TransformCoordinatesToRef(vectors[index], world, v);\r\n                minWorld.minimizeInPlace(v);\r\n                maxWorld.maximizeInPlace(v);\r\n            }\r\n\r\n            // Extend\r\n            maxWorld.subtractToRef(minWorld, this.extendSizeWorld).scaleInPlace(0.5);\r\n            maxWorld.addToRef(minWorld, this.centerWorld).scaleInPlace(0.5);\r\n        } else {\r\n            minWorld.copyFrom(this.minimum);\r\n            maxWorld.copyFrom(this.maximum);\r\n            for (let index = 0; index < 8; ++index) {\r\n                vectorsWorld[index].copyFrom(vectors[index]);\r\n            }\r\n\r\n            // Extend\r\n            this.extendSizeWorld.copyFrom(this.extendSize);\r\n            this.centerWorld.copyFrom(this.center);\r\n        }\r\n\r\n        Vector3.FromArrayToRef(world.m, 0, directions[0]);\r\n        Vector3.FromArrayToRef(world.m, 4, directions[1]);\r\n        Vector3.FromArrayToRef(world.m, 8, directions[2]);\r\n\r\n        this._worldMatrix = world;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box is entirely inside the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return BoundingBox.IsCompletelyInFrustum(this.vectorsWorld, frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding box\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const min = this.minimumWorld;\r\n        const max = this.maximumWorld;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        const pointX = point.x,\r\n            pointY = point.y,\r\n            pointZ = point.z;\r\n        const delta = -Epsilon;\r\n\r\n        if (maxX - pointX < delta || delta > pointX - minX) {\r\n            return false;\r\n        }\r\n\r\n        if (maxY - pointY < delta || delta > pointY - minY) {\r\n            return false;\r\n        }\r\n\r\n        if (maxZ - pointZ < delta || delta > pointZ - minZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a bounding sphere\r\n     * @param sphere defines the sphere to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsSphere(sphere: DeepImmutable<BoundingSphere>): boolean {\r\n        return BoundingBox.IntersectsSphere(this.minimumWorld, this.maximumWorld, sphere.centerWorld, sphere.radiusWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding box intersects with a box defined by a min and max vectors\r\n     * @param min defines the min vector to use\r\n     * @param max defines the max vector to use\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMinMax(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>): boolean {\r\n        const myMin = this.minimumWorld;\r\n        const myMax = this.maximumWorld;\r\n        const myMinX = myMin.x,\r\n            myMinY = myMin.y,\r\n            myMinZ = myMin.z,\r\n            myMaxX = myMax.x,\r\n            myMaxY = myMax.y,\r\n            myMaxZ = myMax.z;\r\n        const minX = min.x,\r\n            minY = min.y,\r\n            minZ = min.z,\r\n            maxX = max.x,\r\n            maxY = max.y,\r\n            maxZ = max.z;\r\n        if (myMaxX < minX || myMinX > maxX) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxY < minY || myMinY > maxY) {\r\n            return false;\r\n        }\r\n\r\n        if (myMaxZ < minZ || myMinZ > maxZ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the class\r\n     */\r\n    public dispose(): void {\r\n        this._drawWrapperFront?.dispose();\r\n        this._drawWrapperBack?.dispose();\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Tests if two bounding boxes are intersections\r\n     * @param box0 defines the first box to test\r\n     * @param box1 defines the second box to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static Intersects(box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean {\r\n        return box0.intersectsMinMax(box1.minimumWorld, box1.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defines by a min/max vectors intersects a sphere\r\n     * @param minPoint defines the minimum vector of the bounding box\r\n     * @param maxPoint defines the maximum vector of the bounding box\r\n     * @param sphereCenter defines the sphere center\r\n     * @param sphereRadius defines the sphere radius\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IntersectsSphere(minPoint: DeepImmutable<Vector3>, maxPoint: DeepImmutable<Vector3>, sphereCenter: DeepImmutable<Vector3>, sphereRadius: number): boolean {\r\n        const vector = BoundingBox._TmpVector3[0];\r\n        Vector3.ClampToRef(sphereCenter, minPoint, maxPoint, vector);\r\n        const num = Vector3.DistanceSquared(sphereCenter, vector);\r\n        return num <= sphereRadius * sphereRadius;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors is entirely inside frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an inclusion\r\n     */\r\n    public static IsCompletelyInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a bounding box defined with 8 vectors intersects frustum planes\r\n     * @param boundingVectors defines an array of 8 vectors representing a bounding box\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public static IsInFrustum(boundingVectors: Array<DeepImmutable<Vector3>>, frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        for (let p = 0; p < 6; ++p) {\r\n            let canReturnFalse = true;\r\n            const frustumPlane = frustumPlanes[p];\r\n            for (let i = 0; i < 8; ++i) {\r\n                if (frustumPlane.dotCoordinate(boundingVectors[i]) >= 0) {\r\n                    canReturnFalse = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (canReturnFalse) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @internal\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n", "import type { DeepImmutable } from \"../types\";\r\nimport { BuildArray } from \"../Misc/arrayTools\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { TmpVectors, Vector3 } from \"../Maths/math.vector\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { BoundingBox } from \"./boundingBox\";\r\nimport { BoundingSphere } from \"./boundingSphere\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\n\r\nconst _Result0 = { min: 0, max: 0 };\r\nconst _Result1 = { min: 0, max: 0 };\r\nconst ComputeBoxExtents = (axis: DeepImmutable<Vector3>, box: DeepImmutable<BoundingBox>, result: { min: number; max: number }) => {\r\n    const p = Vector3.Dot(box.centerWorld, axis);\r\n\r\n    const r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\r\n    const r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\r\n    const r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\r\n\r\n    const r = r0 + r1 + r2;\r\n    result.min = p - r;\r\n    result.max = p + r;\r\n};\r\n\r\nconst AxisOverlap = (axis: DeepImmutable<Vector3>, box0: DeepImmutable<BoundingBox>, box1: DeepImmutable<BoundingBox>): boolean => {\r\n    ComputeBoxExtents(axis, box0, _Result0);\r\n    ComputeBoxExtents(axis, box1, _Result1);\r\n    return !(_Result0.min > _Result1.max || _Result1.min > _Result0.max);\r\n};\r\n\r\n/**\r\n * Interface for cullable objects\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#back-face-culling\r\n */\r\nexport interface ICullable {\r\n    /**\r\n     * Checks if the object or part of the object is in the frustum\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isInFrustum(frustumPlanes: Plane[]): boolean;\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    isCompletelyInFrustum(frustumPlanes: Plane[]): boolean;\r\n}\r\n\r\n/**\r\n * Info for a bounding data of a mesh\r\n */\r\nexport class BoundingInfo implements ICullable {\r\n    /**\r\n     * Bounding box for the mesh\r\n     */\r\n    public readonly boundingBox: BoundingBox;\r\n    /**\r\n     * Bounding sphere for the mesh\r\n     */\r\n    public readonly boundingSphere: BoundingSphere;\r\n\r\n    private _isLocked = false;\r\n\r\n    private static readonly _TmpVector3 = BuildArray(2, Vector3.Zero);\r\n\r\n    /**\r\n     * Constructs bounding info\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\r\n        this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding info from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.boundingBox.reConstruct(min, max, worldMatrix);\r\n        this.boundingSphere.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * min vector of the bounding box/sphere\r\n     */\r\n    public get minimum(): Vector3 {\r\n        return this.boundingBox.minimum;\r\n    }\r\n\r\n    /**\r\n     * max vector of the bounding box/sphere\r\n     */\r\n    public get maximum(): Vector3 {\r\n        return this.boundingBox.maximum;\r\n    }\r\n\r\n    /**\r\n     * If the info is locked and won't be updated to avoid perf overhead\r\n     */\r\n    public get isLocked(): boolean {\r\n        return this._isLocked;\r\n    }\r\n\r\n    public set isLocked(value: boolean) {\r\n        this._isLocked = value;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the bounding sphere and box\r\n     * @param world world matrix to be used to update\r\n     */\r\n    public update(world: DeepImmutable<Matrix>) {\r\n        if (this._isLocked) {\r\n            return;\r\n        }\r\n        this.boundingBox._update(world);\r\n        this.boundingSphere._update(world);\r\n    }\r\n\r\n    /**\r\n     * Recreate the bounding info to be centered around a specific point given a specific extend.\r\n     * @param center New center of the bounding info\r\n     * @param extend New extend of the bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public centerOn(center: DeepImmutable<Vector3>, extend: DeepImmutable<Vector3>): BoundingInfo {\r\n        const minimum = BoundingInfo._TmpVector3[0].copyFrom(center).subtractInPlace(extend);\r\n        const maximum = BoundingInfo._TmpVector3[1].copyFrom(center).addInPlace(extend);\r\n\r\n        this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n        this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to include the given point.\r\n     * @param point The point that will be included in the current bounding info (in local space)\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulate(point: Vector3): BoundingInfo {\r\n        const minimum = Vector3.Minimize(this.minimum, point);\r\n        const maximum = Vector3.Maximize(this.maximum, point);\r\n        this.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Grows the bounding info to encapsulate the given bounding info.\r\n     * @param toEncapsulate The bounding info that will be encapsulated in the current bounding info\r\n     * @returns the current bounding info\r\n     */\r\n    public encapsulateBoundingInfo(toEncapsulate: BoundingInfo): BoundingInfo {\r\n        const invw = TmpVectors.Matrix[0];\r\n        this.boundingBox.getWorldMatrix().invertToRef(invw);\r\n\r\n        const v = TmpVectors.Vector3[0];\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.minimumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        Vector3.TransformCoordinatesToRef(toEncapsulate.boundingBox.maximumWorld, invw, v);\r\n        this.encapsulate(v);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding info by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding info\r\n     */\r\n    public scale(factor: number): BoundingInfo {\r\n        this.boundingBox.scale(factor);\r\n        this.boundingSphere.scale(factor);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\r\n     * The different strategies available are:\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD most accurate but slower @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_STANDARD\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY faster but less accurate @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * * BABYLON.AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY can be faster if always visible @see https://doc.babylonjs.com/typedoc/classes/BABYLON.AbstractMesh#CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * @returns true if the bounding info is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>, strategy: number = Constants.MESHES_CULLINGSTRATEGY_STANDARD): boolean {\r\n        const inclusionTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (inclusionTest) {\r\n            if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        const bSphereOnlyTest =\r\n            strategy === Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY || strategy === Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n        if (bSphereOnlyTest) {\r\n            return true;\r\n        }\r\n\r\n        return this.boundingBox.isInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * Gets the world distance between the min and max points of the bounding box\r\n     */\r\n    public get diagonalLength(): number {\r\n        const boundingBox = this.boundingBox;\r\n        const diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo._TmpVector3[0]);\r\n        return diag.length();\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param frustumPlanes Camera near/planes\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): boolean {\r\n        return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\r\n    }\r\n\r\n    /**\r\n     * Checks if a point is inside the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param point the point to check intersection with\r\n     * @returns if the point intersects\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        if (!this.boundingSphere.centerWorld) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingSphere.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.boundingBox.intersectsPoint(point)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     * @param boundingInfo the bounding info to check intersection with\r\n     * @param precise if the intersection should be done using OBB\r\n     * @returns if the bounding info intersects\r\n     */\r\n    public intersects(boundingInfo: DeepImmutable<BoundingInfo>, precise: boolean): boolean {\r\n        if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\r\n            return false;\r\n        }\r\n\r\n        if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\r\n            return false;\r\n        }\r\n\r\n        if (!precise) {\r\n            return true;\r\n        }\r\n\r\n        const box0 = this.boundingBox;\r\n        const box1 = boundingInfo.boundingBox;\r\n\r\n        if (!AxisOverlap(box0.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(box0.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(box0.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(box1.directions[0], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(box1.directions[1], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(box1.directions[2], box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\r\n            return false;\r\n        }\r\n        if (!AxisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n", "import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport type { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Quaternion } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Viewport } from \"../Maths/math.viewport\";\r\nimport { Frustum } from \"../Maths/math.frustum\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { FreeCamera } from \"./freeCamera\";\r\nimport type { TargetCamera } from \"./targetCamera\";\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { ArcRotateCamera } from \"./arcRotateCamera\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\n/**\r\n * Oblique projection values\r\n */\r\nexport interface IObliqueParams {\r\n    /** The angle of the plane */\r\n    angle: number;\r\n    /** The length of the plane */\r\n    length: number;\r\n    /** The offset of the plane */\r\n    offset: number;\r\n}\r\n\r\n/**\r\n * This is the base class of all the camera used in the application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class Camera extends Node {\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _CreateDefaultParsedCamera = (name: string, scene: Scene): Camera => {\r\n        throw _WarnImport(\"UniversalCamera\");\r\n    };\r\n\r\n    /**\r\n     * This is the default projection mode used by the cameras.\r\n     * It helps recreating a feeling of perspective and better appreciate depth.\r\n     * This is the best way to simulate real life cameras.\r\n     */\r\n    public static readonly PERSPECTIVE_CAMERA = Constants.PERSPECTIVE_CAMERA;\r\n    /**\r\n     * This helps creating camera with an orthographic mode.\r\n     * Orthographic is commonly used in engineering as a means to produce object specifications that communicate dimensions unambiguously, each line of 1 unit length (cm, meter..whatever) will appear to have the same length everywhere on the drawing. This allows the drafter to dimension only a subset of lines and let the reader know that other lines of that length on the drawing are also that length in reality. Every parallel line in the drawing is also parallel in the object.\r\n     */\r\n    public static readonly ORTHOGRAPHIC_CAMERA = Constants.ORTHOGRAPHIC_CAMERA;\r\n\r\n    /**\r\n     * This is the default FOV mode for perspective cameras.\r\n     * This setting aligns the upper and lower bounds of the viewport to the upper and lower bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_VERTICAL_FIXED = Constants.FOVMODE_VERTICAL_FIXED;\r\n    /**\r\n     * This setting aligns the left and right bounds of the viewport to the left and right bounds of the camera frustum.\r\n     */\r\n    public static readonly FOVMODE_HORIZONTAL_FIXED = Constants.FOVMODE_HORIZONTAL_FIXED;\r\n\r\n    /**\r\n     * This specifies there is no need for a camera rig.\r\n     * Basically only one eye is rendered corresponding to the camera.\r\n     */\r\n    public static readonly RIG_MODE_NONE = Constants.RIG_MODE_NONE;\r\n    /**\r\n     * Simulates a camera Rig with one blue eye and one red eye.\r\n     * This can be use with 3d blue and red glasses.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_ANAGLYPH = Constants.RIG_MODE_STEREOSCOPIC_ANAGLYPH;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered side by side with a none parallel target.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED = Constants.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered over under each other.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_OVERUNDER = Constants.RIG_MODE_STEREOSCOPIC_OVERUNDER;\r\n    /**\r\n     * Defines that both eyes of the camera will be rendered on successive lines interlaced for passive 3d monitors.\r\n     */\r\n    public static readonly RIG_MODE_STEREOSCOPIC_INTERLACED = Constants.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    /**\r\n     * Defines that both eyes of the camera should be renderered in a VR mode (carbox).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static readonly RIG_MODE_VR = Constants.RIG_MODE_VR;\r\n    /**\r\n     * Custom rig mode allowing rig cameras to be populated manually with any number of cameras\r\n     */\r\n    public static readonly RIG_MODE_CUSTOM = Constants.RIG_MODE_CUSTOM;\r\n\r\n    /**\r\n     * Defines if by default attaching controls should prevent the default javascript event to continue.\r\n     */\r\n    public static ForceAttachControlToAlwaysPreventDefault = false;\r\n\r\n    /**\r\n     * Define the input manager associated with the camera.\r\n     */\r\n    public inputs: CameraInputsManager<Camera>;\r\n\r\n    /** @internal */\r\n    @serializeAsVector3(\"position\")\r\n    public _position = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current local position of the camera in the scene\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n    }\r\n\r\n    @serializeAsVector3(\"upVector\")\r\n    protected _upVector = Vector3.Up();\r\n\r\n    /**\r\n     * The vector the camera should consider as up.\r\n     * (default is Vector3(0, 1, 0) aka Vector3.Up())\r\n     */\r\n    public set upVector(vec: Vector3) {\r\n        this._upVector = vec;\r\n    }\r\n\r\n    public get upVector() {\r\n        return this._upVector;\r\n    }\r\n\r\n    /**\r\n     * Object containing oblique projection values (only used with ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    public oblique: Nullable<IObliqueParams> = null;\r\n\r\n    /**\r\n     * The screen area in scene units squared\r\n     */\r\n    public get screenArea(): number {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            if (this.fovMode === Camera.FOVMODE_VERTICAL_FIXED) {\r\n                y = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                x = this.getEngine().getAspectRatio(this) * y;\r\n            } else {\r\n                x = this.minZ * 2 * Math.tan(this.fov / 2);\r\n                y = x / this.getEngine().getAspectRatio(this);\r\n            }\r\n        } else {\r\n            const halfWidth = this.getEngine().getRenderWidth() / 2.0;\r\n            const halfHeight = this.getEngine().getRenderHeight() / 2.0;\r\n\r\n            x = (this.orthoRight ?? halfWidth) - (this.orthoLeft ?? -halfWidth);\r\n            y = (this.orthoTop ?? halfHeight) - (this.orthoBottom ?? -halfHeight);\r\n        }\r\n\r\n        return x * y;\r\n    }\r\n\r\n    private _orthoLeft: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the left side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoLeft(value: Nullable<number>) {\r\n        this._orthoLeft = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoLeft = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoLeft(): Nullable<number> {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    private _orthoRight: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the right side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoRight(value: Nullable<number>) {\r\n        this._orthoRight = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoRight = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoRight(): Nullable<number> {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    private _orthoBottom: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the bottom side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoBottom(value: Nullable<number>) {\r\n        this._orthoBottom = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoBottom = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoBottom(): Nullable<number> {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    private _orthoTop: Nullable<number> = null;\r\n\r\n    /**\r\n     * Define the current limit on the top side for an orthographic camera\r\n     * In scene unit\r\n     */\r\n    public set orthoTop(value: Nullable<number>) {\r\n        this._orthoTop = value;\r\n\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.orthoTop = value;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    public get orthoTop(): Nullable<number> {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    /**\r\n     * Field Of View is set in Radians. (default is 0.8)\r\n     */\r\n    @serialize()\r\n    public fov = 0.8;\r\n\r\n    /**\r\n     * Sets the camera's field of view in radians based on the focal length and sensor size.\r\n     * @param value the focal length of the camera in mm.\r\n     * @param sensorSize the sensor width size of the camera in mm. (default is 36mm, which is a full frame sensor)\r\n     */\r\n    public setFocalLength(value: number, sensorSize: number = 36) {\r\n        this.fov = 2 * Math.atan(sensorSize / (2 * value));\r\n    }\r\n\r\n    /**\r\n     * Projection plane tilt around the X axis (horizontal), set in Radians. (default is 0)\r\n     * Can be used to make vertical lines in world space actually vertical on the screen.\r\n     * See https://forum.babylonjs.com/t/add-vertical-shift-to-3ds-max-exporter-babylon-cameras/17480\r\n     */\r\n    @serialize()\r\n    public projectionPlaneTilt = 0;\r\n\r\n    /**\r\n     * Define the minimum distance the camera can see from.\r\n     * This is important to note that the depth buffer are not infinite and the closer it starts\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public minZ = 1;\r\n\r\n    /**\r\n     * Define the maximum distance the camera can see to.  (default is 10000)\r\n     * This is important to note that the depth buffer are not infinite and the further it end\r\n     * the more your scene might encounter depth fighting issue.\r\n     */\r\n    @serialize()\r\n    public maxZ = 10000.0;\r\n\r\n    /**\r\n     * Define the default inertia of the camera.\r\n     * This helps giving a smooth feeling to the camera movement.\r\n     */\r\n    @serialize()\r\n    public inertia = 0.9;\r\n\r\n    private _mode = Camera.PERSPECTIVE_CAMERA;\r\n\r\n    /**\r\n     * Define the mode of the camera (Camera.PERSPECTIVE_CAMERA or Camera.ORTHOGRAPHIC_CAMERA)\r\n     */\r\n    set mode(mode: number) {\r\n        this._mode = mode;\r\n\r\n        // Pass the mode down to the rig cameras\r\n        for (const rigCamera of this._rigCameras) {\r\n            rigCamera.mode = mode;\r\n        }\r\n    }\r\n\r\n    @serialize()\r\n    get mode(): number {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Define whether the camera is intermediate.\r\n     * This is useful to not present the output directly to the screen in case of rig without post process for instance\r\n     */\r\n    public isIntermediate = false;\r\n\r\n    /**\r\n     * Define the viewport of the camera.\r\n     * This correspond to the portion of the screen the camera will render to in normalized 0 to 1 unit.\r\n     */\r\n    public viewport = new Viewport(0, 0, 1.0, 1.0);\r\n\r\n    /**\r\n     * Restricts the camera to viewing objects with the same layerMask.\r\n     * A camera with a layerMask of 1 will render mesh.layerMask & camera.layerMask!== 0\r\n     */\r\n    @serialize()\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * fovMode sets the camera frustum bounds to the viewport bounds. (default is FOVMODE_VERTICAL_FIXED)\r\n     */\r\n    @serialize()\r\n    public fovMode: number = Camera.FOVMODE_VERTICAL_FIXED;\r\n\r\n    /**\r\n     * Rig mode of the camera.\r\n     * This is useful to create the camera with two \"eyes\" instead of one to create VR or stereoscopic scenes.\r\n     * This is normally controlled byt the camera themselves as internal use.\r\n     */\r\n    @serialize()\r\n    public cameraRigMode = Camera.RIG_MODE_NONE;\r\n\r\n    /**\r\n     * Defines the distance between both \"eyes\" in case of a RIG\r\n     */\r\n    @serialize()\r\n    public interaxialDistance: number;\r\n\r\n    /**\r\n     * Defines if stereoscopic rendering is done side by side or over under.\r\n     */\r\n    @serialize()\r\n    public isStereoscopicSideBySide: boolean;\r\n\r\n    /**\r\n     * Defines the list of custom render target which are rendered to and then used as the input to this camera's render. Eg. display another camera view on a TV in the main scene\r\n     * This is pretty helpful if you wish to make a camera render to a texture you could reuse somewhere\r\n     * else in the scene. (Eg. security camera)\r\n     *\r\n     * To change the final output target of the camera, camera.outputRenderTarget should be used instead (eg. webXR renders to a render target corresponding to an HMD)\r\n     */\r\n    public customRenderTargets: RenderTargetTexture[] = [];\r\n    /**\r\n     * When set, the camera will render to this render target instead of the default canvas\r\n     *\r\n     * If the desire is to use the output of a camera as a texture in the scene consider using camera.customRenderTargets instead\r\n     */\r\n    public outputRenderTarget: Nullable<RenderTargetTexture> = null;\r\n\r\n    /**\r\n     * Observable triggered when the camera view matrix has changed.\r\n     * Beware of reentrance! Some methods like Camera.getViewMatrix and Camera.getWorldMatrix can trigger the onViewMatrixChangedObservable\r\n     * observable, so using them inside an observer will require additional logic to avoid a stack overflow error.\r\n     */\r\n    public onViewMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the camera Projection matrix has changed.\r\n     */\r\n    public onProjectionMatrixChangedObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when the inputs have been processed.\r\n     */\r\n    public onAfterCheckInputsObservable = new Observable<Camera>();\r\n    /**\r\n     * Observable triggered when reset has been called and applied to the camera.\r\n     */\r\n    public onRestoreStateObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Is this camera a part of a rig system?\r\n     */\r\n    public isRigCamera: boolean = false;\r\n\r\n    /**\r\n     * If isRigCamera set to true this will be set with the parent camera.\r\n     * The parent camera is not (!) necessarily the .parent of this camera (like in the case of XR)\r\n     */\r\n    public rigParent?: Camera;\r\n\r\n    /**\r\n     * Render pass id used by the camera to render into the main framebuffer\r\n     */\r\n    public renderPassId: number;\r\n\r\n    private _hasMoved = false;\r\n\r\n    /**\r\n     * Gets a flag indicating that the camera has moved in some way since the last call to Camera.update()\r\n     */\r\n    public get hasMoved() {\r\n        return this._hasMoved;\r\n    }\r\n\r\n    /** @internal */\r\n    public _cameraRigParams: any;\r\n    /** @internal */\r\n    public _rigCameras = new Array<Camera>();\r\n    /** @internal */\r\n    public _rigPostProcess: Nullable<PostProcess>;\r\n\r\n    /** @internal */\r\n    public _skipRendering = false;\r\n\r\n    /** @internal */\r\n    public _projectionMatrix = new Matrix();\r\n\r\n    /** @internal */\r\n    public _postProcesses = new Array<Nullable<PostProcess>>();\r\n\r\n    /** @internal */\r\n    public _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n\r\n    protected _globalPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _computedViewMatrix = Matrix.Identity();\r\n    private _doNotComputeProjectionMatrix = false;\r\n    private _transformMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public _frustumPlanes: Plane[];\r\n    private _refreshFrustumPlanes = true;\r\n    private _storedFov: number;\r\n    private _stateStored: boolean;\r\n    private _absoluteRotation: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Instantiates a new camera object.\r\n     * This should not be used directly but through the inherited cameras: ArcRotate, Free...\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the position of the camera\r\n     * @param scene Defines the scene the camera belongs too\r\n     * @param setActiveOnSceneIfNoneActive Defines if the camera should be set as active after creation if no other camera have been defined in the scene\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, scene, false);\r\n\r\n        this.getScene().addCamera(this);\r\n\r\n        if (setActiveOnSceneIfNoneActive && !this.getScene().activeCamera) {\r\n            this.getScene().activeCamera = this;\r\n        }\r\n\r\n        this.position = position;\r\n        this.renderPassId = this.getScene().getEngine().createRenderPassId(`Camera ${name}`);\r\n    }\r\n\r\n    /**\r\n     * Store current camera state (fov, position, etc..)\r\n     * @returns the camera\r\n     */\r\n    public storeState(): Camera {\r\n        this._stateStored = true;\r\n        this._storedFov = this.fov;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if a state has been stored by calling storeState method.\r\n     * @returns true if state has been stored.\r\n     */\r\n    public hasStateStored(): boolean {\r\n        return !!this._stateStored;\r\n    }\r\n    /**\r\n     * Restores the camera state values if it has been stored. You must call storeState() first\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    protected _restoreStateValues(): boolean {\r\n        if (!this._stateStored) {\r\n            return false;\r\n        }\r\n\r\n        this.fov = this._storedFov;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first.\r\n     * @returns true if restored and false otherwise\r\n     */\r\n    public restoreState(): boolean {\r\n        if (this._restoreStateValues()) {\r\n            this.onRestoreStateObservable.notifyObservers(this);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the camera.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Camera\";\r\n    }\r\n\r\n    /** @internal */\r\n    public readonly _isCamera = true;\r\n\r\n    /**\r\n     * Gets a string representation of the camera useful for debug purpose.\r\n     * @param fullDetails Defines that a more verbose level of logging is required\r\n     * @returns the string representation\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name;\r\n        ret += \", type: \" + this.getClassName();\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Automatically tilts the projection plane, using `projectionPlaneTilt`, to correct the perspective effect on vertical lines.\r\n     */\r\n    public applyVerticalCorrection() {\r\n        const rot = this.absoluteRotation.toEulerAngles();\r\n\r\n        this.projectionPlaneTilt = this._scene.useRightHandedSystem ? -rot.x : rot.x;\r\n    }\r\n\r\n    /**\r\n     * Gets the current world space position of the camera.\r\n     */\r\n    public get globalPosition(): Vector3 {\r\n        return this._globalPosition;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of active meshes this frame (meshes no culled or excluded by lod s in the frame)\r\n     * @returns the active meshe list\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Check whether a mesh is part of the current active mesh list of the camera\r\n     * @param mesh Defines the mesh to check\r\n     * @returns true if active, false otherwise\r\n     */\r\n    public isActiveMesh(mesh: Mesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Is this camera ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including post processes) has to be done (false by default)\r\n     * @returns true if the camera is ready\r\n     */\r\n    public override isReady(completeCheck = false): boolean {\r\n        if (completeCheck) {\r\n            for (const pp of this._postProcesses) {\r\n                if (pp && !pp.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return super.isReady(completeCheck);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _initCache() {\r\n        super._initCache();\r\n\r\n        this._cache.position = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.upVector = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n        this._cache.mode = undefined;\r\n        this._cache.minZ = undefined;\r\n        this._cache.maxZ = undefined;\r\n\r\n        this._cache.fov = undefined;\r\n        this._cache.fovMode = undefined;\r\n        this._cache.aspectRatio = undefined;\r\n\r\n        this._cache.orthoLeft = undefined;\r\n        this._cache.orthoRight = undefined;\r\n        this._cache.orthoBottom = undefined;\r\n        this._cache.orthoTop = undefined;\r\n        this._cache.obliqueAngle = undefined;\r\n        this._cache.obliqueLength = undefined;\r\n        this._cache.obliqueOffset = undefined;\r\n        this._cache.renderWidth = undefined;\r\n        this._cache.renderHeight = undefined;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        this._cache.position.copyFrom(this.position);\r\n        this._cache.upVector.copyFrom(this.upVector);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isSynchronized(): boolean {\r\n        return this._isSynchronizedViewMatrix() && this._isSynchronizedProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronized()) {\r\n            return false;\r\n        }\r\n\r\n        return this._cache.position.equals(this.position) && this._cache.upVector.equals(this.upVector) && this.isSynchronizedWithParent();\r\n    }\r\n\r\n    /** @internal */\r\n    public _isSynchronizedProjectionMatrix(): boolean {\r\n        let isSynchronized = this._cache.mode === this.mode && this._cache.minZ === this.minZ && this._cache.maxZ === this.maxZ;\r\n\r\n        if (!isSynchronized) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            isSynchronized =\r\n                this._cache.fov === this.fov &&\r\n                this._cache.fovMode === this.fovMode &&\r\n                this._cache.aspectRatio === engine.getAspectRatio(this) &&\r\n                this._cache.projectionPlaneTilt === this.projectionPlaneTilt;\r\n        } else {\r\n            isSynchronized =\r\n                this._cache.orthoLeft === this.orthoLeft &&\r\n                this._cache.orthoRight === this.orthoRight &&\r\n                this._cache.orthoBottom === this.orthoBottom &&\r\n                this._cache.orthoTop === this.orthoTop &&\r\n                this._cache.renderWidth === engine.getRenderWidth() &&\r\n                this._cache.renderHeight === engine.getRenderHeight();\r\n\r\n            if (this.oblique) {\r\n                isSynchronized =\r\n                    isSynchronized &&\r\n                    this._cache.obliqueAngle === this.oblique.angle &&\r\n                    this._cache.obliqueLength === this.oblique.length &&\r\n                    this._cache.obliqueOffset === this.oblique.offset;\r\n            }\r\n        }\r\n\r\n        return isSynchronized;\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param _noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(_ignored?: any, _noPreventDefault?: boolean): void {}\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(ignored?: any): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     * This function is here because typescript removes the typing of the last function.\r\n     * @param _ignored defines an ignored parameter kept for backward compatibility.\r\n     */\r\n    public detachControl(_ignored?: any): void {}\r\n\r\n    /**\r\n     * Update the camera state according to the different inputs gathered during the frame.\r\n     */\r\n    public update(): void {\r\n        this._hasMoved = false;\r\n        this._checkInputs();\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._updateRigCameras();\r\n        }\r\n\r\n        // Attempt to update the camera's view and projection matrices.\r\n        // This call is being made because these matrices are no longer being updated\r\n        // as a part of the picking ray process (in addition to scene.render).\r\n        this.getViewMatrix();\r\n        this.getProjectionMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkInputs(): void {\r\n        this.onAfterCheckInputsObservable.notifyObservers(this);\r\n    }\r\n\r\n    /** @internal */\r\n    public get rigCameras(): Camera[] {\r\n        return this._rigCameras;\r\n    }\r\n\r\n    /**\r\n     * Gets the post process used by the rig cameras\r\n     */\r\n    public get rigPostProcess(): Nullable<PostProcess> {\r\n        return this._rigPostProcess;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post process.\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    public _getFirstPostProcess(): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < this._postProcesses.length; ppIndex++) {\r\n            if (this._postProcesses[ppIndex] !== null) {\r\n                return this._postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _cascadePostProcessesToRigCams(): void {\r\n        // invalidate framebuffer\r\n        const firstPostProcess = this._getFirstPostProcess();\r\n        if (firstPostProcess) {\r\n            firstPostProcess.markTextureDirty();\r\n        }\r\n\r\n        // glue the rigPostProcess to the end of the user postprocesses & assign to each sub-camera\r\n        for (let i = 0, len = this._rigCameras.length; i < len; i++) {\r\n            const cam = this._rigCameras[i];\r\n            const rigPostProcess = cam._rigPostProcess;\r\n\r\n            // for VR rig, there does not have to be a post process\r\n            if (rigPostProcess) {\r\n                const isPass = rigPostProcess.getEffectName() === \"pass\";\r\n                if (isPass) {\r\n                    // any rig which has a PassPostProcess for rig[0], cannot be isIntermediate when there are also user postProcesses\r\n                    cam.isIntermediate = this._postProcesses.length === 0;\r\n                }\r\n                cam._postProcesses = this._postProcesses.slice(0).concat(rigPostProcess);\r\n                rigPostProcess.markTextureDirty();\r\n            } else {\r\n                cam._postProcesses = this._postProcesses.slice(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to attach to the camera\r\n     * @param insertAt The position of the post process in case several of them are in use in the scene\r\n     * @returns the position the post process has been inserted at\r\n     */\r\n    public attachPostProcess(postProcess: PostProcess, insertAt: Nullable<number> = null): number {\r\n        if (!postProcess.isReusable() && this._postProcesses.indexOf(postProcess) > -1) {\r\n            Logger.Error(\"You're trying to reuse a post process not defined as reusable.\");\r\n            return 0;\r\n        }\r\n\r\n        if (insertAt == null || insertAt < 0) {\r\n            this._postProcesses.push(postProcess);\r\n        } else if (this._postProcesses[insertAt] === null) {\r\n            this._postProcesses[insertAt] = postProcess;\r\n        } else {\r\n            this._postProcesses.splice(insertAt, 0, postProcess);\r\n        }\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        return this._postProcesses.indexOf(postProcess);\r\n    }\r\n\r\n    /**\r\n     * Detach a post process to the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/postProcesses/usePostProcesses#attach-postprocess\r\n     * @param postProcess The post process to detach from the camera\r\n     */\r\n    public detachPostProcess(postProcess: PostProcess): void {\r\n        const idx = this._postProcesses.indexOf(postProcess);\r\n        if (idx !== -1) {\r\n            this._postProcesses[idx] = null;\r\n        }\r\n\r\n        // Update prePass\r\n        if (this._scene.prePassRenderer) {\r\n            this._scene.prePassRenderer.markAsDirty();\r\n        }\r\n\r\n        this._cascadePostProcessesToRigCams(); // also ensures framebuffer invalidated\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix of the camera\r\n     * @returns the world matrix\r\n     */\r\n    public override getWorldMatrix(): Matrix {\r\n        if (this._isSynchronizedViewMatrix()) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        // Getting the view matrix will also compute the world matrix.\r\n        this.getViewMatrix();\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getViewMatrix(): Matrix {\r\n        return Matrix.Identity();\r\n    }\r\n\r\n    /**\r\n     * Gets the current view matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the view matrix\r\n     */\r\n    public getViewMatrix(force?: boolean): Matrix {\r\n        if (!force && this._isSynchronizedViewMatrix()) {\r\n            return this._computedViewMatrix;\r\n        }\r\n\r\n        this._hasMoved = true;\r\n\r\n        this.updateCache();\r\n        this._computedViewMatrix = this._getViewMatrix();\r\n\r\n        this._currentRenderId = this.getScene().getRenderId();\r\n        this._childUpdateId++;\r\n\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        if (this._cameraRigParams && this._cameraRigParams.vrPreViewMatrix) {\r\n            this._computedViewMatrix.multiplyToRef(this._cameraRigParams.vrPreViewMatrix, this._computedViewMatrix);\r\n        }\r\n\r\n        // Notify parent camera if rig camera is changed\r\n        if (this.parent && (this.parent as Camera).onViewMatrixChangedObservable) {\r\n            (this.parent as Camera).onViewMatrixChangedObservable.notifyObservers(this.parent as Camera);\r\n        }\r\n\r\n        this.onViewMatrixChangedObservable.notifyObservers(this);\r\n\r\n        this._computedViewMatrix.invertToRef(this._worldMatrix);\r\n\r\n        return this._computedViewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Freeze the projection matrix.\r\n     * It will prevent the cache check of the camera projection compute and can speed up perf\r\n     * if no parameter of the camera are meant to change\r\n     * @param projection Defines manually a projection if necessary\r\n     */\r\n    public freezeProjectionMatrix(projection?: Matrix): void {\r\n        this._doNotComputeProjectionMatrix = true;\r\n        if (projection !== undefined) {\r\n            this._projectionMatrix = projection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze the projection matrix if it has previously been freezed by freezeProjectionMatrix.\r\n     */\r\n    public unfreezeProjectionMatrix(): void {\r\n        this._doNotComputeProjectionMatrix = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix of the camera.\r\n     * @param force forces the camera to recompute the matrix without looking at the cached state\r\n     * @returns the projection matrix\r\n     */\r\n    public getProjectionMatrix(force?: boolean): Matrix {\r\n        if (this._doNotComputeProjectionMatrix || (!force && this._isSynchronizedProjectionMatrix())) {\r\n            return this._projectionMatrix;\r\n        }\r\n\r\n        // Cache\r\n        this._cache.mode = this.mode;\r\n        this._cache.minZ = this.minZ;\r\n        this._cache.maxZ = this.maxZ;\r\n\r\n        // Matrix\r\n        this._refreshFrustumPlanes = true;\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const reverseDepth = engine.useReverseDepthBuffer;\r\n        if (this.mode === Camera.PERSPECTIVE_CAMERA) {\r\n            this._cache.fov = this.fov;\r\n            this._cache.fovMode = this.fovMode;\r\n            this._cache.aspectRatio = engine.getAspectRatio(this);\r\n            this._cache.projectionPlaneTilt = this.projectionPlaneTilt;\r\n\r\n            if (this.minZ <= 0) {\r\n                this.minZ = 0.1;\r\n            }\r\n\r\n            let getProjectionMatrix: (\r\n                fov: number,\r\n                aspect: number,\r\n                znear: number,\r\n                zfar: number,\r\n                result: Matrix,\r\n                isVerticalFovFixed: boolean,\r\n                halfZRange: boolean,\r\n                projectionPlaneTilt: number,\r\n                reverseDepthBufferMode: boolean\r\n            ) => void;\r\n            if (scene.useRightHandedSystem) {\r\n                getProjectionMatrix = Matrix.PerspectiveFovRHToRef;\r\n            } else {\r\n                getProjectionMatrix = Matrix.PerspectiveFovLHToRef;\r\n            }\r\n\r\n            getProjectionMatrix(\r\n                this.fov,\r\n                engine.getAspectRatio(this),\r\n                reverseDepth ? this.maxZ : this.minZ,\r\n                reverseDepth ? this.minZ : this.maxZ,\r\n                this._projectionMatrix,\r\n                this.fovMode === Camera.FOVMODE_VERTICAL_FIXED,\r\n                engine.isNDCHalfZRange,\r\n                this.projectionPlaneTilt,\r\n                reverseDepth\r\n            );\r\n        } else {\r\n            const halfWidth = engine.getRenderWidth() / 2.0;\r\n            const halfHeight = engine.getRenderHeight() / 2.0;\r\n            if (scene.useRightHandedSystem) {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterRHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            } else {\r\n                if (this.oblique) {\r\n                    Matrix.ObliqueOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this.oblique.length,\r\n                        this.oblique.angle,\r\n                        this._computeObliqueDistance(this.oblique.offset),\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                } else {\r\n                    Matrix.OrthoOffCenterLHToRef(\r\n                        this.orthoLeft ?? -halfWidth,\r\n                        this.orthoRight ?? halfWidth,\r\n                        this.orthoBottom ?? -halfHeight,\r\n                        this.orthoTop ?? halfHeight,\r\n                        reverseDepth ? this.maxZ : this.minZ,\r\n                        reverseDepth ? this.minZ : this.maxZ,\r\n                        this._projectionMatrix,\r\n                        engine.isNDCHalfZRange\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._cache.orthoLeft = this.orthoLeft;\r\n            this._cache.orthoRight = this.orthoRight;\r\n            this._cache.orthoBottom = this.orthoBottom;\r\n            this._cache.orthoTop = this.orthoTop;\r\n            this._cache.obliqueAngle = this.oblique?.angle;\r\n            this._cache.obliqueLength = this.oblique?.length;\r\n            this._cache.obliqueOffset = this.oblique?.offset;\r\n            this._cache.renderWidth = engine.getRenderWidth();\r\n            this._cache.renderHeight = engine.getRenderHeight();\r\n        }\r\n\r\n        this.onProjectionMatrixChangedObservable.notifyObservers(this);\r\n\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix (ie. the multiplication of view by projection matrices)\r\n     * @returns a Matrix\r\n     */\r\n    public getTransformationMatrix(): Matrix {\r\n        this._computedViewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    private _computeObliqueDistance(offset: number): number {\r\n        const arcRotateCamera = this as Camera as ArcRotateCamera;\r\n        const targetCamera = this as Camera as TargetCamera;\r\n        return (arcRotateCamera.radius || (targetCamera.target ? Vector3.Distance(this.position, targetCamera.target) : this.position.length())) + offset;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateFrustumPlanes(): void {\r\n        if (!this._refreshFrustumPlanes) {\r\n            return;\r\n        }\r\n\r\n        this.getTransformationMatrix();\r\n\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        this._refreshFrustumPlanes = false;\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * This checks the bounding box center. See isCompletelyInFrustum for a full bounding check\r\n     * @param target The object to check\r\n     * @param checkRigCameras If the rig cameras should be checked (eg. with VR camera both eyes should be checked) (Default: false)\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isInFrustum(target: ICullable, checkRigCameras = false): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        if (checkRigCameras && this.rigCameras.length > 0) {\r\n            let result = false;\r\n            for (const cam of this.rigCameras) {\r\n                cam._updateFrustumPlanes();\r\n                result = result || target.isInFrustum(cam._frustumPlanes);\r\n            }\r\n            return result;\r\n        } else {\r\n            return target.isInFrustum(this._frustumPlanes);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a cullable object (mesh...) is in the camera frustum\r\n     * Unlike isInFrustum this checks the full bounding box\r\n     * @param target The object to check\r\n     * @returns true if the object is in frustum otherwise false\r\n     */\r\n    public isCompletelyInFrustum(target: ICullable): boolean {\r\n        this._updateFrustumPlanes();\r\n\r\n        return target.isCompletelyInFrustum(this._frustumPlanes);\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a world space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRay(length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Gets a ray in the forward direction from the camera.\r\n     * @param refRay the ray to (re)use when setting the values\r\n     * @param length Defines the length of the ray to create\r\n     * @param transform Defines the transform to apply to the ray, by default the world matrix is used to create a world space ray\r\n     * @param origin Defines the start point of the ray which defaults to the camera position\r\n     * @returns the forward ray\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getForwardRayToRef(refRay: Ray, length = 100, transform?: Matrix, origin?: Vector3): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Observables\r\n        this.onViewMatrixChangedObservable.clear();\r\n        this.onProjectionMatrixChangedObservable.clear();\r\n        this.onAfterCheckInputsObservable.clear();\r\n        this.onRestoreStateObservable.clear();\r\n\r\n        // Inputs\r\n        if (this.inputs) {\r\n            this.inputs.clear();\r\n        }\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeCamera(this);\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.cameras.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.cameras.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        // Postprocesses\r\n        if (this._rigPostProcess) {\r\n            this._rigPostProcess.dispose(this);\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            this._rigPostProcess = null;\r\n            this._postProcesses.length = 0;\r\n        } else {\r\n            let i = this._postProcesses.length;\r\n            while (--i >= 0) {\r\n                const postProcess = this._postProcesses[i];\r\n                if (postProcess) {\r\n                    postProcess.dispose(this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        let i = this.customRenderTargets.length;\r\n        while (--i >= 0) {\r\n            this.customRenderTargets[i].dispose();\r\n        }\r\n        this.customRenderTargets.length = 0;\r\n\r\n        // Active Meshes\r\n        this._activeMeshes.dispose();\r\n\r\n        this.getScene().getEngine().releaseRenderPassId(this.renderPassId);\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _isLeftCamera = false;\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isLeftCamera(): boolean {\r\n        return this._isLeftCamera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _isRightCamera = false;\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get isRightCamera(): boolean {\r\n        return this._isRightCamera;\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get leftCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera of a rig setup in case of Rigged Camera\r\n     */\r\n    public get rightCamera(): Nullable<FreeCamera> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return <FreeCamera>this._rigCameras[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the left camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getLeftTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 1) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[0]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * Gets the right camera target of a rig setup in case of Rigged Camera\r\n     * @returns the target position\r\n     */\r\n    public getRightTarget(): Nullable<Vector3> {\r\n        if (this._rigCameras.length < 2) {\r\n            return null;\r\n        }\r\n        return (<TargetCamera>this._rigCameras[1]).getTarget();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigMode(mode: number, rigParams: any): void {\r\n        if (this.cameraRigMode === mode) {\r\n            return;\r\n        }\r\n\r\n        while (this._rigCameras.length > 0) {\r\n            const camera = this._rigCameras.pop();\r\n\r\n            if (camera) {\r\n                camera.dispose();\r\n            }\r\n        }\r\n        this.cameraRigMode = mode;\r\n        this._cameraRigParams = {};\r\n        //we have to implement stereo camera calcultating left and right viewpoints from interaxialDistance and target,\r\n        //not from a given angle as it is now, but until that complete code rewriting provisional stereoHalfAngle value is introduced\r\n        this._cameraRigParams.interaxialDistance = rigParams.interaxialDistance || 0.0637;\r\n        this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(this._cameraRigParams.interaxialDistance / 0.0637);\r\n\r\n        // create the rig cameras, unless none\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const leftCamera = this.createRigCamera(this.name + \"_L\", 0);\r\n            if (leftCamera) {\r\n                leftCamera._isLeftCamera = true;\r\n            }\r\n            const rightCamera = this.createRigCamera(this.name + \"_R\", 1);\r\n            if (rightCamera) {\r\n                rightCamera._isRightCamera = true;\r\n            }\r\n            if (leftCamera && rightCamera) {\r\n                this._rigCameras.push(leftCamera);\r\n                this._rigCameras.push(rightCamera);\r\n            }\r\n        }\r\n\r\n        this._setRigMode(rigParams);\r\n\r\n        this._cascadePostProcessesToRigCams();\r\n        this.update();\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setRigMode(rigParams: any) {\r\n        // no-op\r\n    }\r\n\r\n    /** @internal */\r\n    public _getVRProjectionMatrix(): Matrix {\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this._cameraRigParams.vrMetrics.aspectRatioFov,\r\n            this._cameraRigParams.vrMetrics.aspectRatio,\r\n            this.minZ,\r\n            this.maxZ,\r\n            this._cameraRigParams.vrWorkMatrix,\r\n            true,\r\n            this.getEngine().isNDCHalfZRange\r\n        );\r\n        this._cameraRigParams.vrWorkMatrix.multiplyToRef(this._cameraRigParams.vrHMatrix, this._projectionMatrix);\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public setCameraRigParameter(name: string, value: any) {\r\n        if (!this._cameraRigParams) {\r\n            this._cameraRigParams = {};\r\n        }\r\n        this._cameraRigParams[name] = value;\r\n        //provisionnally:\r\n        if (name === \"interaxialDistance\") {\r\n            this._cameraRigParams.stereoHalfAngle = Tools.ToRadians(value / 0.0637);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * needs to be overridden by children so sub has required properties to be copied\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * May need to be overridden by children\r\n     * @internal\r\n     */\r\n    public _updateRigCameras() {\r\n        for (let i = 0; i < this._rigCameras.length; i++) {\r\n            this._rigCameras[i].minZ = this.minZ;\r\n            this._rigCameras[i].maxZ = this.maxZ;\r\n            this._rigCameras[i].fov = this.fov;\r\n            this._rigCameras[i].upVector.copyFrom(this.upVector);\r\n        }\r\n\r\n        // only update viewport when ANAGLYPH\r\n        if (this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH) {\r\n            this._rigCameras[0].viewport = this._rigCameras[1].viewport = this.viewport;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _setupInputs() {}\r\n\r\n    /**\r\n     * Serialiaze the camera setup to a json representation\r\n     * @returns the JSON representation\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Type\r\n        serializationObject.type = this.getClassName();\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        if (this.inputs) {\r\n            this.inputs.serialize(serializationObject);\r\n        }\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Clones the current camera.\r\n     * @param name The cloned camera name\r\n     * @param newParent The cloned camera's new parent (none by default)\r\n     * @returns the cloned camera\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node> = null): Camera {\r\n        const camera = SerializationHelper.Clone(\r\n            Camera.GetConstructorFromName(this.getClassName(), name, this.getScene(), this.interaxialDistance, this.isStereoscopicSideBySide),\r\n            this\r\n        );\r\n        camera.name = name;\r\n        camera.parent = newParent;\r\n\r\n        this.onClonedObservable.notifyObservers(camera);\r\n\r\n        return camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @returns the direction\r\n     */\r\n    public getDirection(localAxis: DeepImmutable<Vector3>): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the current camera absolute rotation\r\n     */\r\n    public get absoluteRotation(): Quaternion {\r\n        this.getWorldMatrix().decompose(undefined, this._absoluteRotation);\r\n\r\n        return this._absoluteRotation;\r\n    }\r\n\r\n    /**\r\n     * Gets the direction of the camera relative to a given local axis into a passed vector.\r\n     * @param localAxis Defines the reference axis to provide a relative direction.\r\n     * @param result Defines the vector to store the result in\r\n     */\r\n    public getDirectionToRef(localAxis: DeepImmutable<Vector3>, result: Vector3): void {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n    }\r\n\r\n    /**\r\n     * Gets a camera constructor for a given camera type\r\n     * @param type The type of the camera to construct (should be equal to one of the camera class name)\r\n     * @param name The name of the camera the result will be able to instantiate\r\n     * @param scene The scene the result will construct the camera in\r\n     * @param interaxial_distance In case of stereoscopic setup, the distance between both eyes\r\n     * @param isStereoscopicSideBySide In case of stereoscopic setup, should the sereo be side b side\r\n     * @returns a factory method to construct the camera\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    static GetConstructorFromName(type: string, name: string, scene: Scene, interaxial_distance: number = 0, isStereoscopicSideBySide: boolean = true): () => Camera {\r\n        const constructorFunc = Node.Construct(type, name, scene, {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            interaxial_distance: interaxial_distance,\r\n            isStereoscopicSideBySide: isStereoscopicSideBySide,\r\n        });\r\n\r\n        if (constructorFunc) {\r\n            return <() => Camera>constructorFunc;\r\n        }\r\n\r\n        // Default to universal camera\r\n        return () => Camera._CreateDefaultParsedCamera(name, scene);\r\n    }\r\n\r\n    /**\r\n     * Compute the world  matrix of the camera.\r\n     * @returns the camera world matrix\r\n     */\r\n    public override computeWorldMatrix(): Matrix {\r\n        return this.getWorldMatrix();\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON and creates the camera from the parsed information\r\n     * @param parsedCamera The JSON to parse\r\n     * @param scene The scene to instantiate the camera in\r\n     * @returns the newly constructed camera\r\n     */\r\n    public static Parse(parsedCamera: any, scene: Scene): Camera {\r\n        const type = parsedCamera.type;\r\n        const construct = Camera.GetConstructorFromName(type, parsedCamera.name, scene, parsedCamera.interaxial_distance, parsedCamera.isStereoscopicSideBySide);\r\n\r\n        const camera = SerializationHelper.Parse(construct, parsedCamera, scene);\r\n\r\n        // Parent\r\n        if (parsedCamera.parentId !== undefined) {\r\n            camera._waitingParentId = parsedCamera.parentId;\r\n        }\r\n\r\n        // Parent instance index\r\n        if (parsedCamera.parentInstanceIndex !== undefined) {\r\n            camera._waitingParentInstanceIndex = parsedCamera.parentInstanceIndex;\r\n        }\r\n\r\n        //If camera has an input manager, let it parse inputs settings\r\n        if (camera.inputs) {\r\n            camera.inputs.parse(parsedCamera);\r\n\r\n            camera._setupInputs();\r\n        }\r\n\r\n        if (parsedCamera.upVector) {\r\n            camera.upVector = Vector3.FromArray(parsedCamera.upVector); // need to force the upVector\r\n        }\r\n\r\n        if ((<any>camera).setPosition) {\r\n            // need to force position\r\n            camera.position.copyFromFloats(0, 0, 0);\r\n            (<any>camera).setPosition(Vector3.FromArray(parsedCamera.position));\r\n        }\r\n\r\n        // Target\r\n        if (parsedCamera.target) {\r\n            if ((<any>camera).setTarget) {\r\n                (<any>camera).setTarget(Vector3.FromArray(parsedCamera.target));\r\n            }\r\n        }\r\n\r\n        // Apply 3d rig, when found\r\n        if (parsedCamera.cameraRigMode) {\r\n            const rigParams = parsedCamera.interaxial_distance ? { interaxialDistance: parsedCamera.interaxial_distance } : {};\r\n            camera.setCameraRigMode(parsedCamera.cameraRigMode, rigParams);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedCamera.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedCamera.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedCamera.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    camera.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(camera, parsedCamera, scene);\r\n        }\r\n\r\n        if (parsedCamera.autoAnimate) {\r\n            scene.beginAnimation(camera, parsedCamera.autoAnimateFrom, parsedCamera.autoAnimateTo, parsedCamera.autoAnimateLoop, parsedCamera.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Check if isEnabled is defined to be back compatible with prior serialized versions.\r\n        if (parsedCamera.isEnabled !== undefined) {\r\n            camera.setEnabled(parsedCamera.isEnabled);\r\n        }\r\n\r\n        return camera;\r\n    }\r\n\r\n    /** @internal */\r\n    public _calculateHandednessMultiplier(): number {\r\n        let handednessMultiplier = this.getScene().useRightHandedSystem ? -1 : 1;\r\n        if (this.parent && this.parent._getWorldMatrixDeterminant() < 0) {\r\n            handednessMultiplier *= -1;\r\n        }\r\n\r\n        return handednessMultiplier;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/depth.fragment\";\r\nimport \"../Shaders/depth.vertex\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"../Materials/clipPlaneMaterialHelper\";\r\n\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { BindBonesParameters, BindMorphTargetParameters, PrepareDefinesAndAttributesForMorphTargets, PushAttributesForInstances } from \"../Materials/materialHelper.functions\";\r\nimport { ShaderLanguage } from \"core/Materials/shaderLanguage\";\r\nimport { EffectFallbacks } from \"core/Materials/effectFallbacks\";\r\nimport type { IEffectCreationOptions } from \"core/Materials/effect\";\r\n\r\n/**\r\n * This represents a depth renderer in Babylon.\r\n * A depth renderer will render to it's depth map every frame which can be displayed or used in post processing\r\n */\r\nexport class DepthRenderer {\r\n    private _scene: Scene;\r\n    private _depthMap: RenderTargetTexture;\r\n    private readonly _storeNonLinearDepth: boolean;\r\n    private readonly _storeCameraSpaceZ: boolean;\r\n\r\n    /** Shader language used by the material */\r\n    protected _shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    /**\r\n     * Gets the shader language used in this material.\r\n     */\r\n    public get shaderLanguage(): ShaderLanguage {\r\n        return this._shaderLanguage;\r\n    }\r\n\r\n    /**\r\n     * Force all the depth renderer to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    /** Color used to clear the depth texture. Default: (1,0,0,1) */\r\n    public clearColor: Color4;\r\n\r\n    /** Get if the depth renderer is using packed depth or not */\r\n    public readonly isPacked: boolean;\r\n\r\n    private _camera: Nullable<Camera>;\r\n\r\n    /** Enable or disable the depth renderer. When disabled, the depth texture is not updated */\r\n    public enabled = true;\r\n\r\n    /** Force writing the transparent objects into the depth map */\r\n    public forceDepthWriteTransparentMeshes = false;\r\n\r\n    /**\r\n     * Specifies that the depth renderer will only be used within\r\n     * the camera it is created for.\r\n     * This can help forcing its rendering during the camera processing.\r\n     */\r\n    public useOnlyInActiveCamera: boolean = false;\r\n\r\n    /** If true, reverse the culling of materials before writing to the depth texture.\r\n     * So, basically, when \"true\", back facing instead of front facing faces are rasterized into the texture\r\n     */\r\n    public reverseCulling = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"DepthRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Sets a specific material to be used to render a mesh/a list of meshes by the depth renderer\r\n     * @param mesh mesh or array of meshes\r\n     * @param material material to use by the depth render when rendering the mesh(es). If undefined is passed, the specific material created by the depth renderer will be used.\r\n     */\r\n    public setMaterialForRendering(mesh: AbstractMesh | AbstractMesh[], material?: Material): void {\r\n        this._depthMap.setMaterialForRendering(mesh, material);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a depth renderer\r\n     * @param scene The scene the renderer belongs to\r\n     * @param type The texture type of the depth map (default: Engine.TEXTURETYPE_FLOAT)\r\n     * @param camera The camera to be used to render the depth map (default: scene's active camera)\r\n     * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n     * @param samplingMode The sampling mode to be used with the render target (Linear, Nearest...) (default: TRILINEAR_SAMPLINGMODE)\r\n     * @param storeCameraSpaceZ Defines whether the depth stored is the Z coordinate in camera space. If true, storeNonLinearDepth has no effect. (Default: false)\r\n     * @param name Name of the render target (default: DepthRenderer)\r\n     * @param existingRenderTargetTexture An existing render target texture to use (default: undefined). If not provided, a new render target texture will be created.\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        type: number = Constants.TEXTURETYPE_FLOAT,\r\n        camera: Nullable<Camera> = null,\r\n        storeNonLinearDepth = false,\r\n        samplingMode = Texture.TRILINEAR_SAMPLINGMODE,\r\n        storeCameraSpaceZ = false,\r\n        name?: string,\r\n        existingRenderTargetTexture?: RenderTargetTexture\r\n    ) {\r\n        this._scene = scene;\r\n        this._storeNonLinearDepth = storeNonLinearDepth;\r\n        this._storeCameraSpaceZ = storeCameraSpaceZ;\r\n        this.isPacked = type === Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (this.isPacked) {\r\n            this.clearColor = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        } else {\r\n            this.clearColor = new Color4(storeCameraSpaceZ ? 0.0 : 1.0, 0.0, 0.0, 1.0);\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._initShaderSourceAsync();\r\n\r\n        DepthRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        this._camera = camera;\r\n\r\n        if (samplingMode !== Texture.NEAREST_SAMPLINGMODE) {\r\n            if (type === Constants.TEXTURETYPE_FLOAT && !engine._caps.textureFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n            if (type === Constants.TEXTURETYPE_HALF_FLOAT && !engine._caps.textureHalfFloatLinearFiltering) {\r\n                samplingMode = Texture.NEAREST_SAMPLINGMODE;\r\n            }\r\n        }\r\n\r\n        // Render target\r\n        const format = this.isPacked || !engine._features.supportExtendedTextureFormats ? Constants.TEXTUREFORMAT_RGBA : Constants.TEXTUREFORMAT_R;\r\n        this._depthMap =\r\n            existingRenderTargetTexture ??\r\n            new RenderTargetTexture(\r\n                name ?? \"DepthRenderer\",\r\n                { width: engine.getRenderWidth(), height: engine.getRenderHeight() },\r\n                this._scene,\r\n                false,\r\n                true,\r\n                type,\r\n                false,\r\n                samplingMode,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                format\r\n            );\r\n        this._depthMap.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._depthMap.refreshRate = 1;\r\n        this._depthMap.renderParticles = false;\r\n        this._depthMap.renderList = null;\r\n        this._depthMap.noPrePassRenderer = true;\r\n\r\n        // Camera to get depth map from to support multiple concurrent cameras\r\n        this._depthMap.activeCamera = this._camera;\r\n        this._depthMap.ignoreCameraViewport = true;\r\n        this._depthMap.useCameraPostProcesses = false;\r\n\r\n        // set default depth value to 1.0 (far away)\r\n        this._depthMap.onClearObservable.add((engine) => {\r\n            engine.clear(this.clearColor, true, true, true);\r\n        });\r\n\r\n        this._depthMap.onBeforeBindObservable.add(() => {\r\n            engine._debugPushGroup?.(\"depth renderer\", 1);\r\n        });\r\n\r\n        this._depthMap.onAfterUnbindObservable.add(() => {\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._depthMap.customIsReadyFunction = (mesh: AbstractMesh, refreshRate: number, preWarm?: boolean) => {\r\n            if ((preWarm || refreshRate === 0) && mesh.subMeshes) {\r\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\r\n                    const subMesh = mesh.subMeshes[i];\r\n                    const renderingMesh = subMesh.getRenderingMesh();\r\n\r\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                    const hardwareInstancedRendering =\r\n                        engine.getCaps().instancedArrays &&\r\n                        ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        // Custom render function\r\n        const renderSubMesh = (subMesh: SubMesh): void => {\r\n            const renderingMesh = subMesh.getRenderingMesh();\r\n            const effectiveMesh = subMesh.getEffectiveMesh();\r\n            const scene = this._scene;\r\n            const engine = scene.getEngine();\r\n            const material = subMesh.getMaterial();\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            if (!material || effectiveMesh.infiniteDistance || material.disableDepthWrite || subMesh.verticesCount === 0 || subMesh._renderId === scene.getRenderId()) {\r\n                return;\r\n            }\r\n\r\n            // Culling\r\n            const detNeg = effectiveMesh._getWorldMatrixDeterminant() < 0;\r\n            let sideOrientation = material._getEffectiveOrientation(renderingMesh);\r\n\r\n            if (detNeg) {\r\n                sideOrientation =\r\n                    sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation\r\n                        ? Constants.MATERIAL_CounterClockWiseSideOrientation\r\n                        : Constants.MATERIAL_ClockWiseSideOrientation;\r\n            }\r\n            const reverseSideOrientation = sideOrientation === Constants.MATERIAL_ClockWiseSideOrientation;\r\n\r\n            engine.setState(material.backFaceCulling, 0, false, reverseSideOrientation, this.reverseCulling ? !material.cullBackFaces : material.cullBackFaces);\r\n\r\n            // Managing instances\r\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            const hardwareInstancedRendering =\r\n                engine.getCaps().instancedArrays &&\r\n                ((batch.visibleInstances[subMesh._id] !== null && batch.visibleInstances[subMesh._id] !== undefined) || renderingMesh.hasThinInstances);\r\n\r\n            const camera = this._camera || scene.activeCamera;\r\n            if (this.isReady(subMesh, hardwareInstancedRendering) && camera) {\r\n                subMesh._renderId = scene.getRenderId();\r\n\r\n                const renderingMaterial = effectiveMesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n                let drawWrapper = subMesh._getDrawWrapper();\r\n                if (!drawWrapper && renderingMaterial) {\r\n                    drawWrapper = renderingMaterial._getDrawWrapper();\r\n                }\r\n                const cameraIsOrtho = camera.mode === Camera.ORTHOGRAPHIC_CAMERA;\r\n\r\n                if (!drawWrapper) {\r\n                    return;\r\n                }\r\n\r\n                const effect = drawWrapper.effect!;\r\n\r\n                engine.enableEffect(drawWrapper);\r\n\r\n                if (!hardwareInstancedRendering) {\r\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\r\n                }\r\n\r\n                if (!renderingMaterial) {\r\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                    effect.setMatrix(\"world\", effectiveMesh.getWorldMatrix());\r\n                    if (this._storeCameraSpaceZ) {\r\n                        effect.setMatrix(\"view\", scene.getViewMatrix());\r\n                    }\r\n                } else {\r\n                    renderingMaterial.bindForSubMesh(effectiveMesh.getWorldMatrix(), effectiveMesh as Mesh, subMesh);\r\n                }\r\n\r\n                let minZ: number, maxZ: number;\r\n\r\n                if (cameraIsOrtho) {\r\n                    minZ = !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n                } else {\r\n                    minZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? camera.minZ : engine.isNDCHalfZRange ? 0 : camera.minZ;\r\n                    maxZ = engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : camera.maxZ;\r\n                }\r\n\r\n                effect.setFloat2(\"depthValues\", minZ, minZ + maxZ);\r\n\r\n                if (!renderingMaterial) {\r\n                    // Alpha test\r\n                    if (material.needAlphaTestingForMesh(effectiveMesh)) {\r\n                        const alphaTexture = material.getAlphaTestTexture();\r\n\r\n                        if (alphaTexture) {\r\n                            effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                        }\r\n                    }\r\n\r\n                    // Bones\r\n                    BindBonesParameters(renderingMesh, effect);\r\n\r\n                    // Clip planes\r\n                    BindClipPlane(effect, material, scene);\r\n\r\n                    // Morph targets\r\n                    BindMorphTargetParameters(renderingMesh, effect);\r\n                    if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                        renderingMesh.morphTargetManager._bind(effect);\r\n                    }\r\n\r\n                    // Baked vertex animations\r\n                    const bvaManager = subMesh.getMesh().bakedVertexAnimationManager;\r\n                    if (bvaManager && bvaManager.isEnabled) {\r\n                        bvaManager.bind(effect, hardwareInstancedRendering);\r\n                    }\r\n\r\n                    // Points cloud rendering\r\n                    if (material.pointsCloud) {\r\n                        effect.setFloat(\"pointSize\", material.pointSize);\r\n                    }\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, world) =>\r\n                    effect.setMatrix(\"world\", world)\r\n                );\r\n            }\r\n        };\r\n\r\n        this._depthMap.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ): void => {\r\n            let index;\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.forceDepthWriteTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            } else {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    transparentSubMeshes.data[index].getEffectiveMesh()._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    private _shadersLoaded = false;\r\n    private async _initShaderSourceAsync(forceGLSL = false) {\r\n        const engine = this._scene.getEngine();\r\n\r\n        if (engine.isWebGPU && !forceGLSL && !DepthRenderer.ForceGLSL) {\r\n            this._shaderLanguage = ShaderLanguage.WGSL;\r\n\r\n            await Promise.all([import(\"../ShadersWGSL/depth.vertex\"), import(\"../ShadersWGSL/depth.fragment\")]);\r\n        } else {\r\n            await Promise.all([import(\"../Shaders/depth.vertex\"), import(\"../Shaders/depth.fragment\")]);\r\n        }\r\n\r\n        this._shadersLoaded = true;\r\n    }\r\n\r\n    /**\r\n     * Creates the depth rendering effect and checks if the effect is ready.\r\n     * @param subMesh The submesh to be used to render the depth map of\r\n     * @param useInstances If multiple world instances should be used\r\n     * @returns if the depth renderer is ready to render the depth map\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        if (!this._shadersLoaded) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n        const mesh = subMesh.getMesh();\r\n        const scene = mesh.getScene();\r\n\r\n        const renderingMaterial = mesh._internalAbstractMeshDataInfo._materialForRenderPass?.[engine.currentRenderPassId];\r\n\r\n        if (renderingMaterial) {\r\n            return renderingMaterial.isReadyForSubMesh(mesh, subMesh, useInstances);\r\n        }\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material || material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        const defines = [];\r\n\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        let uv1 = false;\r\n        let uv2 = false;\r\n        const color = false;\r\n\r\n        // Alpha test\r\n        if (material.needAlphaTestingForMesh(mesh) && material.getAlphaTestTexture()) {\r\n            defines.push(\"#define ALPHATEST\");\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                attribs.push(VertexBuffer.UVKind);\r\n                defines.push(\"#define UV1\");\r\n                uv1 = true;\r\n            }\r\n            if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                attribs.push(VertexBuffer.UV2Kind);\r\n                defines.push(\"#define UV2\");\r\n                uv2 = true;\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        const fallbacks = new EffectFallbacks();\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            if (mesh.numBoneInfluencers > 0) {\r\n                fallbacks.addCPUSkinningFallback(0, mesh);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const numMorphInfluencers = mesh.morphTargetManager\r\n            ? PrepareDefinesAndAttributesForMorphTargets(\r\n                  mesh.morphTargetManager,\r\n                  defines,\r\n                  attribs,\r\n                  mesh,\r\n                  true, // usePositionMorph\r\n                  false, // useNormalMorph\r\n                  false, // useTangentMorph\r\n                  uv1, // useUVMorph\r\n                  uv2, // useUV2Morph\r\n                  color // useColorMorph\r\n              )\r\n            : 0;\r\n\r\n        // Points cloud rendering\r\n        if (material.pointsCloud) {\r\n            defines.push(\"#define POINTSIZE\");\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            PushAttributesForInstances(attribs);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // Baked vertex animations\r\n        const bvaManager = mesh.bakedVertexAnimationManager;\r\n        if (bvaManager && bvaManager.isEnabled) {\r\n            defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n            if (useInstances) {\r\n                attribs.push(\"bakedVertexAnimationSettingsInstanced\");\r\n            }\r\n        }\r\n\r\n        // None linear depth\r\n        if (this._storeNonLinearDepth) {\r\n            defines.push(\"#define NONLINEARDEPTH\");\r\n        }\r\n\r\n        // Store camera space Z coordinate instead of NDC Z\r\n        if (this._storeCameraSpaceZ) {\r\n            defines.push(\"#define STORE_CAMERASPACE_Z\");\r\n        }\r\n\r\n        // Float Mode\r\n        if (this.isPacked) {\r\n            defines.push(\"#define PACKED\");\r\n        }\r\n\r\n        // Clip planes\r\n        PrepareStringDefinesForClipPlanes(material, scene, defines);\r\n\r\n        // Get correct effect\r\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true)!;\r\n        const cachedDefines = drawWrapper.defines;\r\n        const join = defines.join(\"\\n\");\r\n        if (cachedDefines !== join) {\r\n            const uniforms = [\r\n                \"world\",\r\n                \"mBones\",\r\n                \"boneTextureWidth\",\r\n                \"pointSize\",\r\n                \"viewProjection\",\r\n                \"view\",\r\n                \"diffuseMatrix\",\r\n                \"depthValues\",\r\n                \"morphTargetInfluences\",\r\n                \"morphTargetCount\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n                \"bakedVertexAnimationSettings\",\r\n                \"bakedVertexAnimationTextureSizeInverted\",\r\n                \"bakedVertexAnimationTime\",\r\n                \"bakedVertexAnimationTexture\",\r\n            ];\r\n            const samplers = [\"diffuseSampler\", \"morphTargets\", \"boneSampler\", \"bakedVertexAnimationTexture\"];\r\n\r\n            AddClipPlaneUniforms(uniforms);\r\n\r\n            drawWrapper.setEffect(\r\n                engine.createEffect(\r\n                    \"depth\",\r\n                    <IEffectCreationOptions>{\r\n                        attributes: attribs,\r\n                        uniformsNames: uniforms,\r\n                        uniformBuffersNames: [],\r\n                        samplers: samplers,\r\n                        defines: join,\r\n                        fallbacks: fallbacks,\r\n                        onCompiled: null,\r\n                        onError: null,\r\n                        indexParameters: { maxSimultaneousMorphTargets: numMorphInfluencers },\r\n                        shaderLanguage: this._shaderLanguage,\r\n                    },\r\n                    engine\r\n                ),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the texture which the depth map will be written to.\r\n     * @returns The depth map texture\r\n     */\r\n    public getDepthMap(): RenderTargetTexture {\r\n        return this._depthMap;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the depth renderer.\r\n     */\r\n    public dispose(): void {\r\n        const keysToDelete = [];\r\n        for (const key in this._scene._depthRenderer) {\r\n            const depthRenderer = this._scene._depthRenderer[key];\r\n            if (depthRenderer === this) {\r\n                keysToDelete.push(key);\r\n            }\r\n        }\r\n\r\n        if (keysToDelete.length > 0) {\r\n            this._depthMap.dispose();\r\n\r\n            for (const key of keysToDelete) {\r\n                delete this._scene._depthRenderer[key];\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable, EffectWrapperCreationOptions, AbstractEngine, InternalTexture, Scene } from \"core/index\";\r\nimport { Observable } from \"./observable\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Engine } from \"core/Engines/engine\";\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const enum DepthTextureType {\r\n    NormalizedViewDepth = 0,\r\n    ViewDepth = 1,\r\n    ScreenDepth = 2,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ThinMinMaxReducerPostProcess extends EffectWrapper {\r\n    public static readonly FragmentUrl = \"minmaxRedux\";\r\n\r\n    public static readonly Uniforms = [\"texSize\"];\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/minmaxRedux.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/minmaxRedux.fragment\"));\r\n        }\r\n    }\r\n\r\n    public textureWidth = 0;\r\n\r\n    public textureHeight = 0;\r\n\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, defines = \"\", options?: EffectWrapperCreationOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinMinMaxReducerPostProcess.FragmentUrl,\r\n            uniforms: ThinMinMaxReducerPostProcess.Uniforms,\r\n            defines,\r\n        });\r\n    }\r\n\r\n    public override bind(noDefaultBindings = false) {\r\n        super.bind(noDefaultBindings);\r\n\r\n        const effect = this.drawWrapper.effect!;\r\n\r\n        if (this.textureWidth === 1 || this.textureHeight === 1) {\r\n            effect.setInt2(\"texSize\", this.textureWidth, this.textureHeight);\r\n        } else {\r\n            effect.setFloat2(\"texSize\", this.textureWidth, this.textureHeight);\r\n        }\r\n    }\r\n}\r\n\r\nconst BufferFloat = new Float32Array(4 * 1 * 1);\r\nconst BufferUint8 = new Uint8Array(4 * 1 * 1);\r\nconst MinMax = { min: 0, max: 0 };\r\n\r\n/**\r\n * @internal\r\n */\r\nexport class ThinMinMaxReducer {\r\n    public readonly onAfterReductionPerformed = new Observable<{ min: number; max: number }>();\r\n\r\n    public readonly reductionSteps: Array<ThinMinMaxReducerPostProcess>;\r\n\r\n    private _depthRedux: boolean;\r\n    private _depthTextureType: DepthTextureType;\r\n\r\n    public get depthRedux() {\r\n        return this._depthRedux;\r\n    }\r\n\r\n    public set depthRedux(value: boolean) {\r\n        if (this._depthRedux === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthRedux = value;\r\n\r\n        this._recreatePostProcesses();\r\n    }\r\n\r\n    protected readonly _scene: Scene;\r\n\r\n    private _textureWidth = 0;\r\n    private _textureHeight = 0;\r\n\r\n    public get textureWidth() {\r\n        return this._textureWidth;\r\n    }\r\n\r\n    public get textureHeight() {\r\n        return this._textureHeight;\r\n    }\r\n\r\n    constructor(scene: Scene, depthRedux = true) {\r\n        this._scene = scene;\r\n        this._depthRedux = depthRedux;\r\n        this.reductionSteps = [];\r\n    }\r\n\r\n    public setTextureDimensions(width: number, height: number, depthTextureType: DepthTextureType = DepthTextureType.NormalizedViewDepth) {\r\n        if (width === this._textureWidth && height === this._textureHeight && depthTextureType === this._depthTextureType) {\r\n            return false;\r\n        }\r\n\r\n        this._textureWidth = width;\r\n        this._textureHeight = height;\r\n        this._depthTextureType = depthTextureType;\r\n\r\n        this._recreatePostProcesses();\r\n\r\n        return true;\r\n    }\r\n\r\n    public readMinMax(texture: InternalTexture) {\r\n        // Note that we should normally await the call to _readTexturePixels!\r\n        // But because WebGL does the read synchronously, we know the values will be updated without waiting for the promise to be resolved, which will let us get the updated values\r\n        // in the current frame, whereas in WebGPU, the read is asynchronous and we should normally wait for the promise to be resolved to get the updated values.\r\n        // However, it's safe to avoid waiting for the promise to be resolved in WebGPU as well, because we will simply use the current values until \"buffer\" is updated later on.\r\n        // Note that it means we can suffer some rendering artifacts in WebGPU because we may use previous min/max values for the current frame.\r\n        const isFloat = texture.type === Engine.TEXTURETYPE_FLOAT || texture.type === Engine.TEXTURETYPE_HALF_FLOAT;\r\n        const buffer = isFloat ? BufferFloat : BufferUint8;\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._scene.getEngine()._readTexturePixels(texture, 1, 1, -1, 0, buffer, false);\r\n\r\n        MinMax.min = buffer[0];\r\n        MinMax.max = buffer[1];\r\n\r\n        if (!isFloat) {\r\n            MinMax.min = MinMax.min / 255.0;\r\n            MinMax.max = MinMax.max / 255.0;\r\n        }\r\n\r\n        if (MinMax.min >= MinMax.max) {\r\n            MinMax.min = 0;\r\n            MinMax.max = 1;\r\n        }\r\n\r\n        this.onAfterReductionPerformed.notifyObservers(MinMax);\r\n    }\r\n\r\n    public dispose(disposeAll = true): void {\r\n        if (disposeAll) {\r\n            this.onAfterReductionPerformed.clear();\r\n            this._textureWidth = 0;\r\n            this._textureHeight = 0;\r\n        }\r\n\r\n        for (let i = 0; i < this.reductionSteps.length; ++i) {\r\n            this.reductionSteps[i].dispose();\r\n        }\r\n        this.reductionSteps.length = 0;\r\n    }\r\n\r\n    private _recreatePostProcesses() {\r\n        this.dispose(false);\r\n\r\n        const scene = this._scene;\r\n\r\n        let w = this.textureWidth,\r\n            h = this.textureHeight;\r\n\r\n        const reductionInitial = new ThinMinMaxReducerPostProcess(\r\n            \"Initial reduction phase\",\r\n            scene.getEngine(),\r\n            \"#define INITIAL\" + (this._depthRedux ? \"\\n#define DEPTH_REDUX\" : \"\") + (this._depthTextureType === DepthTextureType.ViewDepth ? \"\\n#define VIEW_DEPTH\" : \"\")\r\n        );\r\n\r\n        reductionInitial.textureWidth = w;\r\n        reductionInitial.textureHeight = h;\r\n\r\n        this.reductionSteps.push(reductionInitial);\r\n\r\n        let index = 1;\r\n\r\n        // create the additional steps\r\n        while (w > 1 || h > 1) {\r\n            w = Math.max(Math.round(w / 2), 1);\r\n            h = Math.max(Math.round(h / 2), 1);\r\n\r\n            const reduction = new ThinMinMaxReducerPostProcess(\r\n                \"Reduction phase \" + index,\r\n                scene.getEngine(),\r\n                \"#define \" + (w == 1 && h == 1 ? \"LAST\" : w == 1 || h == 1 ? \"ONEBEFORELAST\" : \"MAIN\")\r\n            );\r\n\r\n            reduction.textureWidth = w;\r\n            reduction.textureHeight = h;\r\n\r\n            this.reductionSteps.push(reduction);\r\n\r\n            index++;\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Observer } from \"./observable\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport { PostProcessManager } from \"../PostProcesses/postProcessManager\";\r\n\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { ThinMinMaxReducer, ThinMinMaxReducerPostProcess } from \"./thinMinMaxReducer\";\r\n\r\nimport \"../Shaders/minmaxRedux.fragment\";\r\nimport \"../ShadersWGSL/minmaxRedux.fragment\";\r\n\r\n/**\r\n * This class computes a min/max reduction from a texture: it means it computes the minimum\r\n * and maximum values from all values of the texture.\r\n * It is performed on the GPU for better performances, thanks to a succession of post processes.\r\n * The source values are read from the red channel of the texture.\r\n */\r\nexport class MinMaxReducer {\r\n    /**\r\n     * Observable triggered when the computation has been performed\r\n     */\r\n    public get onAfterReductionPerformed() {\r\n        return this._thinMinMaxReducer.onAfterReductionPerformed;\r\n    }\r\n\r\n    protected readonly _camera: Camera;\r\n    protected readonly _thinMinMaxReducer: ThinMinMaxReducer;\r\n    protected _sourceTexture: Nullable<RenderTargetTexture>;\r\n    protected readonly _reductionSteps: Array<PostProcess>;\r\n    protected readonly _postProcessManager: PostProcessManager;\r\n    protected _onAfterUnbindObserver: Nullable<Observer<RenderTargetTexture>> = null;\r\n    protected _forceFullscreenViewport = true;\r\n    protected readonly _onContextRestoredObserver: Observer<AbstractEngine>;\r\n\r\n    /**\r\n     * Creates a min/max reducer\r\n     * @param camera The camera to use for the post processes\r\n     */\r\n    constructor(camera: Camera) {\r\n        this._camera = camera;\r\n        this._postProcessManager = new PostProcessManager(camera.getScene());\r\n        this._thinMinMaxReducer = new ThinMinMaxReducer(camera.getScene());\r\n        this._reductionSteps = [];\r\n\r\n        this._onContextRestoredObserver = camera.getEngine().onContextRestoredObservable.add(() => {\r\n            this._postProcessManager._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used to read the values from.\r\n     */\r\n    public get sourceTexture(): Nullable<RenderTargetTexture> {\r\n        return this._sourceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the source texture to read the values from.\r\n     * One must indicate if the texture is a depth texture or not through the depthRedux parameter\r\n     * because in such textures '1' value must not be taken into account to compute the maximum\r\n     * as this value is used to clear the texture.\r\n     * Note that the computation is not activated by calling this function, you must call activate() for that!\r\n     * @param sourceTexture The texture to read the values from. The values should be in the red channel.\r\n     * @param depthRedux Indicates if the texture is a depth texture or not\r\n     * @param type The type of the textures created for the reduction (defaults to TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setSourceTexture(sourceTexture: RenderTargetTexture, depthRedux: boolean, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        if (sourceTexture === this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._thinMinMaxReducer.depthRedux = depthRedux;\r\n\r\n        this.deactivate();\r\n\r\n        this._sourceTexture = sourceTexture;\r\n        this._forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n        if (this._thinMinMaxReducer.setTextureDimensions(sourceTexture.getRenderWidth(), sourceTexture.getRenderHeight())) {\r\n            this._disposePostProcesses();\r\n\r\n            const reductionSteps = this._thinMinMaxReducer.reductionSteps;\r\n\r\n            for (let i = 0; i < reductionSteps.length; ++i) {\r\n                const reductionStep = reductionSteps[i];\r\n\r\n                const postProcess = new PostProcess(reductionStep.name, ThinMinMaxReducerPostProcess.FragmentUrl, {\r\n                    effectWrapper: reductionStep,\r\n                    samplingMode: Constants.TEXTURE_NEAREST_NEAREST,\r\n                    engine: this._camera.getScene().getEngine(),\r\n                    textureType: type,\r\n                    textureFormat: Constants.TEXTUREFORMAT_RG,\r\n                    size: { width: reductionStep.textureWidth, height: reductionStep.textureHeight },\r\n                });\r\n\r\n                this._reductionSteps.push(postProcess);\r\n\r\n                postProcess.autoClear = false;\r\n                postProcess.forceFullscreenViewport = forceFullscreenViewport;\r\n\r\n                if (i === 0) {\r\n                    postProcess.externalTextureSamplerBinding = true;\r\n                    postProcess.onApplyObservable.add((effect: Effect) => {\r\n                        effect.setTexture(\"textureSampler\", this._sourceTexture);\r\n                    });\r\n                }\r\n\r\n                if (i === reductionSteps.length - 1) {\r\n                    this._reductionSteps[i - 1].onAfterRenderObservable.add(() => {\r\n                        this._thinMinMaxReducer.readMinMax(postProcess.inputTexture.texture!);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the computation.\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     */\r\n    public get refreshRate(): number {\r\n        return this._sourceTexture ? this._sourceTexture.refreshRate : -1;\r\n    }\r\n\r\n    public set refreshRate(value: number) {\r\n        if (this._sourceTexture) {\r\n            this._sourceTexture.refreshRate = value;\r\n        }\r\n    }\r\n\r\n    protected _activated = false;\r\n\r\n    /**\r\n     * Gets the activation status of the reducer\r\n     */\r\n    public get activated(): boolean {\r\n        return this._activated;\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public activate(): void {\r\n        if (this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterUnbindObserver = this._sourceTexture.onAfterUnbindObservable.add(() => {\r\n            const engine = this._camera.getScene().getEngine();\r\n            engine._debugPushGroup?.(`min max reduction`, 1);\r\n            this._reductionSteps![0].activate(this._camera);\r\n            this._postProcessManager.directRender(\r\n                this._reductionSteps!,\r\n                this._reductionSteps![0].inputTexture,\r\n                this._forceFullscreenViewport,\r\n                0,\r\n                0,\r\n                true,\r\n                this._reductionSteps.length - 1\r\n            );\r\n            engine.unBindFramebuffer(this._reductionSteps![this._reductionSteps.length - 1].inputTexture, false);\r\n            engine._debugPopGroup?.(1);\r\n        });\r\n\r\n        this._activated = true;\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public deactivate(): void {\r\n        if (!this._onAfterUnbindObserver || !this._sourceTexture) {\r\n            return;\r\n        }\r\n\r\n        this._sourceTexture.onAfterUnbindObservable.remove(this._onAfterUnbindObserver);\r\n        this._onAfterUnbindObserver = null;\r\n        this._activated = false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the min/max reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public dispose(disposeAll = true): void {\r\n        if (!disposeAll) {\r\n            return;\r\n        }\r\n\r\n        this.onAfterReductionPerformed.clear();\r\n\r\n        this._camera.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n        (this._onContextRestoredObserver as any) = undefined;\r\n\r\n        this._disposePostProcesses();\r\n\r\n        this._postProcessManager.dispose();\r\n        (this._postProcessManager as any) = undefined as any;\r\n        this._thinMinMaxReducer.dispose();\r\n        (this._thinMinMaxReducer as any) = undefined;\r\n        this._sourceTexture = null;\r\n    }\r\n\r\n    private _disposePostProcesses() {\r\n        for (let i = 0; i < this._reductionSteps.length; ++i) {\r\n            this._reductionSteps[i].dispose();\r\n        }\r\n        this._reductionSteps.length = 0;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { DepthRenderer } from \"../Rendering/depthRenderer\";\r\n\r\nimport { MinMaxReducer } from \"./minMaxReducer\";\r\n\r\n/**\r\n * This class is a small wrapper around the MinMaxReducer class to compute the min/max values of a depth texture\r\n */\r\nexport class DepthReducer extends MinMaxReducer {\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    private _depthRendererId: string;\r\n\r\n    /**\r\n     * Gets the depth renderer used for the computation.\r\n     * Note that the result is null if you provide your own renderer when calling setDepthRenderer.\r\n     */\r\n    public get depthRenderer(): Nullable<DepthRenderer> {\r\n        return this._depthRenderer;\r\n    }\r\n\r\n    /**\r\n     * Creates a depth reducer\r\n     * @param camera The camera used to render the depth texture\r\n     */\r\n    constructor(camera: Camera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Sets the depth renderer to use to generate the depth map\r\n     * @param depthRenderer The depth renderer to use. If not provided, a new one will be created automatically\r\n     * @param type The texture type of the depth map (default: TEXTURETYPE_HALF_FLOAT)\r\n     * @param forceFullscreenViewport Forces the post processes used for the reduction to be applied without taking into account viewport (defaults to true)\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer> = null, type: number = Constants.TEXTURETYPE_HALF_FLOAT, forceFullscreenViewport = true): void {\r\n        const scene = this._camera.getScene();\r\n\r\n        if (this._depthRenderer) {\r\n            delete scene._depthRenderer[this._depthRendererId];\r\n\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n\r\n        if (depthRenderer === null) {\r\n            if (!scene._depthRenderer) {\r\n                scene._depthRenderer = {};\r\n            }\r\n\r\n            this._depthRendererId = \"minmax_\" + this._camera.id;\r\n\r\n            depthRenderer = this._depthRenderer = new DepthRenderer(\r\n                scene,\r\n                type,\r\n                this._camera,\r\n                false,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                false,\r\n                `DepthRenderer ${this._depthRendererId}`\r\n            );\r\n            depthRenderer.enabled = false;\r\n\r\n            scene._depthRenderer[this._depthRendererId] = depthRenderer;\r\n        }\r\n\r\n        super.setSourceTexture(depthRenderer.getDepthMap(), true, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override setSourceTexture(\r\n        sourceTexture: RenderTargetTexture,\r\n        depthRedux: boolean,\r\n        type: number = Constants.TEXTURETYPE_HALF_FLOAT,\r\n        forceFullscreenViewport = true\r\n    ): void {\r\n        super.setSourceTexture(sourceTexture, depthRedux, type, forceFullscreenViewport);\r\n    }\r\n\r\n    /**\r\n     * Activates the reduction computation.\r\n     * When activated, the observers registered in onAfterReductionPerformed are\r\n     * called after the computation is performed\r\n     */\r\n    public override activate(): void {\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = true;\r\n        }\r\n\r\n        super.activate();\r\n    }\r\n\r\n    /**\r\n     * Deactivates the reduction computation.\r\n     */\r\n    public override deactivate(): void {\r\n        super.deactivate();\r\n\r\n        if (this._depthRenderer) {\r\n            this._depthRenderer.enabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the depth reducer\r\n     * @param disposeAll true to dispose all the resources. You should always call this function with true as the parameter (or without any parameter as it is the default one). This flag is meant to be used internally.\r\n     */\r\n    public override dispose(disposeAll = true): void {\r\n        super.dispose(disposeAll);\r\n\r\n        if (this._depthRenderer && disposeAll) {\r\n            this._depthRenderer.dispose();\r\n            this._depthRenderer = null;\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\n\r\nimport type { IShadowLight } from \"../../Lights/shadowLight\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\n\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { _WarnImport } from \"../../Misc/devTools\";\r\nimport { ShadowGenerator } from \"./shadowGenerator\";\r\nimport type { DirectionalLight } from \"../directionalLight\";\r\n\r\nimport { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { DepthRenderer } from \"../../Rendering/depthRenderer\";\r\nimport { DepthReducer } from \"../../Misc/depthReducer\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\n\r\ninterface ICascade {\r\n    prevBreakDistance: number;\r\n    breakDistance: number;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst UpDir = Vector3.Up();\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst ZeroVec = Vector3.Zero();\r\n\r\nconst Tmpv1 = new Vector3();\r\nconst Tmpv2 = new Vector3();\r\nconst TmpMatrix = new Matrix();\r\n\r\n/**\r\n * A CSM implementation allowing casting shadows on large scenes.\r\n * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n * Based on: https://github.com/TheRealMJP/Shadows and https://johanmedestrom.wordpress.com/2016/03/18/opengl-cascaded-shadow-maps/\r\n */\r\nexport class CascadedShadowGenerator extends ShadowGenerator {\r\n    private static readonly _FrustumCornersNdcSpace = [\r\n        new Vector3(-1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, +1.0, -1.0),\r\n        new Vector3(+1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, -1.0, -1.0),\r\n        new Vector3(-1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, +1.0, +1.0),\r\n        new Vector3(+1.0, -1.0, +1.0),\r\n        new Vector3(-1.0, -1.0, +1.0),\r\n    ];\r\n\r\n    /**\r\n     * Name of the CSM class\r\n     */\r\n    public static override CLASSNAME = \"CascadedShadowGenerator\";\r\n\r\n    /**\r\n     * Defines the default number of cascades used by the CSM.\r\n     */\r\n    public static readonly DEFAULT_CASCADES_COUNT = 4;\r\n    /**\r\n     * Defines the minimum number of cascades used by the CSM.\r\n     */\r\n    public static MIN_CASCADES_COUNT = 2;\r\n    /**\r\n     * Defines the maximum number of cascades used by the CSM.\r\n     */\r\n    public static MAX_CASCADES_COUNT = 4;\r\n\r\n    protected override _validateFilter(filter: number): number {\r\n        if (filter === ShadowGenerator.FILTER_NONE || filter === ShadowGenerator.FILTER_PCF || filter === ShadowGenerator.FILTER_PCSS) {\r\n            return filter;\r\n        }\r\n\r\n        Logger.Error('Unsupported filter \"' + filter + '\"!');\r\n\r\n        return ShadowGenerator.FILTER_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the actual darkness of the soft shadows while using PCSS filtering (value between 0. and 1.)\r\n     */\r\n    public penumbraDarkness: number;\r\n\r\n    private _numCascades: number;\r\n\r\n    /**\r\n     * Gets or set the number of cascades used by the CSM.\r\n     */\r\n    public get numCascades(): number {\r\n        return this._numCascades;\r\n    }\r\n\r\n    public set numCascades(value: number) {\r\n        value = Math.min(Math.max(value, CascadedShadowGenerator.MIN_CASCADES_COUNT), CascadedShadowGenerator.MAX_CASCADES_COUNT);\r\n        if (value === this._numCascades) {\r\n            return;\r\n        }\r\n\r\n        this._numCascades = value;\r\n        this.recreateShadowMap();\r\n        this._recreateSceneUBOs();\r\n    }\r\n\r\n    /**\r\n     * Sets this to true if you want that the edges of the shadows don't \"swimm\" / \"shimmer\" when rotating the camera.\r\n     * The trade off is that you lose some precision in the shadow rendering when enabling this setting.\r\n     */\r\n    public stabilizeCascades: boolean;\r\n\r\n    private _freezeShadowCastersBoundingInfo: boolean;\r\n    private _freezeShadowCastersBoundingInfoObservable: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * Enables or disables the shadow casters bounding info computation.\r\n     * If your shadow casters don't move, you can disable this feature.\r\n     * If it is enabled, the bounding box computation is done every frame.\r\n     */\r\n    public get freezeShadowCastersBoundingInfo(): boolean {\r\n        return this._freezeShadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set freezeShadowCastersBoundingInfo(freeze: boolean) {\r\n        if (this._freezeShadowCastersBoundingInfoObservable && freeze) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (!this._freezeShadowCastersBoundingInfoObservable && !freeze) {\r\n            this._freezeShadowCastersBoundingInfoObservable = this._scene.onBeforeRenderObservable.add(() => this._computeShadowCastersBoundingInfo());\r\n        }\r\n\r\n        this._freezeShadowCastersBoundingInfo = freeze;\r\n\r\n        if (freeze) {\r\n            this._computeShadowCastersBoundingInfo();\r\n        }\r\n    }\r\n\r\n    private _scbiMin: Vector3;\r\n    private _scbiMax: Vector3;\r\n\r\n    protected _computeShadowCastersBoundingInfo(): void {\r\n        this._scbiMin.copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._scbiMax.copyFromFloats(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n\r\n        if (this._shadowMap && this._shadowMap.renderList) {\r\n            const renderList = this._shadowMap.renderList;\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo(),\r\n                    boundingBox = boundingInfo.boundingBox;\r\n\r\n                this._scbiMin.minimizeInPlace(boundingBox.minimumWorld);\r\n                this._scbiMax.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        }\r\n\r\n        this._shadowCastersBoundingInfo.reConstruct(this._scbiMin, this._scbiMax);\r\n    }\r\n\r\n    protected _shadowCastersBoundingInfo: BoundingInfo;\r\n\r\n    /**\r\n     * Gets or sets the shadow casters bounding info.\r\n     * If you provide your own shadow casters bounding info, first enable freezeShadowCastersBoundingInfo\r\n     * so that the system won't overwrite the bounds you provide\r\n     */\r\n    public get shadowCastersBoundingInfo(): BoundingInfo {\r\n        return this._shadowCastersBoundingInfo;\r\n    }\r\n\r\n    public set shadowCastersBoundingInfo(boundingInfo: BoundingInfo) {\r\n        this._shadowCastersBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    protected _breaksAreDirty: boolean;\r\n\r\n    protected _minDistance: number;\r\n    protected _maxDistance: number;\r\n\r\n    /**\r\n     * Sets the minimal and maximal distances to use when computing the cascade breaks.\r\n     *\r\n     * The values of min / max are typically the depth zmin and zmax values of your scene, for a given frame.\r\n     * If you don't know these values, simply leave them to their defaults and don't call this function.\r\n     * @param min minimal distance for the breaks (default to 0.)\r\n     * @param max maximal distance for the breaks (default to 1.)\r\n     */\r\n    public setMinMaxDistance(min: number, max: number): void {\r\n        if (this._minDistance === min && this._maxDistance === max) {\r\n            return;\r\n        }\r\n\r\n        if (min > max) {\r\n            min = 0;\r\n            max = 1;\r\n        }\r\n\r\n        if (min < 0) {\r\n            min = 0;\r\n        }\r\n\r\n        if (max > 1) {\r\n            max = 1;\r\n        }\r\n\r\n        this._minDistance = min;\r\n        this._maxDistance = max;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /** Gets the minimal distance used in the cascade break computation */\r\n    public get minDistance(): number {\r\n        return this._minDistance;\r\n    }\r\n\r\n    /** Gets the maximal distance used in the cascade break computation */\r\n    public get maxDistance(): number {\r\n        return this._maxDistance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of that object\r\n     * @returns \"CascadedShadowGenerator\"\r\n     */\r\n    public override getClassName(): string {\r\n        return CascadedShadowGenerator.CLASSNAME;\r\n    }\r\n\r\n    private _cascadeMinExtents: Array<Vector3>;\r\n    private _cascadeMaxExtents: Array<Vector3>;\r\n\r\n    /**\r\n     * Gets a cascade minimum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the minimum cascade extents\r\n     */\r\n    public getCascadeMinExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMinExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets a cascade maximum extents\r\n     * @param cascadeIndex index of the cascade\r\n     * @returns the maximum cascade extents\r\n     */\r\n    public getCascadeMaxExtents(cascadeIndex: number): Nullable<Vector3> {\r\n        return cascadeIndex >= 0 && cascadeIndex < this._numCascades ? this._cascadeMaxExtents[cascadeIndex] : null;\r\n    }\r\n\r\n    private _cascades: Array<ICascade>;\r\n    private _currentLayer: number;\r\n    private _viewSpaceFrustumsZ: Array<number>;\r\n    private _viewMatrices: Array<Matrix>;\r\n    private _projectionMatrices: Array<Matrix>;\r\n    private _transformMatrices: Array<Matrix>;\r\n    private _transformMatricesAsArray: Float32Array;\r\n    private _frustumLengths: Array<number>;\r\n    private _lightSizeUVCorrection: Array<number>;\r\n    private _depthCorrection: Array<number>;\r\n    private _frustumCornersWorldSpace: Array<Array<Vector3>>;\r\n    private _frustumCenter: Array<Vector3>;\r\n    private _shadowCameraPos: Array<Vector3>;\r\n\r\n    private _shadowMaxZ: number;\r\n    /**\r\n     * Gets the shadow max z distance. It's the limit beyond which shadows are not displayed.\r\n     * It defaults to camera.maxZ\r\n     */\r\n    public get shadowMaxZ(): number {\r\n        if (!this._getCamera()) {\r\n            return 0;\r\n        }\r\n        return this._shadowMaxZ;\r\n    }\r\n    /**\r\n     * Sets the shadow max z distance.\r\n     */\r\n    public set shadowMaxZ(value: number) {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            this._shadowMaxZ = value;\r\n            return;\r\n        }\r\n        if (this._shadowMaxZ === value || value < camera.minZ || (value > camera.maxZ && camera.maxZ !== 0)) {\r\n            return;\r\n        }\r\n        this._shadowMaxZ = value;\r\n        this._light._markMeshesAsLightDirty();\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    protected _debug: boolean;\r\n\r\n    /**\r\n     * Gets or sets the debug flag.\r\n     * When enabled, the cascades are materialized by different colors on the screen.\r\n     */\r\n    public get debug(): boolean {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(dbg: boolean) {\r\n        this._debug = dbg;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _depthClamp: boolean;\r\n\r\n    /**\r\n     * Gets or sets the depth clamping value.\r\n     *\r\n     * When enabled, it improves the shadow quality because the near z plane of the light frustum don't need to be adjusted\r\n     * to account for the shadow casters far away.\r\n     *\r\n     * Note that this property is incompatible with PCSS filtering, so it won't be used in that case.\r\n     */\r\n    public get depthClamp(): boolean {\r\n        return this._depthClamp;\r\n    }\r\n\r\n    public set depthClamp(value: boolean) {\r\n        this._depthClamp = value;\r\n    }\r\n\r\n    private _cascadeBlendPercentage: number;\r\n\r\n    /**\r\n     * Gets or sets the percentage of blending between two cascades (value between 0. and 1.).\r\n     * It defaults to 0.1 (10% blending).\r\n     */\r\n    public get cascadeBlendPercentage(): number {\r\n        return this._cascadeBlendPercentage;\r\n    }\r\n\r\n    public set cascadeBlendPercentage(value: number) {\r\n        this._cascadeBlendPercentage = value;\r\n        this._light._markMeshesAsLightDirty();\r\n    }\r\n\r\n    private _lambda: number;\r\n\r\n    /**\r\n     * Gets or set the lambda parameter.\r\n     * This parameter is used to split the camera frustum and create the cascades.\r\n     * It's a value between 0. and 1.: If 0, the split is a uniform split of the frustum, if 1 it is a logarithmic split.\r\n     * For all values in-between, it's a linear combination of the uniform and logarithm split algorithm.\r\n     */\r\n    public get lambda(): number {\r\n        return this._lambda;\r\n    }\r\n\r\n    public set lambda(value: number) {\r\n        const lambda = Math.min(Math.max(value, 0), 1);\r\n        if (this._lambda == lambda) {\r\n            return;\r\n        }\r\n        this._lambda = lambda;\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the view matrix from\r\n     * @returns the cascade view matrix\r\n     */\r\n    public getCascadeViewMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._viewMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the projection matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the projection matrix from\r\n     * @returns the cascade projection matrix\r\n     */\r\n    public getCascadeProjectionMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._projectionMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix corresponding to a given cascade\r\n     * @param cascadeNum cascade to retrieve the transformation matrix from\r\n     * @returns the cascade transformation matrix\r\n     */\r\n    public getCascadeTransformMatrix(cascadeNum: number): Nullable<Matrix> {\r\n        return cascadeNum >= 0 && cascadeNum < this._numCascades ? this._transformMatrices[cascadeNum] : null;\r\n    }\r\n\r\n    private _depthRenderer: Nullable<DepthRenderer>;\r\n    /**\r\n     * Sets the depth renderer to use when autoCalcDepthBounds is enabled.\r\n     *\r\n     * Note that if no depth renderer is set, a new one will be automatically created internally when necessary.\r\n     *\r\n     * You should call this function if you already have a depth renderer enabled in your scene, to avoid\r\n     * doing multiple depth rendering each frame. If you provide your own depth renderer, make sure it stores linear depth!\r\n     * @param depthRenderer The depth renderer to use when autoCalcDepthBounds is enabled. If you pass null or don't call this function at all, a depth renderer will be automatically created\r\n     */\r\n    public setDepthRenderer(depthRenderer: Nullable<DepthRenderer>): void {\r\n        this._depthRenderer = depthRenderer;\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n    }\r\n\r\n    private _depthReducer: Nullable<DepthReducer>;\r\n    private _autoCalcDepthBounds: boolean;\r\n\r\n    /**\r\n     * Gets or sets the autoCalcDepthBounds property.\r\n     *\r\n     * When enabled, a depth rendering pass is first performed (with an internally created depth renderer or with the one\r\n     * you provide by calling setDepthRenderer). Then, a min/max reducing is applied on the depth map to compute the\r\n     * minimal and maximal depth of the map and those values are used as inputs for the setMinMaxDistance() function.\r\n     * It can greatly enhance the shadow quality, at the expense of more GPU works.\r\n     * When using this option, you should increase the value of the lambda parameter, and even set it to 1 for best results.\r\n     */\r\n    public get autoCalcDepthBounds(): boolean {\r\n        return this._autoCalcDepthBounds;\r\n    }\r\n\r\n    public set autoCalcDepthBounds(value: boolean) {\r\n        const camera = this._getCamera();\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        this._autoCalcDepthBounds = value;\r\n\r\n        if (!value) {\r\n            if (this._depthReducer) {\r\n                this._depthReducer.deactivate();\r\n            }\r\n            this.setMinMaxDistance(0, 1);\r\n            return;\r\n        }\r\n\r\n        if (!this._depthReducer) {\r\n            this._depthReducer = new DepthReducer(camera);\r\n            this._depthReducer.onAfterReductionPerformed.add((minmax: { min: number; max: number }) => {\r\n                let min = minmax.min,\r\n                    max = minmax.max;\r\n                if (min >= max) {\r\n                    min = 0;\r\n                    max = 1;\r\n                }\r\n                if (min != this._minDistance || max != this._maxDistance) {\r\n                    this.setMinMaxDistance(min, max);\r\n                }\r\n            });\r\n            this._depthReducer.setDepthRenderer(this._depthRenderer);\r\n        }\r\n\r\n        this._depthReducer.activate();\r\n    }\r\n\r\n    /**\r\n     * Defines the refresh rate of the min/max computation used when autoCalcDepthBounds is set to true\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     * Note that if you provided your own depth renderer through a call to setDepthRenderer, you are responsible\r\n     * for setting the refresh rate on the renderer yourself!\r\n     */\r\n    public get autoCalcDepthBoundsRefreshRate(): number {\r\n        return this._depthReducer?.depthRenderer?.getDepthMap().refreshRate ?? -1;\r\n    }\r\n\r\n    public set autoCalcDepthBoundsRefreshRate(value: number) {\r\n        if (this._depthReducer?.depthRenderer) {\r\n            this._depthReducer.depthRenderer.getDepthMap().refreshRate = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the cascade breaks according to the lambda, shadowMaxZ and min/max distance properties, as well as the camera near and far planes.\r\n     * This function is automatically called when updating lambda, shadowMaxZ and min/max distances, however you should call it yourself if\r\n     * you change the camera near/far planes!\r\n     */\r\n    public splitFrustum(): void {\r\n        this._breaksAreDirty = true;\r\n    }\r\n\r\n    private _splitFrustum(): void {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const near = camera.minZ,\r\n            far = camera.maxZ || this._shadowMaxZ, // account for infinite far plane (ie. maxZ = 0)\r\n            cameraRange = far - near,\r\n            minDistance = this._minDistance,\r\n            maxDistance = this._shadowMaxZ < far && this._shadowMaxZ >= near ? Math.min((this._shadowMaxZ - near) / (far - near), this._maxDistance) : this._maxDistance;\r\n\r\n        const minZ = near + minDistance * cameraRange,\r\n            maxZ = near + maxDistance * cameraRange;\r\n\r\n        const range = maxZ - minZ,\r\n            ratio = maxZ / minZ;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._cascades.length; ++cascadeIndex) {\r\n            const p = (cascadeIndex + 1) / this._numCascades,\r\n                log = minZ * ratio ** p,\r\n                uniform = minZ + range * p;\r\n\r\n            const d = this._lambda * (log - uniform) + uniform;\r\n\r\n            this._cascades[cascadeIndex].prevBreakDistance = cascadeIndex === 0 ? minDistance : this._cascades[cascadeIndex - 1].breakDistance;\r\n            this._cascades[cascadeIndex].breakDistance = (d - near) / cameraRange;\r\n\r\n            this._viewSpaceFrustumsZ[cascadeIndex] = d;\r\n            this._frustumLengths[cascadeIndex] = (this._cascades[cascadeIndex].breakDistance - this._cascades[cascadeIndex].prevBreakDistance) * cameraRange;\r\n        }\r\n\r\n        this._breaksAreDirty = false;\r\n    }\r\n\r\n    private _computeMatrices(): void {\r\n        const scene = this._scene;\r\n\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        Vector3.NormalizeToRef(this._light.getShadowDirection(0), this._lightDirection);\r\n        if (Math.abs(Vector3.Dot(this._lightDirection, Vector3.Up())) === 1.0) {\r\n            this._lightDirection.z = 0.0000000000001; // Required to avoid perfectly perpendicular light\r\n        }\r\n\r\n        this._cachedDirection.copyFrom(this._lightDirection);\r\n\r\n        const useReverseDepthBuffer = scene.getEngine().useReverseDepthBuffer;\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._computeFrustumInWorldSpace(cascadeIndex);\r\n            this._computeCascadeFrustum(cascadeIndex);\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].subtractToRef(this._cascadeMinExtents[cascadeIndex], Tmpv1); // tmpv1 = cascadeExtents\r\n\r\n            // Get position of the shadow camera\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection.scale(this._cascadeMinExtents[cascadeIndex].z), this._shadowCameraPos[cascadeIndex]);\r\n\r\n            // Come up with a new orthographic camera for the shadow caster\r\n            Matrix.LookAtLHToRef(this._shadowCameraPos[cascadeIndex], this._frustumCenter[cascadeIndex], UpDir, this._viewMatrices[cascadeIndex]);\r\n\r\n            // Z extents of the current cascade, in cascade view coordinate system\r\n            let viewMinZ = 0,\r\n                viewMaxZ = Tmpv1.z;\r\n\r\n            // Try to tighten minZ and maxZ based on the bounding box of the shadow casters\r\n            const boundingInfo = this._shadowCastersBoundingInfo;\r\n\r\n            boundingInfo.update(this._viewMatrices[cascadeIndex]);\r\n            // Note that after the call to update, the boundingInfo properties that are identified as \"world\" coordinates are in fact view coordinates for the current cascade!\r\n            // This is because the boundingInfo properties that are identifed as \"local\" are in fact world coordinates (see _computeShadowCastersBoundingInfo()), and we multiply them by the current cascade view matrix when we call update.\r\n\r\n            const castersViewMinZ = boundingInfo.boundingBox.minimumWorld.z;\r\n            const castersViewMaxZ = boundingInfo.boundingBox.maximumWorld.z;\r\n\r\n            if (castersViewMinZ > viewMaxZ) {\r\n                // Do nothing, keep the current z extents.\r\n                // All the casters are too far from the light to have an impact on the current cascade.\r\n                // Possible optimization: skip the rendering of the shadow map for this cascade, as all the casters will be clipped by the GPU anyway.\r\n            } else {\r\n                if (!this._depthClamp || this.filter === ShadowGenerator.FILTER_PCSS) {\r\n                    // If we don't use depth clamping, we must define minZ so that all shadow casters are in the cascade frustum\r\n                    viewMinZ = Math.min(viewMinZ, castersViewMinZ);\r\n\r\n                    if (this.filter !== ShadowGenerator.FILTER_PCSS) {\r\n                        // We do not need the actual distance between the currently shaded pixel and the occluder when generating shadows, so we can lower the far plane to increase the accuracy of the shadow map.\r\n                        viewMaxZ = Math.min(viewMaxZ, castersViewMaxZ);\r\n                    }\r\n                } else {\r\n                    // If we use depth clamping (but not PCSS!), we can adjust minZ/maxZ to reduce the range [minZ, maxZ] (and obtain additional precision in the shadow map)\r\n                    viewMaxZ = Math.min(viewMaxZ, castersViewMaxZ);\r\n\r\n                    // Thanks to depth clamping, casters won't be Z clipped even if they fall outside the [-1,1] range, so we can move the near plane to 0 if castersViewMinZ < 0.\r\n                    // We will generate negative Z values in the shadow map, but that's okay (they will be clamped to the 0..1 range anyway), except in PCSS case\r\n                    // where we need the actual distance between the currently shader pixel and the occluder: that's why we don't use depth clamping in PCSS case.\r\n                    viewMinZ = Math.max(viewMinZ, castersViewMinZ);\r\n\r\n                    // If all the casters are behind the near plane of the cascade, minZ = 0 due to the previous line, and maxZ < 0 at this point.\r\n                    // We need to make sure that maxZ > minZ, so in this case we set maxZ a little higher than minZ. As we are using depth clamping, the casters won't be Z clipped, so we just need to make sure that we have a valid Z range for the cascade.\r\n                    // Having a 0 range is not ok, due to undefined behavior in the calculation in this case.\r\n                    viewMaxZ = Math.max(viewMinZ + 1.0, viewMaxZ);\r\n                }\r\n            }\r\n\r\n            Matrix.OrthoOffCenterLHToRef(\r\n                this._cascadeMinExtents[cascadeIndex].x,\r\n                this._cascadeMaxExtents[cascadeIndex].x,\r\n                this._cascadeMinExtents[cascadeIndex].y,\r\n                this._cascadeMaxExtents[cascadeIndex].y,\r\n                useReverseDepthBuffer ? viewMaxZ : viewMinZ,\r\n                useReverseDepthBuffer ? viewMinZ : viewMaxZ,\r\n                this._projectionMatrices[cascadeIndex],\r\n                scene.getEngine().isNDCHalfZRange\r\n            );\r\n\r\n            this._cascadeMinExtents[cascadeIndex].z = viewMinZ;\r\n            this._cascadeMaxExtents[cascadeIndex].z = viewMaxZ;\r\n\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            // Create the rounding matrix, by projecting the world-space origin and determining\r\n            // the fractional offset in texel space\r\n            Vector3.TransformCoordinatesToRef(ZeroVec, this._transformMatrices[cascadeIndex], Tmpv1); // tmpv1 = shadowOrigin\r\n            Tmpv1.scaleInPlace(this._mapSize / 2);\r\n\r\n            Tmpv2.copyFromFloats(Math.round(Tmpv1.x), Math.round(Tmpv1.y), Math.round(Tmpv1.z)); // tmpv2 = roundedOrigin\r\n            Tmpv2.subtractInPlace(Tmpv1).scaleInPlace(2 / this._mapSize); // tmpv2 = roundOffset\r\n\r\n            Matrix.TranslationToRef(Tmpv2.x, Tmpv2.y, 0.0, TmpMatrix);\r\n\r\n            this._projectionMatrices[cascadeIndex].multiplyToRef(TmpMatrix, this._projectionMatrices[cascadeIndex]);\r\n            this._viewMatrices[cascadeIndex].multiplyToRef(this._projectionMatrices[cascadeIndex], this._transformMatrices[cascadeIndex]);\r\n\r\n            this._transformMatrices[cascadeIndex].copyToArray(this._transformMatricesAsArray, cascadeIndex * 16);\r\n        }\r\n    }\r\n\r\n    // Get the 8 points of the view frustum in world space\r\n    private _computeFrustumInWorldSpace(cascadeIndex: number): void {\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const prevSplitDist = this._cascades[cascadeIndex].prevBreakDistance,\r\n            splitDist = this._cascades[cascadeIndex].breakDistance;\r\n\r\n        const isNDCHalfZRange = this._scene.getEngine().isNDCHalfZRange;\r\n\r\n        camera.getViewMatrix(); // make sure the transformation matrix we get when calling 'getTransformationMatrix()' is calculated with an up to date view matrix\r\n\r\n        const cameraInfiniteFarPlane = camera.maxZ === 0;\r\n        const saveCameraMaxZ = camera.maxZ;\r\n\r\n        if (cameraInfiniteFarPlane) {\r\n            camera.maxZ = this._shadowMaxZ;\r\n            camera.getProjectionMatrix(true);\r\n        }\r\n\r\n        const invViewProj = Matrix.Invert(camera.getTransformationMatrix());\r\n\r\n        if (cameraInfiniteFarPlane) {\r\n            camera.maxZ = saveCameraMaxZ;\r\n            camera.getProjectionMatrix(true);\r\n        }\r\n\r\n        const cornerIndexOffset = this._scene.getEngine().useReverseDepthBuffer ? 4 : 0;\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNdcSpace.length; ++cornerIndex) {\r\n            Tmpv1.copyFrom(CascadedShadowGenerator._FrustumCornersNdcSpace[(cornerIndex + cornerIndexOffset) % CascadedShadowGenerator._FrustumCornersNdcSpace.length]);\r\n            if (isNDCHalfZRange && Tmpv1.z === -1) {\r\n                Tmpv1.z = 0;\r\n            }\r\n            Vector3.TransformCoordinatesToRef(Tmpv1, invViewProj, this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        // Get the corners of the current cascade slice of the view frustum\r\n        for (let cornerIndex = 0; cornerIndex < CascadedShadowGenerator._FrustumCornersNdcSpace.length / 2; ++cornerIndex) {\r\n            Tmpv1.copyFrom(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4]).subtractInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n            Tmpv2.copyFrom(Tmpv1).scaleInPlace(prevSplitDist); // near corner ray\r\n            Tmpv1.scaleInPlace(splitDist); // far corner ray\r\n\r\n            Tmpv1.addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex + 4].copyFrom(Tmpv1);\r\n            this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].addInPlace(Tmpv2);\r\n        }\r\n    }\r\n\r\n    private _computeCascadeFrustum(cascadeIndex: number): void {\r\n        this._cascadeMinExtents[cascadeIndex].copyFromFloats(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cascadeMaxExtents[cascadeIndex].copyFromFloats(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        this._frustumCenter[cascadeIndex].copyFromFloats(0, 0, 0);\r\n\r\n        const camera = this._getCamera();\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        // Calculate the centroid of the view frustum slice\r\n        for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n            this._frustumCenter[cascadeIndex].addInPlace(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex]);\r\n        }\r\n\r\n        this._frustumCenter[cascadeIndex].scaleInPlace(1 / this._frustumCornersWorldSpace[cascadeIndex].length);\r\n\r\n        if (this.stabilizeCascades) {\r\n            // Calculate the radius of a bounding sphere surrounding the frustum corners\r\n            let sphereRadius = 0;\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                const dist = this._frustumCornersWorldSpace[cascadeIndex][cornerIndex].subtractToRef(this._frustumCenter[cascadeIndex], Tmpv1).length();\r\n                sphereRadius = Math.max(sphereRadius, dist);\r\n            }\r\n\r\n            sphereRadius = Math.ceil(sphereRadius * 16) / 16;\r\n\r\n            this._cascadeMaxExtents[cascadeIndex].copyFromFloats(sphereRadius, sphereRadius, sphereRadius);\r\n            this._cascadeMinExtents[cascadeIndex].copyFromFloats(-sphereRadius, -sphereRadius, -sphereRadius);\r\n        } else {\r\n            // Create a temporary view matrix for the light\r\n            const lightCameraPos = this._frustumCenter[cascadeIndex];\r\n\r\n            this._frustumCenter[cascadeIndex].addToRef(this._lightDirection, Tmpv1); // tmpv1 = look at\r\n\r\n            Matrix.LookAtLHToRef(lightCameraPos, Tmpv1, UpDir, TmpMatrix); // matrix = lightView\r\n\r\n            // Calculate an AABB around the frustum corners\r\n            for (let cornerIndex = 0; cornerIndex < this._frustumCornersWorldSpace[cascadeIndex].length; ++cornerIndex) {\r\n                Vector3.TransformCoordinatesToRef(this._frustumCornersWorldSpace[cascadeIndex][cornerIndex], TmpMatrix, Tmpv1);\r\n\r\n                this._cascadeMinExtents[cascadeIndex].minimizeInPlace(Tmpv1);\r\n                this._cascadeMaxExtents[cascadeIndex].maximizeInPlace(Tmpv1);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _recreateSceneUBOs(): void {\r\n        this._disposeSceneUBOs();\r\n        if (this._sceneUBOs) {\r\n            for (let i = 0; i < this._numCascades; ++i) {\r\n                this._sceneUBOs.push(this._scene.createSceneUniformBuffer(`Scene for CSM Shadow Generator (light \"${this._light.name}\" cascade #${i})`));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportCSM;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static override _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"ShadowGeneratorSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Creates a Cascaded Shadow Generator object.\r\n     * A ShadowGenerator is the required tool to use the shadows.\r\n     * Each directional light casting shadows needs to use its own ShadowGenerator.\r\n     * Documentation : https://doc.babylonjs.com/babylon101/cascadedShadows\r\n     * @param mapSize The size of the texture what stores the shadows. Example : 1024.\r\n     * @param light The directional light object generating the shadows.\r\n     * @param usefulFloatFirst By default the generator will try to use half float textures but if you need precision (for self shadowing for instance), you can use this option to enforce full float texture.\r\n     * @param camera Camera associated with this shadow generator (default: null). If null, takes the scene active camera at the time we need to access it\r\n     * @param useRedTextureType Forces the generator to use a Red instead of a RGBA type for the shadow map texture format (default: true)\r\n     */\r\n    constructor(mapSize: number, light: DirectionalLight, usefulFloatFirst?: boolean, camera?: Nullable<Camera>, useRedTextureType = true) {\r\n        if (!CascadedShadowGenerator.IsSupported) {\r\n            Logger.Error(\"CascadedShadowMap is not supported by the current engine.\");\r\n            return;\r\n        }\r\n\r\n        super(mapSize, light, usefulFloatFirst, camera, useRedTextureType);\r\n\r\n        this.usePercentageCloserFiltering = true;\r\n    }\r\n\r\n    protected override _initializeGenerator(): void {\r\n        this.penumbraDarkness = this.penumbraDarkness ?? 1.0;\r\n        this._numCascades = this._numCascades ?? CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\r\n        this.stabilizeCascades = this.stabilizeCascades ?? false;\r\n        this._freezeShadowCastersBoundingInfoObservable = this._freezeShadowCastersBoundingInfoObservable ?? null;\r\n        this.freezeShadowCastersBoundingInfo = this.freezeShadowCastersBoundingInfo ?? false;\r\n        this._scbiMin = this._scbiMin ?? new Vector3(0, 0, 0);\r\n        this._scbiMax = this._scbiMax ?? new Vector3(0, 0, 0);\r\n        this._shadowCastersBoundingInfo = this._shadowCastersBoundingInfo ?? new BoundingInfo(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n        this._breaksAreDirty = this._breaksAreDirty ?? true;\r\n        this._minDistance = this._minDistance ?? 0;\r\n        this._maxDistance = this._maxDistance ?? 1;\r\n        this._currentLayer = this._currentLayer ?? 0;\r\n        this._shadowMaxZ = this._shadowMaxZ ?? this._getCamera()?.maxZ ?? 10000;\r\n        this._debug = this._debug ?? false;\r\n        this._depthClamp = this._depthClamp ?? true;\r\n        this._cascadeBlendPercentage = this._cascadeBlendPercentage ?? 0.1;\r\n        this._lambda = this._lambda ?? 0.5;\r\n        this._autoCalcDepthBounds = this._autoCalcDepthBounds ?? false;\r\n\r\n        this._recreateSceneUBOs();\r\n\r\n        super._initializeGenerator();\r\n    }\r\n\r\n    protected override _createTargetRenderTexture(): void {\r\n        const engine = this._scene.getEngine();\r\n        this._shadowMap?.dispose();\r\n        const size = { width: this._mapSize, height: this._mapSize, layers: this.numCascades };\r\n        this._shadowMap = new RenderTargetTexture(\r\n            this._light.name + \"_CSMShadowMap\",\r\n            size,\r\n            this._scene,\r\n            false,\r\n            true,\r\n            this._textureType,\r\n            false,\r\n            undefined,\r\n            false,\r\n            false,\r\n            undefined,\r\n            this._useRedTextureType ? Constants.TEXTUREFORMAT_RED : Constants.TEXTUREFORMAT_RGBA\r\n        );\r\n        this._shadowMap.createDepthStencilTexture(\r\n            engine.useReverseDepthBuffer ? Constants.GREATER : Constants.LESS,\r\n            true,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            `DepthStencilForCSMShadowGenerator-${this._light.name}`\r\n        );\r\n        this._shadowMap.noPrePassRenderer = true;\r\n    }\r\n\r\n    protected override _initializeShadowMap(): void {\r\n        super._initializeShadowMap();\r\n\r\n        if (this._shadowMap === null) {\r\n            return;\r\n        }\r\n\r\n        this._transformMatricesAsArray = new Float32Array(this._numCascades * 16);\r\n        this._viewSpaceFrustumsZ = new Array(this._numCascades);\r\n        this._frustumLengths = new Array(this._numCascades);\r\n        this._lightSizeUVCorrection = new Array(this._numCascades * 2);\r\n        this._depthCorrection = new Array(this._numCascades);\r\n\r\n        this._cascades = [];\r\n        this._viewMatrices = [];\r\n        this._projectionMatrices = [];\r\n        this._transformMatrices = [];\r\n        this._cascadeMinExtents = [];\r\n        this._cascadeMaxExtents = [];\r\n        this._frustumCenter = [];\r\n        this._shadowCameraPos = [];\r\n        this._frustumCornersWorldSpace = [];\r\n\r\n        for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n            this._cascades[cascadeIndex] = {\r\n                prevBreakDistance: 0,\r\n                breakDistance: 0,\r\n            };\r\n\r\n            this._viewMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._projectionMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._transformMatrices[cascadeIndex] = Matrix.Zero();\r\n            this._cascadeMinExtents[cascadeIndex] = new Vector3();\r\n            this._cascadeMaxExtents[cascadeIndex] = new Vector3();\r\n            this._frustumCenter[cascadeIndex] = new Vector3();\r\n            this._shadowCameraPos[cascadeIndex] = new Vector3();\r\n            this._frustumCornersWorldSpace[cascadeIndex] = new Array(CascadedShadowGenerator._FrustumCornersNdcSpace.length);\r\n\r\n            for (let i = 0; i < CascadedShadowGenerator._FrustumCornersNdcSpace.length; ++i) {\r\n                this._frustumCornersWorldSpace[cascadeIndex][i] = new Vector3();\r\n            }\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._shadowMap.onBeforeBindObservable.clear();\r\n        this._shadowMap.onBeforeRenderObservable.clear();\r\n\r\n        this._shadowMap.onBeforeRenderObservable.add((layer: number) => {\r\n            if (this._sceneUBOs) {\r\n                this._scene.setSceneUniformBuffer(this._sceneUBOs[layer]);\r\n            }\r\n            this._currentLayer = layer;\r\n            if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n                engine.setColorWrite(false);\r\n            }\r\n            this._scene.setTransformMatrix(this.getCascadeViewMatrix(layer)!, this.getCascadeProjectionMatrix(layer)!);\r\n            if (this._useUBO) {\r\n                this._scene.getSceneUniformBuffer().unbindEffect();\r\n                this._scene.finalizeSceneUbo();\r\n            }\r\n        });\r\n\r\n        this._shadowMap.onBeforeBindObservable.add(() => {\r\n            this._currentSceneUBO = this._scene.getSceneUniformBuffer();\r\n            engine._debugPushGroup?.(`cascaded shadow map generation for pass id ${engine.currentRenderPassId}`, 1);\r\n            if (this._breaksAreDirty) {\r\n                this._splitFrustum();\r\n            }\r\n            this._computeMatrices();\r\n        });\r\n\r\n        this._splitFrustum();\r\n    }\r\n\r\n    protected override _bindCustomEffectForRenderSubMeshForShadowMap(subMesh: SubMesh, effect: Effect): void {\r\n        effect.setMatrix(\"viewProjection\", this.getCascadeTransformMatrix(this._currentLayer)!);\r\n    }\r\n\r\n    protected override _isReadyCustomDefines(defines: any): void {\r\n        defines.push(\"#define SM_DEPTHCLAMP \" + (this._depthClamp && this._filter !== ShadowGenerator.FILTER_PCSS ? \"1\" : \"0\"));\r\n    }\r\n\r\n    /**\r\n     * Prepare all the defines in a material relying on a shadow map at the specified light index.\r\n     * @param defines Defines of the material we want to update\r\n     * @param lightIndex Index of the light in the enabled light list of the material\r\n     */\r\n    public override prepareDefines(defines: any, lightIndex: number): void {\r\n        super.prepareDefines(defines, lightIndex);\r\n\r\n        const scene = this._scene;\r\n        const light = this._light;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        defines[\"SHADOWCSM\" + lightIndex] = true;\r\n        defines[\"SHADOWCSMDEBUG\" + lightIndex] = this.debug;\r\n        defines[\"SHADOWCSMNUM_CASCADES\" + lightIndex] = this.numCascades;\r\n        defines[\"SHADOWCSM_RIGHTHANDED\" + lightIndex] = scene.useRightHandedSystem;\r\n\r\n        const camera = this._getCamera();\r\n\r\n        if (camera && this._shadowMaxZ <= (camera.maxZ || this._shadowMaxZ)) {\r\n            defines[\"SHADOWCSMUSESHADOWMAXZ\" + lightIndex] = true;\r\n        }\r\n\r\n        if (this.cascadeBlendPercentage === 0) {\r\n            defines[\"SHADOWCSMNOBLEND\" + lightIndex] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the shadow related information inside of an effect (information like near, far, darkness...\r\n     * defined in the generator but impacting the effect).\r\n     * @param lightIndex Index of the light in the enabled light list of the material owning the effect\r\n     * @param effect The effect we are binfing the information for\r\n     */\r\n    public override bindShadowLight(lightIndex: string, effect: Effect): void {\r\n        const light = this._light;\r\n        const scene = this._scene;\r\n\r\n        if (!scene.shadowsEnabled || !light.shadowEnabled) {\r\n            return;\r\n        }\r\n\r\n        const camera = this._getCamera();\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        const shadowMap = this.getShadowMap();\r\n        if (!shadowMap) {\r\n            return;\r\n        }\r\n\r\n        const width = shadowMap.getSize().width;\r\n\r\n        effect.setMatrices(\"lightMatrix\" + lightIndex, this._transformMatricesAsArray);\r\n        effect.setArray(\"viewFrustumZ\" + lightIndex, this._viewSpaceFrustumsZ);\r\n        effect.setFloat(\"cascadeBlendFactor\" + lightIndex, this.cascadeBlendPercentage === 0 ? 10000 : 1 / this.cascadeBlendPercentage);\r\n        effect.setArray(\"frustumLengths\" + lightIndex, this._frustumLengths);\r\n\r\n        // Only PCF uses depth stencil texture.\r\n        if (this._filter === ShadowGenerator.FILTER_PCF) {\r\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        } else if (this._filter === ShadowGenerator.FILTER_PCSS) {\r\n            for (let cascadeIndex = 0; cascadeIndex < this._numCascades; ++cascadeIndex) {\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 0] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].x - this._cascadeMinExtents[0].x) / (this._cascadeMaxExtents[cascadeIndex].x - this._cascadeMinExtents[cascadeIndex].x); // x correction\r\n                this._lightSizeUVCorrection[cascadeIndex * 2 + 1] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[0].y - this._cascadeMinExtents[0].y) / (this._cascadeMaxExtents[cascadeIndex].y - this._cascadeMinExtents[cascadeIndex].y); // y correction\r\n                this._depthCorrection[cascadeIndex] =\r\n                    cascadeIndex === 0\r\n                        ? 1\r\n                        : (this._cascadeMaxExtents[cascadeIndex].z - this._cascadeMinExtents[cascadeIndex].z) / (this._cascadeMaxExtents[0].z - this._cascadeMinExtents[0].z);\r\n            }\r\n            effect.setDepthStencilTexture(\"shadowTexture\" + lightIndex, shadowMap);\r\n            effect.setTexture(\"depthTexture\" + lightIndex, shadowMap);\r\n\r\n            effect.setArray2(\"lightSizeUVCorrection\" + lightIndex, this._lightSizeUVCorrection);\r\n            effect.setArray(\"depthCorrection\" + lightIndex, this._depthCorrection);\r\n            effect.setFloat(\"penumbraDarkness\" + lightIndex, this.penumbraDarkness);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), 1 / width, this._contactHardeningLightSizeUVRatio * width, this.frustumEdgeFalloff, lightIndex);\r\n        } else {\r\n            effect.setTexture(\"shadowTexture\" + lightIndex, shadowMap);\r\n            light._uniformBuffer.updateFloat4(\"shadowsInfo\", this.getDarkness(), width, 1 / width, this.frustumEdgeFalloff, lightIndex);\r\n        }\r\n\r\n        light._uniformBuffer.updateFloat2(\r\n            \"depthValues\",\r\n            this.getLight().getDepthMinZ(camera),\r\n            this.getLight().getDepthMinZ(camera) + this.getLight().getDepthMaxZ(camera),\r\n            lightIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the transformation matrix of the first cascade used to project the meshes into the map from the light point of view.\r\n     * (eq to view projection * shadow projection matrices)\r\n     * @returns The transform matrix used to create the shadow map\r\n     */\r\n    public override getTransformMatrix(): Matrix {\r\n        return this.getCascadeTransformMatrix(0)!;\r\n    }\r\n\r\n    /**\r\n     * Disposes the ShadowGenerator.\r\n     * Returns nothing.\r\n     */\r\n    public override dispose(): void {\r\n        super.dispose();\r\n\r\n        if (this._freezeShadowCastersBoundingInfoObservable) {\r\n            this._scene.onBeforeRenderObservable.remove(this._freezeShadowCastersBoundingInfoObservable);\r\n            this._freezeShadowCastersBoundingInfoObservable = null;\r\n        }\r\n\r\n        if (this._depthReducer) {\r\n            this._depthReducer.dispose();\r\n            this._depthReducer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the shadow generator setup to a json object.\r\n     * @returns The serialized JSON object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject: any = super.serialize();\r\n        const shadowMap = this.getShadowMap();\r\n\r\n        if (!shadowMap) {\r\n            return serializationObject;\r\n        }\r\n\r\n        serializationObject.numCascades = this._numCascades;\r\n        serializationObject.debug = this._debug;\r\n        serializationObject.stabilizeCascades = this.stabilizeCascades;\r\n        serializationObject.lambda = this._lambda;\r\n        serializationObject.cascadeBlendPercentage = this.cascadeBlendPercentage;\r\n        serializationObject.depthClamp = this._depthClamp;\r\n        serializationObject.autoCalcDepthBounds = this.autoCalcDepthBounds;\r\n        serializationObject.shadowMaxZ = this._shadowMaxZ;\r\n        serializationObject.penumbraDarkness = this.penumbraDarkness;\r\n\r\n        serializationObject.freezeShadowCastersBoundingInfo = this._freezeShadowCastersBoundingInfo;\r\n        serializationObject.minDistance = this.minDistance;\r\n        serializationObject.maxDistance = this.maxDistance;\r\n\r\n        serializationObject.renderList = [];\r\n        if (shadowMap.renderList) {\r\n            for (let meshIndex = 0; meshIndex < shadowMap.renderList.length; meshIndex++) {\r\n                const mesh = shadowMap.renderList[meshIndex];\r\n\r\n                serializationObject.renderList.push(mesh.id);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized ShadowGenerator and returns a new ShadowGenerator.\r\n     * @param parsedShadowGenerator The JSON object to parse\r\n     * @param scene The scene to create the shadow map for\r\n     * @returns The parsed shadow generator\r\n     */\r\n    public static override Parse(parsedShadowGenerator: any, scene: Scene): ShadowGenerator {\r\n        const shadowGenerator = ShadowGenerator.Parse(\r\n            parsedShadowGenerator,\r\n            scene,\r\n            (mapSize: number, light: IShadowLight, camera: Nullable<Camera>) => new CascadedShadowGenerator(mapSize, <DirectionalLight>light, undefined, camera)\r\n        ) as CascadedShadowGenerator;\r\n\r\n        if (parsedShadowGenerator.numCascades !== undefined) {\r\n            shadowGenerator.numCascades = parsedShadowGenerator.numCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.debug !== undefined) {\r\n            shadowGenerator.debug = parsedShadowGenerator.debug;\r\n        }\r\n\r\n        if (parsedShadowGenerator.stabilizeCascades !== undefined) {\r\n            shadowGenerator.stabilizeCascades = parsedShadowGenerator.stabilizeCascades;\r\n        }\r\n\r\n        if (parsedShadowGenerator.lambda !== undefined) {\r\n            shadowGenerator.lambda = parsedShadowGenerator.lambda;\r\n        }\r\n\r\n        if (parsedShadowGenerator.cascadeBlendPercentage !== undefined) {\r\n            shadowGenerator.cascadeBlendPercentage = parsedShadowGenerator.cascadeBlendPercentage;\r\n        }\r\n\r\n        if (parsedShadowGenerator.depthClamp !== undefined) {\r\n            shadowGenerator.depthClamp = parsedShadowGenerator.depthClamp;\r\n        }\r\n\r\n        if (parsedShadowGenerator.autoCalcDepthBounds !== undefined) {\r\n            shadowGenerator.autoCalcDepthBounds = parsedShadowGenerator.autoCalcDepthBounds;\r\n        }\r\n\r\n        if (parsedShadowGenerator.shadowMaxZ !== undefined) {\r\n            shadowGenerator.shadowMaxZ = parsedShadowGenerator.shadowMaxZ;\r\n        }\r\n\r\n        if (parsedShadowGenerator.penumbraDarkness !== undefined) {\r\n            shadowGenerator.penumbraDarkness = parsedShadowGenerator.penumbraDarkness;\r\n        }\r\n\r\n        if (parsedShadowGenerator.freezeShadowCastersBoundingInfo !== undefined) {\r\n            shadowGenerator.freezeShadowCastersBoundingInfo = parsedShadowGenerator.freezeShadowCastersBoundingInfo;\r\n        }\r\n\r\n        if (parsedShadowGenerator.minDistance !== undefined && parsedShadowGenerator.maxDistance !== undefined) {\r\n            shadowGenerator.setMinMaxDistance(parsedShadowGenerator.minDistance, parsedShadowGenerator.maxDistance);\r\n        }\r\n\r\n        return shadowGenerator;\r\n    }\r\n}\r\n", "import type { Scene, FrameGraph, FrameGraphObjectList, IShadowLight, WritableObject, FrameGraphTextureHandle, Camera } from \"core/index\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ShadowGenerator } from \"../../../Lights/Shadows/shadowGenerator\";\r\n\r\n/**\r\n * Task used to generate shadows from a list of objects.\r\n */\r\nexport class FrameGraphShadowGeneratorTask extends FrameGraphTask {\r\n    /**\r\n     * The object list that generates shadows.\r\n     */\r\n    public objectList: FrameGraphObjectList;\r\n\r\n    private _light: IShadowLight;\r\n    /**\r\n     * The light to generate shadows from.\r\n     */\r\n    public get light(): IShadowLight {\r\n        return this._light;\r\n    }\r\n\r\n    public set light(value: IShadowLight) {\r\n        if (value === this._light) {\r\n            return;\r\n        }\r\n\r\n        this._light = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _camera: Camera;\r\n    /**\r\n     * Gets or sets the camera used to generate the shadow generator.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        this._camera = camera;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _mapSize = 1024;\r\n    /**\r\n     * The size of the shadow map.\r\n     */\r\n    public get mapSize() {\r\n        return this._mapSize;\r\n    }\r\n\r\n    public set mapSize(value: number) {\r\n        if (value === this._mapSize) {\r\n            return;\r\n        }\r\n\r\n        this._mapSize = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _useFloat32TextureType = false;\r\n    /**\r\n     * If true, the shadow map will use a 32 bits float texture type (else, 16 bits float is used if supported).\r\n     */\r\n    public get useFloat32TextureType() {\r\n        return this._useFloat32TextureType;\r\n    }\r\n\r\n    public set useFloat32TextureType(value: boolean) {\r\n        if (value === this._useFloat32TextureType) {\r\n            return;\r\n        }\r\n\r\n        this._useFloat32TextureType = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _useRedTextureFormat = true;\r\n    /**\r\n     * If true, the shadow map will use a red texture format (else, a RGBA format is used).\r\n     */\r\n    public get useRedTextureFormat() {\r\n        return this._useRedTextureFormat;\r\n    }\r\n\r\n    public set useRedTextureFormat(value: boolean) {\r\n        if (value === this._useRedTextureFormat) {\r\n            return;\r\n        }\r\n\r\n        this._useRedTextureFormat = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _bias = 0.01;\r\n    /**\r\n     * The bias to apply to the shadow map.\r\n     */\r\n    public get bias() {\r\n        return this._bias;\r\n    }\r\n\r\n    public set bias(value: number) {\r\n        if (value === this._bias) {\r\n            return;\r\n        }\r\n\r\n        this._bias = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.bias = value;\r\n        }\r\n    }\r\n\r\n    private _normalBias = 0;\r\n    /**\r\n     * The normal bias to apply to the shadow map.\r\n     */\r\n    public get normalBias() {\r\n        return this._normalBias;\r\n    }\r\n\r\n    public set normalBias(value: number) {\r\n        if (value === this._normalBias) {\r\n            return;\r\n        }\r\n\r\n        this._normalBias = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.normalBias = value;\r\n        }\r\n    }\r\n\r\n    private _darkness = 0;\r\n    /**\r\n     * The darkness of the shadows.\r\n     */\r\n    public get darkness() {\r\n        return this._darkness;\r\n    }\r\n\r\n    public set darkness(value: number) {\r\n        if (value === this._darkness) {\r\n            return;\r\n        }\r\n\r\n        this._darkness = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.darkness = value;\r\n        }\r\n    }\r\n\r\n    private _transparencyShadow = false;\r\n    /**\r\n     * Gets or sets the ability to have transparent shadow\r\n     */\r\n    public get transparencyShadow() {\r\n        return this._transparencyShadow;\r\n    }\r\n\r\n    public set transparencyShadow(value: boolean) {\r\n        if (value === this._transparencyShadow) {\r\n            return;\r\n        }\r\n\r\n        this._transparencyShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.transparencyShadow = value;\r\n        }\r\n    }\r\n\r\n    private _enableSoftTransparentShadow = false;\r\n    /**\r\n     * Enables or disables shadows with varying strength based on the transparency\r\n     */\r\n    public get enableSoftTransparentShadow() {\r\n        return this._enableSoftTransparentShadow;\r\n    }\r\n\r\n    public set enableSoftTransparentShadow(value: boolean) {\r\n        if (value === this._enableSoftTransparentShadow) {\r\n            return;\r\n        }\r\n\r\n        this._enableSoftTransparentShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.enableSoftTransparentShadow = value;\r\n        }\r\n    }\r\n\r\n    private _useOpacityTextureForTransparentShadow = false;\r\n    /**\r\n     * If this is true, use the opacity texture's alpha channel for transparent shadows instead of the diffuse one\r\n     */\r\n    public get useOpacityTextureForTransparentShadow() {\r\n        return this._useOpacityTextureForTransparentShadow;\r\n    }\r\n\r\n    public set useOpacityTextureForTransparentShadow(value: boolean) {\r\n        if (value === this._useOpacityTextureForTransparentShadow) {\r\n            return;\r\n        }\r\n\r\n        this._useOpacityTextureForTransparentShadow = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.useOpacityTextureForTransparentShadow = value;\r\n        }\r\n    }\r\n\r\n    private _filter = ShadowGenerator.FILTER_PCF;\r\n    /**\r\n     * The filter to apply to the shadow map.\r\n     */\r\n    public get filter() {\r\n        return this._filter;\r\n    }\r\n\r\n    public set filter(value: number) {\r\n        if (value === this._filter) {\r\n            return;\r\n        }\r\n\r\n        this._filter = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.filter = value;\r\n        }\r\n    }\r\n\r\n    private _filteringQuality = ShadowGenerator.QUALITY_HIGH;\r\n    /**\r\n     * The filtering quality to apply to the filter.\r\n     */\r\n    public get filteringQuality() {\r\n        return this._filteringQuality;\r\n    }\r\n\r\n    public set filteringQuality(value: number) {\r\n        if (value === this._filteringQuality) {\r\n            return;\r\n        }\r\n\r\n        this._filteringQuality = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.filteringQuality = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The shadow generator.\r\n     */\r\n    public readonly shadowGenerator: ShadowGenerator;\r\n\r\n    /**\r\n     * The shadow map texture.\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    protected _shadowGenerator: ShadowGenerator | undefined;\r\n\r\n    protected _createShadowGenerator() {\r\n        this._shadowGenerator = new ShadowGenerator(this._mapSize, this._light, this._useFloat32TextureType, undefined, this._useRedTextureFormat);\r\n    }\r\n\r\n    protected _setupShadowGenerator() {\r\n        this._shadowGenerator?.dispose();\r\n        this._shadowGenerator = undefined;\r\n        if (this._light !== undefined) {\r\n            this._createShadowGenerator();\r\n            const shadowGenerator = this._shadowGenerator as ShadowGenerator | undefined;\r\n            if (shadowGenerator === undefined) {\r\n                return;\r\n            }\r\n            shadowGenerator.bias = this._bias;\r\n            shadowGenerator.normalBias = this._normalBias;\r\n            shadowGenerator.darkness = this._darkness;\r\n            shadowGenerator.transparencyShadow = this._transparencyShadow;\r\n            shadowGenerator.enableSoftTransparentShadow = this._enableSoftTransparentShadow;\r\n            shadowGenerator.useOpacityTextureForTransparentShadow = this._useOpacityTextureForTransparentShadow;\r\n            shadowGenerator.filter = this._filter;\r\n            shadowGenerator.filteringQuality = this._filteringQuality;\r\n\r\n            const shadowMap = shadowGenerator.getShadowMap()!;\r\n            shadowMap._disableEngineStages = true;\r\n            shadowMap.cameraForLOD = this._camera;\r\n\r\n            (this.shadowGenerator as WritableObject<ShadowGenerator | undefined>) = shadowGenerator;\r\n        }\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        return !!this._shadowGenerator && !!this._shadowGenerator.getShadowMap()?.isReadyForRendering();\r\n    }\r\n\r\n    /**\r\n     * Creates a new shadow generator task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph the task belongs to.\r\n     * @param _scene The scene to create the shadow generator for.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, _scene: Scene) {\r\n        super(name, frameGraph);\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public record() {\r\n        if (this.light === undefined || this.objectList === undefined || this.camera === undefined) {\r\n            throw new Error(`FrameGraphShadowGeneratorTask ${this.name}: light, objectList and camera are required`);\r\n        }\r\n\r\n        // Make sure the renderList / particleSystemList are set when FrameGraphShadowGeneratorTask.isReady() is called!\r\n        const shadowMap = this._shadowGenerator!.getShadowMap()!;\r\n\r\n        shadowMap.renderList = this.objectList.meshes;\r\n        shadowMap.particleSystemList = this.objectList.particleSystems;\r\n\r\n        const shadowTextureHandle = this._frameGraph.textureManager.importTexture(`${this.name} shadowmap`, this._shadowGenerator!.getShadowMap()!.getInternalTexture()!);\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, shadowTextureHandle);\r\n\r\n        const pass = this._frameGraph.addPass(this.name);\r\n\r\n        pass.setExecuteFunc((context) => {\r\n            if (!this.light.isEnabled() || !this.light.shadowEnabled) {\r\n                return;\r\n            }\r\n\r\n            const shadowMap = this._shadowGenerator!.getShadowMap()!;\r\n\r\n            shadowMap.renderList = this.objectList.meshes;\r\n            shadowMap.particleSystemList = this.objectList.particleSystems;\r\n\r\n            context.saveDepthStates();\r\n            context.setDepthStates(true, true);\r\n\r\n            context.renderUnmanaged(shadowMap);\r\n\r\n            context.restoreDepthStates();\r\n        });\r\n\r\n        const passDisabled = this._frameGraph.addPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.setExecuteFunc((_context) => {});\r\n    }\r\n\r\n    public override dispose() {\r\n        this._shadowGenerator?.dispose();\r\n        this._shadowGenerator = undefined;\r\n    }\r\n}\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_1\", (name, scene) => {\r\n    return () => new DirectionalLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A directional light is defined by a direction (what a surprise!).\r\n * The light is emitted from everywhere in the specified direction, and has an infinite range.\r\n * An example of a directional light is when a distance planet is lit by the apparently parallel lines of light from its sun. Light in a downward direction will light the top of an object.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class DirectionalLight extends ShadowLight {\r\n    private _shadowFrustumSize = 0;\r\n    /**\r\n     * Fix frustum size for the shadow generation. This is disabled if the value is 0.\r\n     */\r\n    @serialize()\r\n    public get shadowFrustumSize(): number {\r\n        return this._shadowFrustumSize;\r\n    }\r\n    /**\r\n     * Specifies a fix frustum size for the shadow generation.\r\n     */\r\n    public set shadowFrustumSize(value: number) {\r\n        this._shadowFrustumSize = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    private _shadowOrthoScale = 0.1;\r\n    /**\r\n     * Gets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    @serialize()\r\n    public get shadowOrthoScale(): number {\r\n        return this._shadowOrthoScale;\r\n    }\r\n    /**\r\n     * Sets the shadow projection scale against the optimal computed one.\r\n     * 0.1 by default which means that the projection window is increase by 10% from the optimal size.\r\n     * This does not impact in fixed frustum size (shadowFrustumSize being set)\r\n     */\r\n    public set shadowOrthoScale(value: number) {\r\n        this._shadowOrthoScale = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Automatically compute the projection matrix to best fit (including all the casters)\r\n     * on each frame.\r\n     */\r\n    @serialize()\r\n    public autoUpdateExtends = true;\r\n\r\n    /**\r\n     * Automatically compute the shadowMinZ and shadowMaxZ for the projection matrix to best fit (including all the casters)\r\n     * on each frame. autoUpdateExtends must be set to true for this to work\r\n     */\r\n    @serialize()\r\n    public autoCalcShadowZBounds = false;\r\n\r\n    // Cache\r\n    @serialize(\"orthoLeft\")\r\n    private _orthoLeft = Number.MAX_VALUE;\r\n    @serialize(\"orthoRight\")\r\n    private _orthoRight = Number.MIN_VALUE;\r\n    @serialize(\"orthoTop\")\r\n    private _orthoTop = Number.MIN_VALUE;\r\n    @serialize(\"orthoBottom\")\r\n    private _orthoBottom = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * Gets or sets the orthoLeft property used to build the light frustum\r\n     */\r\n    public get orthoLeft(): number {\r\n        return this._orthoLeft;\r\n    }\r\n\r\n    public set orthoLeft(left: number) {\r\n        this._orthoLeft = left;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoRight property used to build the light frustum\r\n     */\r\n    public get orthoRight(): number {\r\n        return this._orthoRight;\r\n    }\r\n\r\n    public set orthoRight(right: number) {\r\n        this._orthoRight = right;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoTop property used to build the light frustum\r\n     */\r\n    public get orthoTop(): number {\r\n        return this._orthoTop;\r\n    }\r\n\r\n    public set orthoTop(top: number) {\r\n        this._orthoTop = top;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the orthoBottom property used to build the light frustum\r\n     */\r\n    public get orthoBottom(): number {\r\n        return this._orthoBottom;\r\n    }\r\n\r\n    public set orthoBottom(bottom: number) {\r\n        this._orthoBottom = bottom;\r\n    }\r\n\r\n    /**\r\n     * Creates a DirectionalLight object in the scene, oriented towards the passed direction (Vector3).\r\n     * The directional light is emitted from everywhere in the given direction.\r\n     * It can cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = direction.scale(-1.0);\r\n        this.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"DirectionalLight\".\r\n     * @returns The class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"DirectionalLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 1.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public override getTypeID(): number {\r\n        return Light.LIGHTTYPEID_DIRECTIONALLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        if (this.shadowFrustumSize > 0) {\r\n            this._setDefaultFixedFrustumShadowProjectionMatrix(matrix);\r\n        } else {\r\n            this._setDefaultAutoExtendShadowProjectionMatrix(matrix, viewMatrix, renderList);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as fixed frustum projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     */\r\n    protected _setDefaultFixedFrustumShadowProjectionMatrix(matrix: Matrix): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        Matrix.OrthoLHToRef(\r\n            this.shadowFrustumSize,\r\n            this.shadowFrustumSize,\r\n            this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ,\r\n            this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as auto extend projection matrix for the shadows cast by the light according to the passed view matrix.\r\n     * Returns the DirectionalLight Shadow projection matrix.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    protected _setDefaultAutoExtendShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        // Check extends\r\n        if (this.autoUpdateExtends || this._orthoLeft === Number.MAX_VALUE) {\r\n            const tempVector3 = Vector3.Zero();\r\n\r\n            this._orthoLeft = Number.MAX_VALUE;\r\n            this._orthoRight = -Number.MAX_VALUE;\r\n            this._orthoTop = -Number.MAX_VALUE;\r\n            this._orthoBottom = Number.MAX_VALUE;\r\n\r\n            let shadowMinZ = Number.MAX_VALUE;\r\n            let shadowMaxZ = -Number.MAX_VALUE;\r\n\r\n            for (let meshIndex = 0; meshIndex < renderList.length; meshIndex++) {\r\n                const mesh = renderList[meshIndex];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                const boundingInfo = mesh.getBoundingInfo();\r\n                const boundingBox = boundingInfo.boundingBox;\r\n\r\n                for (let index = 0; index < boundingBox.vectorsWorld.length; index++) {\r\n                    Vector3.TransformCoordinatesToRef(boundingBox.vectorsWorld[index], viewMatrix, tempVector3);\r\n\r\n                    if (tempVector3.x < this._orthoLeft) {\r\n                        this._orthoLeft = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y < this._orthoBottom) {\r\n                        this._orthoBottom = tempVector3.y;\r\n                    }\r\n\r\n                    if (tempVector3.x > this._orthoRight) {\r\n                        this._orthoRight = tempVector3.x;\r\n                    }\r\n                    if (tempVector3.y > this._orthoTop) {\r\n                        this._orthoTop = tempVector3.y;\r\n                    }\r\n                    if (this.autoCalcShadowZBounds) {\r\n                        if (tempVector3.z < shadowMinZ) {\r\n                            shadowMinZ = tempVector3.z;\r\n                        }\r\n                        if (tempVector3.z > shadowMaxZ) {\r\n                            shadowMaxZ = tempVector3.z;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.autoCalcShadowZBounds) {\r\n                this._shadowMinZ = shadowMinZ;\r\n                this._shadowMaxZ = shadowMaxZ;\r\n            }\r\n        }\r\n\r\n        const xOffset = this._orthoRight - this._orthoLeft;\r\n        const yOffset = this._orthoTop - this._orthoBottom;\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera?.minZ || Constants.ShadowMinZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera?.maxZ || Constants.ShadowMaxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.OrthoOffCenterLHToRef(\r\n            this._orthoLeft - xOffset * this.shadowOrthoScale,\r\n            this._orthoRight + xOffset * this.shadowOrthoScale,\r\n            this._orthoBottom - yOffset * this.shadowOrthoScale,\r\n            this._orthoTop + yOffset * this.shadowOrthoScale,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            this.getScene().getEngine().isNDCHalfZRange\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the DirectionalLight transformed position (or position if not parented) and the passed name.\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The directional light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): DirectionalLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z, 1, lightIndex);\r\n            return this;\r\n        }\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", this.direction.x, this.direction.y, this.direction.z, 1, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string): Light {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedDirection.x, this.transformedDirection.y, this.transformedDirection.z);\r\n            return this;\r\n        }\r\n\r\n        effect.setFloat3(lightDataUniformName, this.direction.x, this.direction.y, this.direction.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the minZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param _activeCamera The camera we are returning the min for (not used)\r\n     * @returns the depth min z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override getDepthMinZ(_activeCamera: Nullable<Camera>): number {\r\n        const engine = this._scene.getEngine();\r\n        return !engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxZ used for shadow according to both the scene and the light.\r\n     *\r\n     * Values are fixed on directional lights as it relies on an ortho projection hence the need to convert being\r\n     * -1 and 1 to 0 and 1 doing (depth + min) / (min + max) -> (depth + 1) / (1 + 1) -> (depth * 0.5) + 0.5.\r\n     * (when not using reverse depth buffer / NDC half Z range)\r\n     * @param _activeCamera The camera we are returning the max for\r\n     * @returns the depth max z\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override getDepthMaxZ(_activeCamera: Nullable<Camera>): number {\r\n        const engine = this._scene.getEngine();\r\n        return engine.useReverseDepthBuffer && engine.isNDCHalfZRange ? 0 : 1;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"DIRLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.DirectionalLight\", DirectionalLight);\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InternalTexture } from \"./internalTexture\";\r\n\r\n/**\r\n * Define options used to create an internal texture\r\n */\r\nexport interface InternalTextureCreationOptions {\r\n    /** Specifies if mipmaps must be created. If undefined, the value from generateMipMaps is taken instead */\r\n    createMipMaps?: boolean;\r\n    /** Specifies if mipmaps must be generated */\r\n    generateMipMaps?: boolean;\r\n    /** Defines texture type (unsigned byte by default) */\r\n    type?: number;\r\n    /** Defines sampling mode (trilinear by default) */\r\n    samplingMode?: number;\r\n    /** Defines format (RGBA by default) */\r\n    format?: number;\r\n    /** Defines sample count (1 by default) */\r\n    samples?: number;\r\n    /** Texture creation flags */\r\n    creationFlags?: number;\r\n    /** Creates the RTT in sRGB space */\r\n    useSRGBBuffer?: boolean;\r\n    /** Label of the texture (used for debugging only) */\r\n    label?: string;\r\n    /** If the MSAA texture must be created right away (default: false) */\r\n    createMSAATexture?: boolean;\r\n    /** Comparison function. Used only for depth textures (default: 0) */\r\n    comparisonFunction?: number;\r\n}\r\n\r\n/**\r\n * Define options used to create a render target texture\r\n */\r\nexport interface RenderTargetCreationOptions extends InternalTextureCreationOptions {\r\n    /** Specifies whether or not a depth should be allocated in the texture (true by default) */\r\n    generateDepthBuffer?: boolean;\r\n    /** Specifies whether or not a stencil should be allocated in the texture (false by default)*/\r\n    generateStencilBuffer?: boolean;\r\n    /** Specifies that no color target should be bound to the render target (useful if you only want to write to the depth buffer, for eg) */\r\n    noColorAttachment?: boolean;\r\n    /** Specifies the internal texture to use directly instead of creating one (ignores `noColorAttachment` flag when set) **/\r\n    colorAttachment?: InternalTexture;\r\n}\r\n\r\n/**\r\n * Define options used to create a depth texture\r\n */\r\nexport interface DepthTextureCreationOptions {\r\n    /** Specifies whether or not a stencil should be allocated in the texture. Not used if depthTextureFormat is supplied, in which case stencil creation will depend on this value. */\r\n    generateStencil?: boolean;\r\n    /** Specifies whether or not bilinear filtering is enable on the texture */\r\n    bilinearFiltering?: boolean;\r\n    /** Specifies the comparison function to set on the texture. If 0 or undefined, the texture is not in comparison mode */\r\n    comparisonFunction?: number;\r\n    /** Specifies if the created texture is a cube texture */\r\n    isCube?: boolean;\r\n    /** Specifies the sample count of the depth/stencil texture texture */\r\n    samples?: number;\r\n    /** Specifies the depth texture format to use */\r\n    depthTextureFormat?: number;\r\n    /** Label of the texture (used for debugging only) */\r\n    label?: string;\r\n}\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n */\r\nexport type TextureSize = number | { width: number; height: number; depth?: number; layers?: number };\r\n\r\n/**\r\n * Check if a TextureSize is an object\r\n * @param size The TextureSize to check\r\n * @returns True if the TextureSize is an object\r\n */\r\nexport function textureSizeIsObject(size: TextureSize): size is { width: number; height: number } {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    return (size as { width: number }).width !== undefined;\r\n}\r\n\r\n/**\r\n * Get the width/height dimensions from a TextureSize\r\n * @param size The TextureSize to get the dimensions from\r\n * @returns The width and height as an object\r\n */\r\nexport function getDimensionsFromTextureSize(size: TextureSize): { width: number; height: number } {\r\n    if (textureSizeIsObject(size)) {\r\n        return { width: size.width, height: size.height };\r\n    }\r\n    return { width: size, height: size };\r\n}\r\n", "import type { FrameGraph, FrameGraphTextureHandle, DrawWrapper, FrameGraphRenderPass, FrameGraphRenderContext, EffectWrapper, IStencilState } from \"core/index\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { textureSizeIsObject } from \"../../../Materials/Textures/textureCreationOptions\";\r\n\r\n/**\r\n * Task which applies a post process.\r\n */\r\nexport class FrameGraphPostProcessTask extends FrameGraphTask {\r\n    /**\r\n     * The source texture to apply the post process on.\r\n     * It's allowed to be undefined if the post process does not require a source texture.\r\n     * In that case, targetTexture must be provided.\r\n     */\r\n    public sourceTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The sampling mode to use for the source texture.\r\n     */\r\n    public sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n\r\n    /**\r\n     * The target texture to render the post process to.\r\n     * If not supplied, a texture with the same configuration as the source texture will be created.\r\n     */\r\n    public targetTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The stencil state to use for the post process (optional).\r\n     */\r\n    public stencilState?: IStencilState;\r\n\r\n    /**\r\n     * The depth attachment texture to use for the post process (optional).\r\n     * Note that a post-process task never writes to the depth buffer: attaching a depth texture is only useful if you want to test against the depth/stencil aspect or write to the stencil buffer.\r\n     */\r\n    public depthAttachmentTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * If true, the depth attachment will be read-only.\r\n     * This means that the post process will not write to the depth buffer.\r\n     * Setting depthReadOnly and stencilReadOnly to true is useful when you want to also be able to bind this same depth/stencil attachment to a shader.\r\n     * Note that it will only work in WebGPU, as WebGL does not support read-only depth/stencil attachments.\r\n     */\r\n    public depthReadOnly = false;\r\n\r\n    /**\r\n     * If true, the stencil attachment will be read-only.\r\n     * This means that the post process will not write to the stencil buffer.\r\n     * Setting depthReadOnly and stencilReadOnly to true is useful when you want to also be able to bind this same depth/stencil attachment to a shader.\r\n     * Note that it will only work in WebGPU, as WebGL does not support read-only depth/stencil attachments.\r\n     */\r\n    public stencilReadOnly = false;\r\n\r\n    /**\r\n     * If true, color write will be disabled when applying the post process.\r\n     * This means that the post process will not write to the color buffer.\r\n     */\r\n    public disableColorWrite = false;\r\n\r\n    /**\r\n     * If true, the post process will be generated by a back face full-screen quad (CW order).\r\n     */\r\n    public drawBackFace = false;\r\n\r\n    /**\r\n     * If depth testing should be enabled (default is true).\r\n     */\r\n    public depthTest = true;\r\n\r\n    /**\r\n     * The output texture of the post process.\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The output depth attachment texture.\r\n     * This texture will point to the same texture than the depthAttachmentTexture property if it is set.\r\n     * Note, however, that the handle itself will be different!\r\n     */\r\n    public readonly outputDepthAttachmentTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The post process to apply.\r\n     */\r\n    public readonly postProcess: EffectWrapper;\r\n\r\n    /**\r\n     * The draw wrapper used by the post process\r\n     */\r\n    public get drawWrapper() {\r\n        return this._postProcessDrawWrapper;\r\n    }\r\n\r\n    protected readonly _postProcessDrawWrapper: DrawWrapper;\r\n    protected _sourceWidth: number;\r\n    protected _sourceHeight: number;\r\n    protected _outputWidth: number;\r\n    protected _outputHeight: number;\r\n\r\n    /**\r\n     * Constructs a new post process task.\r\n     * @param name Name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     * @param postProcess The post process to apply.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, postProcess: EffectWrapper) {\r\n        super(name, frameGraph);\r\n\r\n        this.postProcess = postProcess;\r\n        this._postProcessDrawWrapper = this.postProcess.drawWrapper;\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.outputDepthAttachmentTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n\r\n        this.onTexturesAllocatedObservable.add((context) => {\r\n            if (this.sourceTexture !== undefined) {\r\n                context.setTextureSamplingMode(this.sourceTexture, this.sourceSamplingMode);\r\n            }\r\n        });\r\n    }\r\n\r\n    public override isReady() {\r\n        return this.postProcess.isReady();\r\n    }\r\n\r\n    public record(\r\n        skipCreationOfDisabledPasses = false,\r\n        additionalExecute?: (context: FrameGraphRenderContext) => void,\r\n        additionalBindings?: (context: FrameGraphRenderContext) => void\r\n    ): FrameGraphRenderPass {\r\n        if (this.sourceTexture === undefined && this.targetTexture === undefined) {\r\n            throw new Error(`FrameGraphPostProcessTask \"${this.name}\": sourceTexture or targetTexture is required`);\r\n        }\r\n\r\n        const sourceTextureCreationOptions = this.sourceTexture !== undefined ? this._frameGraph.textureManager.getTextureCreationOptions(this.sourceTexture) : undefined;\r\n        if (sourceTextureCreationOptions) {\r\n            sourceTextureCreationOptions.options.samples = 1;\r\n        }\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.targetTexture, this.name, sourceTextureCreationOptions);\r\n        if (this.depthAttachmentTexture !== undefined) {\r\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthAttachmentTexture, this.depthAttachmentTexture);\r\n        }\r\n\r\n        if (sourceTextureCreationOptions) {\r\n            const sourceSize = !sourceTextureCreationOptions.sizeIsPercentage\r\n                ? textureSizeIsObject(sourceTextureCreationOptions.size)\r\n                    ? sourceTextureCreationOptions.size\r\n                    : { width: sourceTextureCreationOptions.size, height: sourceTextureCreationOptions.size }\r\n                : this._frameGraph.textureManager.getAbsoluteDimensions(sourceTextureCreationOptions.size);\r\n\r\n            this._sourceWidth = sourceSize.width;\r\n            this._sourceHeight = sourceSize.height;\r\n        }\r\n\r\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.outputTexture);\r\n\r\n        this._outputWidth = outputTextureDescription.size.width;\r\n        this._outputHeight = outputTextureDescription.size.height;\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.depthReadOnly = this.depthReadOnly;\r\n        pass.stencilReadOnly = this.stencilReadOnly;\r\n\r\n        pass.addDependencies(this.sourceTexture);\r\n\r\n        pass.setRenderTarget(this.outputTexture);\r\n        pass.setRenderTargetDepth(this.depthAttachmentTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            additionalExecute?.(context);\r\n            context.applyFullScreenEffect(\r\n                this._postProcessDrawWrapper,\r\n                () => {\r\n                    if (this.sourceTexture !== undefined) {\r\n                        context.bindTextureHandle(this._postProcessDrawWrapper.effect!, \"textureSampler\", this.sourceTexture);\r\n                    }\r\n                    additionalBindings?.(context);\r\n                    this.postProcess.bind();\r\n                },\r\n                this.stencilState,\r\n                this.disableColorWrite,\r\n                this.drawBackFace,\r\n                this.depthTest\r\n            );\r\n        });\r\n\r\n        if (!skipCreationOfDisabledPasses) {\r\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n            passDisabled.depthReadOnly = this.depthReadOnly;\r\n            passDisabled.stencilReadOnly = this.stencilReadOnly;\r\n\r\n            passDisabled.addDependencies(this.sourceTexture);\r\n\r\n            passDisabled.setRenderTarget(this.outputTexture);\r\n            passDisabled.setRenderTargetDepth(this.depthAttachmentTexture);\r\n            passDisabled.setExecuteFunc((context) => {\r\n                if (this.sourceTexture !== undefined) {\r\n                    context.copyTexture(this.sourceTexture);\r\n                }\r\n            });\r\n        }\r\n\r\n        return pass;\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this.postProcess.dispose();\r\n        super.dispose();\r\n    }\r\n}\r\n", "import type { FrameGraphTextureHandle, FrameGraph, Scene } from \"core/index\";\r\nimport { CascadedShadowGenerator } from \"../../../Lights/Shadows/cascadedShadowGenerator\";\r\nimport { FrameGraphShadowGeneratorTask } from \"./shadowGeneratorTask\";\r\nimport { DirectionalLight } from \"../../../Lights/directionalLight\";\r\nimport { DepthTextureType, ThinMinMaxReducer } from \"../../../Misc/thinMinMaxReducer\";\r\nimport { FrameGraphPostProcessTask } from \"../PostProcesses/postProcessTask\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport { textureSizeIsObject } from \"../../../Materials/Textures/textureCreationOptions\";\r\n\r\n/**\r\n * Task used to generate a cascaded shadow map from a list of objects.\r\n */\r\nexport class FrameGraphCascadedShadowGeneratorTask extends FrameGraphShadowGeneratorTask {\r\n    protected override _shadowGenerator: CascadedShadowGenerator | undefined;\r\n\r\n    /**\r\n     * Checks if a shadow generator task is a cascaded shadow generator task.\r\n     * @param task The task to check.\r\n     * @returns True if the task is a cascaded shadow generator task, else false.\r\n     */\r\n    public static IsCascadedShadowGenerator(task: FrameGraphShadowGeneratorTask): task is FrameGraphCascadedShadowGeneratorTask {\r\n        return (task as FrameGraphCascadedShadowGeneratorTask).numCascades !== undefined;\r\n    }\r\n\r\n    /**\r\n     * The depth texture used by the autoCalcDepthBounds feature (optional if autoCalcDepthBounds is set to false)\r\n     * This texture is used to compute the min/max depth bounds of the scene to setup the cascaded shadow generator.\r\n     * Warning: Do not set a texture if you are not using the autoCalcDepthBounds feature, to avoid generating a depth texture that will not be used.\r\n     */\r\n    public depthTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The type of the depth texture used by the autoCalcDepthBounds feature.\r\n     */\r\n    public depthTextureType: DepthTextureType = DepthTextureType.NormalizedViewDepth;\r\n\r\n    private _numCascades = CascadedShadowGenerator.DEFAULT_CASCADES_COUNT;\r\n    /**\r\n     * The number of cascades.\r\n     */\r\n    public get numCascades() {\r\n        return this._numCascades;\r\n    }\r\n\r\n    public set numCascades(value: number) {\r\n        if (value === this._numCascades) {\r\n            return;\r\n        }\r\n\r\n        this._numCascades = value;\r\n        this._setupShadowGenerator();\r\n    }\r\n\r\n    private _debug = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should display the cascades.\r\n     */\r\n    public get debug() {\r\n        return this._debug;\r\n    }\r\n\r\n    public set debug(value: boolean) {\r\n        if (value === this._debug) {\r\n            return;\r\n        }\r\n\r\n        this._debug = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.debug = value;\r\n        }\r\n    }\r\n\r\n    private _stabilizeCascades = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should stabilize the cascades.\r\n     */\r\n    public get stabilizeCascades() {\r\n        return this._stabilizeCascades;\r\n    }\r\n\r\n    public set stabilizeCascades(value: boolean) {\r\n        if (value === this._stabilizeCascades) {\r\n            return;\r\n        }\r\n\r\n        this._stabilizeCascades = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.stabilizeCascades = value;\r\n        }\r\n    }\r\n\r\n    private _lambda = 0.5;\r\n    /**\r\n     * Gets or sets the lambda parameter of the shadow generator.\r\n     */\r\n    public get lambda() {\r\n        return this._lambda;\r\n    }\r\n\r\n    public set lambda(value: number) {\r\n        if (value === this._lambda) {\r\n            return;\r\n        }\r\n\r\n        this._lambda = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.lambda = value;\r\n        }\r\n    }\r\n\r\n    private _cascadeBlendPercentage = 0.1;\r\n    /**\r\n     * Gets or sets the cascade blend percentage.\r\n     */\r\n    public get cascadeBlendPercentage() {\r\n        return this._cascadeBlendPercentage;\r\n    }\r\n\r\n    public set cascadeBlendPercentage(value: number) {\r\n        if (value === this._cascadeBlendPercentage) {\r\n            return;\r\n        }\r\n\r\n        this._cascadeBlendPercentage = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.cascadeBlendPercentage = value;\r\n        }\r\n    }\r\n\r\n    private _depthClamp = true;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should use depth clamping.\r\n     */\r\n    public get depthClamp() {\r\n        return this._depthClamp;\r\n    }\r\n\r\n    public set depthClamp(value: boolean) {\r\n        if (value === this._depthClamp) {\r\n            return;\r\n        }\r\n\r\n        this._depthClamp = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.depthClamp = value;\r\n        }\r\n    }\r\n\r\n    private _autoCalcDepthBounds = false;\r\n    /**\r\n     * Gets or sets a value indicating whether the shadow generator should automatically calculate the depth bounds.\r\n     */\r\n    public get autoCalcDepthBounds() {\r\n        return this._autoCalcDepthBounds;\r\n    }\r\n\r\n    public set autoCalcDepthBounds(value: boolean) {\r\n        if (value === this._autoCalcDepthBounds) {\r\n            return;\r\n        }\r\n\r\n        this._autoCalcDepthBounds = value;\r\n        this._currentAutoCalcDepthBoundsCounter = this._autoCalcDepthBoundsRefreshRate;\r\n\r\n        if (!value) {\r\n            this._shadowGenerator?.setMinMaxDistance(0, 1);\r\n        }\r\n\r\n        // All passes but the last one are related to min/max reduction and should be enabled/disabled depending on autoCalcDepthBounds value\r\n        const passes = this.passes;\r\n        for (let i = 0; i < passes.length - 1; ++i) {\r\n            passes[i].disabled = !value;\r\n        }\r\n    }\r\n\r\n    private _currentAutoCalcDepthBoundsCounter = 0;\r\n    private _autoCalcDepthBoundsRefreshRate = 1;\r\n    /**\r\n     * Defines the refresh rate of the min/max computation used when autoCalcDepthBounds is set to true\r\n     * Use 0 to compute just once, 1 to compute on every frame, 2 to compute every two frames and so on...\r\n     */\r\n    public get autoCalcDepthBoundsRefreshRate() {\r\n        return this._autoCalcDepthBoundsRefreshRate;\r\n    }\r\n\r\n    public set autoCalcDepthBoundsRefreshRate(value: number) {\r\n        this._autoCalcDepthBoundsRefreshRate = value;\r\n        this._currentAutoCalcDepthBoundsCounter = this._autoCalcDepthBoundsRefreshRate;\r\n    }\r\n\r\n    private _shadowMaxZ = 10000;\r\n    /**\r\n     * Gets or sets the maximum shadow Z value.\r\n     */\r\n    public get shadowMaxZ() {\r\n        return this._shadowMaxZ;\r\n    }\r\n\r\n    public set shadowMaxZ(value: number) {\r\n        if (value === this._shadowMaxZ) {\r\n            return;\r\n        }\r\n\r\n        this._shadowMaxZ = value;\r\n        if (this._shadowGenerator) {\r\n            this._shadowGenerator.shadowMaxZ = value;\r\n        }\r\n    }\r\n\r\n    protected readonly _thinMinMaxReducer: ThinMinMaxReducer;\r\n\r\n    /**\r\n     * Creates a new shadow generator task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph the task belongs to.\r\n     * @param scene The scene to create the shadow generator for.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene) {\r\n        super(name, frameGraph, scene);\r\n\r\n        this._thinMinMaxReducer = new ThinMinMaxReducer(scene);\r\n\r\n        this._thinMinMaxReducer.onAfterReductionPerformed.add((minmax: { min: number; max: number }) => {\r\n            if (!this._shadowGenerator) {\r\n                return;\r\n            }\r\n\r\n            const camera = this.camera;\r\n\r\n            let min = minmax.min,\r\n                max = minmax.max;\r\n\r\n            if (min >= max) {\r\n                min = 0;\r\n                max = 1;\r\n            } else if (camera && this.depthTextureType !== DepthTextureType.NormalizedViewDepth) {\r\n                if (this.depthTextureType === DepthTextureType.ScreenDepth) {\r\n                    const engine = this._frameGraph.engine;\r\n                    const projectionMatrix = camera.getProjectionMatrix();\r\n                    const p2z = projectionMatrix.m[10];\r\n                    const p3z = projectionMatrix.m[14];\r\n\r\n                    if (!engine.isNDCHalfZRange) {\r\n                        // Convert to NDC depth\r\n                        min = min * 2 - 1;\r\n                        max = max * 2 - 1;\r\n                    }\r\n\r\n                    // Convert to view depth\r\n                    min = p3z / (min - p2z);\r\n                    max = p3z / (max - p2z);\r\n                }\r\n\r\n                // Convert to normalized view depth\r\n                const zNear = camera.minZ;\r\n                const zFar = camera.maxZ;\r\n\r\n                min = (min - zNear) / (zFar - zNear);\r\n                max = (max - zNear) / (zFar - zNear);\r\n            }\r\n\r\n            if (min !== this._shadowGenerator.minDistance || max !== this._shadowGenerator.maxDistance) {\r\n                this._shadowGenerator.setMinMaxDistance(min, max);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected override _createShadowGenerator() {\r\n        if (!(this.light instanceof DirectionalLight)) {\r\n            throw new Error(`FrameGraphCascadedShadowGeneratorTask ${this.name}: the CSM shadow generator only supports directional lights.`);\r\n        }\r\n        this._shadowGenerator = new CascadedShadowGenerator(this.mapSize, this.light, this.useFloat32TextureType, this.camera, this.useRedTextureFormat);\r\n        this._shadowGenerator.numCascades = this._numCascades;\r\n    }\r\n\r\n    protected override _setupShadowGenerator() {\r\n        super._setupShadowGenerator();\r\n\r\n        const shadowGenerator = this._shadowGenerator;\r\n        if (shadowGenerator === undefined) {\r\n            return;\r\n        }\r\n\r\n        shadowGenerator.debug = this._debug;\r\n        shadowGenerator.stabilizeCascades = this._stabilizeCascades;\r\n        shadowGenerator.lambda = this._lambda;\r\n        shadowGenerator.cascadeBlendPercentage = this._cascadeBlendPercentage;\r\n        shadowGenerator.depthClamp = this._depthClamp;\r\n        shadowGenerator.shadowMaxZ = this._shadowMaxZ;\r\n    }\r\n\r\n    public override record() {\r\n        if (this.light === undefined || this.objectList === undefined || this.camera === undefined) {\r\n            throw new Error(`FrameGraphCascadedShadowGeneratorTask ${this.name}: light, objectList and camera are required`);\r\n        }\r\n\r\n        if (this.depthTexture !== undefined) {\r\n            const depthTextureCreationOptions = this._frameGraph.textureManager.getTextureCreationOptions(this.depthTexture);\r\n\r\n            const size = !depthTextureCreationOptions.sizeIsPercentage\r\n                ? textureSizeIsObject(depthTextureCreationOptions.size)\r\n                    ? depthTextureCreationOptions.size\r\n                    : { width: depthTextureCreationOptions.size, height: depthTextureCreationOptions.size }\r\n                : this._frameGraph.textureManager.getAbsoluteDimensions(depthTextureCreationOptions.size);\r\n\r\n            const width = size.width;\r\n            const height = size.height;\r\n\r\n            depthTextureCreationOptions.sizeIsPercentage = false;\r\n            depthTextureCreationOptions.options.formats = [Constants.TEXTUREFORMAT_RG];\r\n            depthTextureCreationOptions.options.samples = 1;\r\n\r\n            this._thinMinMaxReducer.setTextureDimensions(width, height, this.depthTextureType);\r\n\r\n            const reductionSteps = this._thinMinMaxReducer.reductionSteps;\r\n\r\n            let targetTexture: FrameGraphTextureHandle;\r\n\r\n            this._frameGraph.addPass(`${this.name} Before Min Max Reduction`).setExecuteFunc((context) => {\r\n                context.pushDebugGroup(`Min Max Reduction`);\r\n            });\r\n\r\n            for (let i = 0; i < reductionSteps.length - 1; ++i) {\r\n                const reductionStep = reductionSteps[i];\r\n\r\n                depthTextureCreationOptions.size = { width: reductionSteps[i + 1].textureWidth, height: reductionSteps[i + 1].textureHeight };\r\n\r\n                const postProcess = new FrameGraphPostProcessTask(reductionStep.name, this._frameGraph, reductionStep);\r\n\r\n                postProcess.sourceTexture = i == 0 ? this.depthTexture : targetTexture!;\r\n                postProcess.sourceSamplingMode = Constants.TEXTURE_NEAREST_NEAREST;\r\n                postProcess.targetTexture = this._frameGraph.textureManager.createRenderTargetTexture(`${this.name} ${reductionStep.name}`, depthTextureCreationOptions);\r\n\r\n                postProcess.record(true);\r\n\r\n                targetTexture = postProcess.outputTexture;\r\n            }\r\n\r\n            this._frameGraph.addPass(`${this.name} After Min Max Reduction`).setExecuteFunc((context) => {\r\n                context.popDebugGroup();\r\n                if (this._autoCalcDepthBounds && this._currentAutoCalcDepthBoundsCounter >= 0) {\r\n                    if (++this._currentAutoCalcDepthBoundsCounter >= this._autoCalcDepthBoundsRefreshRate) {\r\n                        const minMaxTexture = context.getTextureFromHandle(targetTexture!);\r\n                        if (minMaxTexture) {\r\n                            this._thinMinMaxReducer.readMinMax(minMaxTexture);\r\n                        }\r\n                    }\r\n                    this._currentAutoCalcDepthBoundsCounter %= this._autoCalcDepthBoundsRefreshRate;\r\n                    if (this._autoCalcDepthBoundsRefreshRate === 0) {\r\n                        this._currentAutoCalcDepthBoundsCounter = -1;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        super.record();\r\n    }\r\n\r\n    public override dispose() {\r\n        super.dispose();\r\n        this._thinMinMaxReducer.dispose();\r\n    }\r\n}\r\n", "import type {\r\n    FrameGraph,\r\n    FrameGraphTextureHandle,\r\n    Scene,\r\n    Camera,\r\n    FrameGraphObjectList,\r\n    FrameGraphRenderContext,\r\n    ObjectRendererOptions,\r\n    Light,\r\n    Nullable,\r\n    Observer,\r\n    FrameGraphShadowGeneratorTask,\r\n    FrameGraphRenderPass,\r\n    AbstractEngine,\r\n    BoundingBoxRenderer,\r\n    ShadowLight,\r\n} from \"core/index\";\r\nimport { backbufferColorTextureHandle, backbufferDepthStencilTextureHandle } from \"../../frameGraphTypes\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ObjectRenderer } from \"../../../Rendering/objectRenderer\";\r\nimport { FrameGraphCascadedShadowGeneratorTask } from \"./csmShadowGeneratorTask\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\n/**\r\n * Task used to render objects to a texture.\r\n */\r\nexport class FrameGraphObjectRendererTask extends FrameGraphTask {\r\n    /**\r\n     * The target texture where the objects will be rendered.\r\n     */\r\n    public targetTexture: FrameGraphTextureHandle | FrameGraphTextureHandle[];\r\n\r\n    /**\r\n     * The depth attachment texture where the objects will be rendered (optional).\r\n     */\r\n    public depthTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The shadow generators used to render the objects (optional).\r\n     */\r\n    public shadowGenerators?: FrameGraphShadowGeneratorTask[] = [];\r\n\r\n    private _camera: Camera;\r\n\r\n    /**\r\n     * Gets or sets the camera used to render the objects.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        this._camera = camera;\r\n        this._renderer.activeCamera = this.camera;\r\n    }\r\n\r\n    /**\r\n     * The list of objects to render.\r\n     */\r\n    public objectList: FrameGraphObjectList;\r\n\r\n    /**\r\n     * If depth testing should be enabled (default is true).\r\n     */\r\n    public depthTest = true;\r\n\r\n    /**\r\n     * If depth writing should be enabled (default is true).\r\n     */\r\n    public depthWrite = true;\r\n\r\n    /**\r\n     * If shadows should be disabled (default is false).\r\n     */\r\n    public disableShadows = false;\r\n\r\n    private _disableImageProcessing = false;\r\n    /**\r\n     * If image processing should be disabled (default is false).\r\n     * false means that the default image processing configuration will be applied (the one from the scene)\r\n     */\r\n    public get disableImageProcessing() {\r\n        return this._disableImageProcessing;\r\n    }\r\n\r\n    public set disableImageProcessing(value: boolean) {\r\n        if (value === this._disableImageProcessing) {\r\n            return;\r\n        }\r\n\r\n        this._disableImageProcessing = value;\r\n        this._renderer.disableImageProcessing = value;\r\n    }\r\n\r\n    /**\r\n     * Sets this property to true if this task is the main object renderer of the frame graph.\r\n     * It will help to locate the main object renderer in the frame graph when multiple object renderers are used.\r\n     * This is useful for the inspector to know which object renderer to use for additional rendering features like wireframe rendering or frustum light debugging.\r\n     * It is also used to determine the main camera used by the frame graph: this is the camera used by the main object renderer.\r\n     */\r\n    public isMainObjectRenderer = false;\r\n\r\n    private _renderParticles = true;\r\n    /**\r\n     * Define if particles should be rendered (default is true).\r\n     */\r\n    public get renderParticles() {\r\n        return this._renderParticles;\r\n    }\r\n\r\n    public set renderParticles(value: boolean) {\r\n        if (value === this._renderParticles) {\r\n            return;\r\n        }\r\n\r\n        this._renderParticles = value;\r\n        this._renderer.renderParticles = value;\r\n    }\r\n\r\n    private _renderSprites = true;\r\n    /**\r\n     * Define if sprites should be rendered (default is true).\r\n     */\r\n    public get renderSprites() {\r\n        return this._renderSprites;\r\n    }\r\n\r\n    public set renderSprites(value: boolean) {\r\n        if (value === this._renderSprites) {\r\n            return;\r\n        }\r\n\r\n        this._renderSprites = value;\r\n        this._renderer.renderSprites = value;\r\n    }\r\n\r\n    private _forceLayerMaskCheck = true;\r\n    /**\r\n     * Force checking the layerMask property even if a custom list of meshes is provided (ie. if renderList is not undefined). Default is true.\r\n     */\r\n    public get forceLayerMaskCheck() {\r\n        return this._forceLayerMaskCheck;\r\n    }\r\n\r\n    public set forceLayerMaskCheck(value: boolean) {\r\n        if (value === this._forceLayerMaskCheck) {\r\n            return;\r\n        }\r\n\r\n        this._forceLayerMaskCheck = value;\r\n        this._renderer.forceLayerMaskCheck = value;\r\n    }\r\n\r\n    private _enableBoundingBoxRendering = true;\r\n    /**\r\n     * Enables the rendering of bounding boxes for meshes (still subject to Mesh.showBoundingBox or scene.forceShowBoundingBoxes). Default is true.\r\n     */\r\n    public get enableBoundingBoxRendering() {\r\n        return this._enableBoundingBoxRendering;\r\n    }\r\n\r\n    public set enableBoundingBoxRendering(value: boolean) {\r\n        if (value === this._enableBoundingBoxRendering) {\r\n            return;\r\n        }\r\n\r\n        this._enableBoundingBoxRendering = value;\r\n        this._renderer.enableBoundingBoxRendering = value;\r\n    }\r\n\r\n    private _enableOutlineRendering = true;\r\n    /**\r\n     * Enables the rendering of outlines/overlays for meshes (still subject to Mesh.renderOutline/Mesh.renderOverlay). Default is true.\r\n     */\r\n    public get enableOutlineRendering() {\r\n        return this._enableOutlineRendering;\r\n    }\r\n\r\n    public set enableOutlineRendering(value: boolean) {\r\n        if (value === this._enableOutlineRendering) {\r\n            return;\r\n        }\r\n\r\n        this._enableOutlineRendering = value;\r\n        this._renderer.enableOutlineRendering = value;\r\n    }\r\n\r\n    /**\r\n     * The output texture.\r\n     * This texture will point to the same texture than the targetTexture property if it is set.\r\n     * Note, however, that the handle itself will be different!\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The output depth attachment texture.\r\n     * This texture will point to the same texture than the depthTexture property if it is set.\r\n     * Note, however, that the handle itself will be different!\r\n     */\r\n    public readonly outputDepthTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The object renderer used to render the objects.\r\n     */\r\n    public get objectRenderer() {\r\n        return this._renderer;\r\n    }\r\n\r\n    public override get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public override set name(value: string) {\r\n        this._name = value;\r\n        if (this._renderer) {\r\n            this._renderer.name = value;\r\n        }\r\n    }\r\n\r\n    protected readonly _engine: AbstractEngine;\r\n    protected readonly _scene: Scene;\r\n    protected readonly _renderer: ObjectRenderer;\r\n    protected _textureWidth: number;\r\n    protected _textureHeight: number;\r\n    protected _onBeforeRenderObservable: Nullable<Observer<number>> = null;\r\n    protected _onAfterRenderObservable: Nullable<Observer<number>> = null;\r\n    protected _externalObjectRenderer = false;\r\n\r\n    /**\r\n     * Constructs a new object renderer task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph the task belongs to.\r\n     * @param scene The scene the frame graph is associated with.\r\n     * @param options The options of the object renderer.\r\n     * @param existingObjectRenderer An existing object renderer to use (optional). If provided, the options parameter will be ignored.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, scene: Scene, options?: ObjectRendererOptions, existingObjectRenderer?: ObjectRenderer) {\r\n        super(name, frameGraph);\r\n\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n        this._externalObjectRenderer = !!existingObjectRenderer;\r\n        this._renderer = existingObjectRenderer ?? new ObjectRenderer(name, scene, options);\r\n        this.name = name;\r\n\r\n        this._renderer.disableImageProcessing = this._disableImageProcessing;\r\n        this._renderer.renderParticles = this._renderParticles;\r\n        this._renderer.renderSprites = this._renderSprites;\r\n        this._renderer.enableBoundingBoxRendering = this._enableBoundingBoxRendering;\r\n        this._renderer.forceLayerMaskCheck = this._forceLayerMaskCheck;\r\n\r\n        if (!this._externalObjectRenderer) {\r\n            this._renderer.onBeforeRenderingManagerRenderObservable.add(() => {\r\n                if (!this._renderer.options.doNotChangeAspectRatio) {\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n        this.outputDepthTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public override isReady() {\r\n        return this._renderer.isReadyForRendering(this._textureWidth, this._textureHeight);\r\n    }\r\n\r\n    public record(skipCreationOfDisabledPasses = false, additionalExecute?: (context: FrameGraphRenderContext) => void): FrameGraphRenderPass {\r\n        if (this.targetTexture === undefined || this.objectList === undefined) {\r\n            throw new Error(`FrameGraphObjectRendererTask ${this.name}: targetTexture and objectList are required`);\r\n        }\r\n\r\n        // Make sure the renderList / particleSystemList are set when FrameGraphObjectRendererTask.isReady() is called!\r\n        this._renderer.renderList = this.objectList.meshes;\r\n        this._renderer.particleSystemList = this.objectList.particleSystems;\r\n\r\n        const targetTextures = Array.isArray(this.targetTexture) ? this.targetTexture : [this.targetTexture];\r\n\r\n        const outputTextureDescription = this._frameGraph.textureManager.getTextureDescription(targetTextures[0]);\r\n\r\n        let depthEnabled = false;\r\n\r\n        if (this.depthTexture !== undefined) {\r\n            if (this.depthTexture === backbufferDepthStencilTextureHandle && (targetTextures[0] !== backbufferColorTextureHandle || targetTextures.length > 1)) {\r\n                throw new Error(\r\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer color texture is the only color texture allowed when the depth is the back buffer depth/stencil`\r\n                );\r\n            }\r\n            if (this.depthTexture !== backbufferDepthStencilTextureHandle && targetTextures[0] === backbufferColorTextureHandle) {\r\n                throw new Error(\r\n                    `FrameGraphObjectRendererTask ${this.name}: the back buffer depth/stencil texture is the only depth texture allowed when the target is the back buffer color`\r\n                );\r\n            }\r\n\r\n            const depthTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.depthTexture);\r\n            if (depthTextureDescription.options.samples !== outputTextureDescription.options.samples) {\r\n                throw new Error(`FrameGraphObjectRendererTask ${this.name}: the depth texture and the output texture must have the same number of samples`);\r\n            }\r\n\r\n            depthEnabled = true;\r\n        }\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, targetTextures[0]);\r\n        if (this.depthTexture !== undefined) {\r\n            this._frameGraph.textureManager.resolveDanglingHandle(this.outputDepthTexture, this.depthTexture);\r\n        }\r\n\r\n        this._textureWidth = outputTextureDescription.size.width;\r\n        this._textureHeight = outputTextureDescription.size.height;\r\n\r\n        this._setLightsForShadow();\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.setRenderTarget(targetTextures);\r\n        pass.setRenderTargetDepth(this.depthTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            this._renderer.renderList = this.objectList.meshes;\r\n            this._renderer.particleSystemList = this.objectList.particleSystems;\r\n\r\n            // The cast to \"any\" is to avoid an error in ES6 in case you don't import boundingBoxRenderer\r\n            const boundingBoxRenderer = (this as any).getBoundingBoxRenderer?.() as Nullable<BoundingBoxRenderer>;\r\n\r\n            const currentBoundingBoxMeshList = boundingBoxRenderer && boundingBoxRenderer.renderList.length > 0 ? boundingBoxRenderer.renderList.data.slice() : [];\r\n            if (boundingBoxRenderer) {\r\n                currentBoundingBoxMeshList.length = boundingBoxRenderer.renderList.length;\r\n            }\r\n\r\n            context.setDepthStates(this.depthTest && depthEnabled, this.depthWrite && depthEnabled);\r\n\r\n            const camera = this._renderer.activeCamera;\r\n            if (camera && camera.cameraRigMode !== Constants.RIG_MODE_NONE && !camera._renderingMultiview) {\r\n                for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                    const rigCamera = camera._rigCameras[index];\r\n\r\n                    rigCamera.rigParent = undefined; // for some reasons, ObjectRenderer uses the rigParent viewport if rigParent is defined (we want to use rigCamera.viewport instead)\r\n\r\n                    this._renderer.activeCamera = rigCamera;\r\n\r\n                    context.render(this._renderer, this._textureWidth, this._textureHeight);\r\n\r\n                    rigCamera.rigParent = camera;\r\n                }\r\n                this._renderer.activeCamera = camera;\r\n            } else {\r\n                context.render(this._renderer, this._textureWidth, this._textureHeight);\r\n            }\r\n\r\n            additionalExecute?.(context);\r\n\r\n            if (boundingBoxRenderer) {\r\n                boundingBoxRenderer.renderList.data = currentBoundingBoxMeshList;\r\n                boundingBoxRenderer.renderList.length = currentBoundingBoxMeshList.length;\r\n            }\r\n        });\r\n\r\n        if (!skipCreationOfDisabledPasses) {\r\n            const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n            passDisabled.setRenderTarget(targetTextures);\r\n            passDisabled.setRenderTargetDepth(this.depthTexture);\r\n            passDisabled.setExecuteFunc((_context) => {});\r\n        }\r\n\r\n        return pass;\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this._renderer.onBeforeRenderObservable.remove(this._onBeforeRenderObservable);\r\n        this._renderer.onAfterRenderObservable.remove(this._onAfterRenderObservable);\r\n        if (!this._externalObjectRenderer) {\r\n            this._renderer.dispose();\r\n        }\r\n        super.dispose();\r\n    }\r\n\r\n    protected _setLightsForShadow() {\r\n        const lightsForShadow: Set<Light> = new Set();\r\n        const shadowEnabled: Map<Light, boolean> = new Map();\r\n\r\n        if (this.shadowGenerators) {\r\n            for (const shadowGeneratorTask of this.shadowGenerators) {\r\n                const shadowGenerator = shadowGeneratorTask.shadowGenerator;\r\n                const light = shadowGenerator.getLight();\r\n                if (light.isEnabled() && light.shadowEnabled) {\r\n                    lightsForShadow.add(light);\r\n                    if (FrameGraphCascadedShadowGeneratorTask.IsCascadedShadowGenerator(shadowGeneratorTask)) {\r\n                        light._shadowGenerators!.set(shadowGeneratorTask.camera, shadowGenerator);\r\n                    } else {\r\n                        light._shadowGenerators!.set(null, shadowGenerator);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._renderer.onBeforeRenderObservable.remove(this._onBeforeRenderObservable);\r\n        this._onBeforeRenderObservable = this._renderer.onBeforeRenderObservable.add(() => {\r\n            for (let i = 0; i < this._scene.lights.length; i++) {\r\n                const light = this._scene.lights[i];\r\n                if (!(light as ShadowLight).setShadowProjectionMatrix) {\r\n                    continue; // Ignore lights that cannot cast shadows\r\n                }\r\n                shadowEnabled.set(light, light.shadowEnabled);\r\n                light.shadowEnabled = !this.disableShadows && lightsForShadow.has(light);\r\n            }\r\n        });\r\n\r\n        this._renderer.onAfterRenderObservable.remove(this._onAfterRenderObservable);\r\n        this._onAfterRenderObservable = this._renderer.onAfterRenderObservable.add(() => {\r\n            for (let i = 0; i < this._scene.lights.length; i++) {\r\n                const light = this._scene.lights[i];\r\n                if (!(light as ShadowLight).setShadowProjectionMatrix) {\r\n                    continue; // Ignore lights that cannot cast shadows\r\n                }\r\n                light.shadowEnabled = shadowEnabled.get(light)!;\r\n            }\r\n        });\r\n    }\r\n}\r\n", "import { Effect } from \"../Materials/effect\";\r\nimport { Matrix } from \"../Maths/math.vector\";\r\nimport type { IMatrixLike, IVector3Like } from \"../Maths/math.like\";\r\nimport { InvertMatrixToRef, MultiplyMatricesToRef } from \"../Maths/ThinMaths/thinMath.matrix.functions\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { UniformBuffer } from \"./uniformBuffer\";\r\n\r\nconst TempFinalMat: Matrix = new Matrix();\r\nconst TempMat1: Matrix = new Matrix();\r\nconst TempMat2: Matrix = new Matrix();\r\n\r\nfunction OffsetWorldToRef(offset: IVector3Like, world: DeepImmutable<IMatrixLike>, ref: Matrix): DeepImmutable<IMatrixLike> {\r\n    const refArray = ref.asArray();\r\n    const worldArray = world.asArray();\r\n    for (let i = 0; i < 16; i++) {\r\n        refArray[i] = worldArray[i];\r\n    }\r\n    refArray[12] -= offset.x;\r\n    refArray[13] -= offset.y;\r\n    refArray[14] -= offset.z;\r\n    Matrix.FromArrayToRef(refArray, 0, ref);\r\n    return ref;\r\n}\r\n\r\nfunction OffsetViewToRef(view: DeepImmutable<IMatrixLike>, ref: Matrix): DeepImmutable<IMatrixLike> {\r\n    const refArray = ref.asArray();\r\n    const viewArray = view.asArray();\r\n    for (let i = 0; i < 16; i++) {\r\n        refArray[i] = viewArray[i];\r\n    }\r\n    refArray[12] = 0;\r\n    refArray[13] = 0;\r\n    refArray[14] = 0;\r\n    Matrix.FromArrayToRef(refArray, 0, ref);\r\n    return ref;\r\n}\r\n\r\nfunction OffsetViewProjectionToRef(view: DeepImmutable<IMatrixLike>, projection: DeepImmutable<IMatrixLike>, ref: Matrix): DeepImmutable<IMatrixLike> {\r\n    MultiplyMatricesToRef(OffsetViewToRef(view, ref), projection, ref);\r\n    return ref;\r\n}\r\n\r\nfunction OffsetWorldViewToRef(offset: IVector3Like, worldView: DeepImmutable<IMatrixLike>, view: DeepImmutable<IMatrixLike>, ref: Matrix): DeepImmutable<IMatrixLike> {\r\n    // ( world * view ) * inverse ( view ) = world\r\n    InvertMatrixToRef(view, TempMat1); // TempMat1 = inverseView\r\n    MultiplyMatricesToRef(worldView, TempMat1, TempMat2); // TempMat2 = world, TempMat1 can be reused\r\n\r\n    // ( offsetWorld * offsetView ) = offsetWorldView\r\n    OffsetWorldToRef(offset, TempMat2, TempMat1); // TempMat1 = offsetWorld\r\n    OffsetViewToRef(view, TempMat2); // TempMat2 = offsetView\r\n    MultiplyMatricesToRef(TempMat1, TempMat2, ref);\r\n\r\n    return ref;\r\n}\r\n\r\nfunction OffsetWorldViewProjectionToRef(\r\n    offset: IVector3Like,\r\n    worldViewProjection: DeepImmutable<IMatrixLike>,\r\n    viewProjection: DeepImmutable<IMatrixLike>,\r\n    view: DeepImmutable<IMatrixLike>,\r\n    projection: DeepImmutable<IMatrixLike>,\r\n    ref: IMatrixLike\r\n): DeepImmutable<IMatrixLike> {\r\n    // ( world * view * projection ) * inverse(projection) * inverse(view) = world\r\n    // ( world * view * projection ) * inverse (view * projection) = world\r\n    InvertMatrixToRef(viewProjection, TempMat1); // TempMat1 = inverse (view * projection)\r\n    MultiplyMatricesToRef(worldViewProjection, TempMat1, TempMat2); // TempMat2 = world, TempMat1 can be reused\r\n\r\n    // ( offsetWorld * offsetViewProjection)  = offsetWorldViewProjection\r\n    OffsetWorldToRef(offset, TempMat2, TempMat1); // TempMat1 = offsetWorld\r\n    OffsetViewProjectionToRef(view, projection, TempMat2); // TempMat2 = offsetViewProjection\r\n    MultiplyMatricesToRef(TempMat1, TempMat2, ref);\r\n\r\n    return ref;\r\n}\r\n\r\nfunction GetOffsetMatrix(uniformName: string, mat: IMatrixLike, scene: Scene): IMatrixLike {\r\n    TempFinalMat.updateFlag = mat.updateFlag;\r\n    switch (uniformName) {\r\n        case \"world\":\r\n            return OffsetWorldToRef(scene.floatingOriginOffset, mat, TempFinalMat);\r\n        case \"view\":\r\n            return OffsetViewToRef(mat, TempFinalMat);\r\n        case \"worldView\":\r\n            return OffsetWorldViewToRef(scene.floatingOriginOffset, mat, scene.getViewMatrix(), TempFinalMat);\r\n        case \"viewProjection\":\r\n            return OffsetViewProjectionToRef(scene.getViewMatrix(), scene.getProjectionMatrix(), TempFinalMat);\r\n        case \"worldViewProjection\":\r\n            return OffsetWorldViewProjectionToRef(scene.floatingOriginOffset, mat, scene.getTransformMatrix(), scene.getViewMatrix(), scene.getProjectionMatrix(), TempFinalMat);\r\n        default:\r\n            return mat;\r\n    }\r\n}\r\n\r\n// ---- Overriding the prototypes of effect and uniformBuffer's setMatrix functions ----\r\nconst UniformBufferInternal = UniformBuffer as any;\r\nconst EffectInternal = Effect as any;\r\nconst OriginalUpdateMatrixForUniform = UniformBufferInternal.prototype._updateMatrixForUniform;\r\nconst OriginalSetMatrix = Effect.prototype.setMatrix;\r\n\r\nexport function ResetMatrixFunctions() {\r\n    Effect.prototype.setMatrix = OriginalSetMatrix;\r\n    EffectInternal._setMatrixOverride = undefined;\r\n    UniformBufferInternal.prototype._updateMatrixForUniform = OriginalUpdateMatrixForUniform;\r\n    UniformBufferInternal.prototype._updateMatrixForUniformOverride = undefined;\r\n}\r\n\r\nexport function OverrideMatrixFunctions(scene: Scene) {\r\n    EffectInternal.prototype._setMatrixOverride = Effect.prototype.setMatrix;\r\n    EffectInternal.prototype.setMatrix = function (uniformName: string, matrix: IMatrixLike) {\r\n        this._setMatrixOverride(uniformName, GetOffsetMatrix(uniformName, matrix, scene));\r\n        return this;\r\n    };\r\n    UniformBufferInternal.prototype._updateMatrixForUniformOverride = UniformBufferInternal.prototype._updateMatrixForUniform;\r\n    UniformBufferInternal.prototype._updateMatrixForUniform = function (uniformName: string, matrix: IMatrixLike) {\r\n        this._updateMatrixForUniformOverride(uniformName, GetOffsetMatrix(uniformName, matrix, scene));\r\n    };\r\n}\r\n", "/** @internal */\r\nexport class _ImportHelper {\r\n    /** @internal */\r\n    public static _IsPickingAvailable = false;\r\n}\r\n", "import type { EventState, Observable, Observer } from \"../Misc/observable\";\r\nimport { PointerInfoPre, PointerInfo, PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { Nullable } from \"../types\";\r\nimport { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport { Vector2, Matrix } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { ActionEvent } from \"../Actions/actionEvent\";\r\nimport { KeyboardEventTypes, KeyboardInfoPre, KeyboardInfo } from \"../Events/keyboardEvents\";\r\nimport { DeviceType, PointerInput } from \"../DeviceInput/InputDevices/deviceEnums\";\r\nimport type { IKeyboardEvent, IMouseEvent, IPointerEvent } from \"../Events/deviceInputEvents\";\r\nimport { DeviceSourceManager } from \"../DeviceInput/InputDevices/deviceSourceManager\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport { _ImportHelper } from \"core/import.helper\";\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _ClickInfo {\r\n    private _singleClick = false;\r\n    private _doubleClick = false;\r\n    private _hasSwiped = false;\r\n    private _ignore = false;\r\n\r\n    public get singleClick(): boolean {\r\n        return this._singleClick;\r\n    }\r\n    public get doubleClick(): boolean {\r\n        return this._doubleClick;\r\n    }\r\n    public get hasSwiped(): boolean {\r\n        return this._hasSwiped;\r\n    }\r\n    public get ignore(): boolean {\r\n        return this._ignore;\r\n    }\r\n\r\n    public set singleClick(b: boolean) {\r\n        this._singleClick = b;\r\n    }\r\n    public set doubleClick(b: boolean) {\r\n        this._doubleClick = b;\r\n    }\r\n    public set hasSwiped(b: boolean) {\r\n        this._hasSwiped = b;\r\n    }\r\n    public set ignore(b: boolean) {\r\n        this._ignore = b;\r\n    }\r\n}\r\n\r\n/** @internal */\r\ninterface _IClickEvent {\r\n    clickInfo: _ClickInfo;\r\n    evt: IPointerEvent;\r\n    timeoutId: number;\r\n}\r\n\r\n/**\r\n * Class used to manage all inputs for the scene.\r\n */\r\nexport class InputManager {\r\n    /** The distance in pixel that you have to move to prevent some events */\r\n    public static DragMovementThreshold = 10; // in pixels\r\n    /** Time in milliseconds to wait to raise long press events if button is still pressed */\r\n    public static LongPressDelay = 500; // in milliseconds\r\n    /** Time in milliseconds with two consecutive clicks will be considered as a double click */\r\n    public static DoubleClickDelay = 300; // in milliseconds\r\n    /**\r\n     * This flag will modify the behavior so that, when true, a click will happen if and only if\r\n     * another click DOES NOT happen within the DoubleClickDelay time frame.  If another click does\r\n     * happen within that time frame, the first click will not fire an event and and a double click will occur.\r\n     */\r\n    public static ExclusiveDoubleClickMode = false;\r\n\r\n    /** This is a defensive check to not allow control attachment prior to an already active one. If already attached, previous control is unattached before attaching the new one. */\r\n    private _alreadyAttached = false;\r\n    private _alreadyAttachedTo: Nullable<HTMLElement>;\r\n\r\n    // Pointers\r\n    private _onPointerMove: (evt: IMouseEvent) => void;\r\n    private _onPointerDown: (evt: IPointerEvent) => void;\r\n    private _onPointerUp: (evt: IPointerEvent) => void;\r\n\r\n    private _initClickEvent: (\r\n        obs1: Observable<PointerInfoPre>,\r\n        obs2: Observable<PointerInfo>,\r\n        evt: IPointerEvent,\r\n        cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n    ) => void;\r\n    private _initActionManager: (act: Nullable<AbstractActionManager>, clickInfo: _ClickInfo) => Nullable<AbstractActionManager>;\r\n    private _delayedSimpleClick: (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => void;\r\n    private _meshPickProceed = false;\r\n\r\n    private _previousButtonPressed: number;\r\n    private _currentPickResult: Nullable<PickingInfo> = null;\r\n    private _previousPickResult: Nullable<PickingInfo> = null;\r\n\r\n    private _activePointerIds: Array<number> = new Array<number>();\r\n    /** Tracks the count of used slots in _activePointerIds for perf */\r\n    private _activePointerIdsCount: number = 0;\r\n\r\n    private _doubleClickOccured = false;\r\n    private _isSwiping: boolean = false;\r\n    private _swipeButtonPressed: number = -1;\r\n    private _skipPointerTap: boolean = false;\r\n    private _isMultiTouchGesture: boolean = false;\r\n\r\n    private _pointerOverMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pickedDownMesh: Nullable<AbstractMesh>;\r\n    private _pickedUpMesh: Nullable<AbstractMesh>;\r\n\r\n    private _pointerX: number = 0;\r\n    private _pointerY: number = 0;\r\n    private _unTranslatedPointerX: number;\r\n    private _unTranslatedPointerY: number;\r\n    private _startingPointerPosition = new Vector2(0, 0);\r\n    private _previousStartingPointerPosition = new Vector2(0, 0);\r\n    private _startingPointerTime = 0;\r\n    private _previousStartingPointerTime = 0;\r\n    private _pointerCaptures: { [pointerId: number]: boolean } = {};\r\n    private _meshUnderPointerId: { [pointerId: number]: Nullable<AbstractMesh> } = {};\r\n    private _movePointerInfo: Nullable<PointerInfo> = null;\r\n    private _cameraObserverCount = 0;\r\n    private _delayedClicks: Array<Nullable<_IClickEvent>> = [null, null, null, null, null];\r\n\r\n    // Keyboard\r\n    private _onKeyDown: (evt: IKeyboardEvent) => void;\r\n    private _onKeyUp: (evt: IKeyboardEvent) => void;\r\n\r\n    private _scene: Scene;\r\n    private _deviceSourceManager: Nullable<DeviceSourceManager> = null;\r\n\r\n    // origin MouseEvent\r\n    _originMouseEvent: IMouseEvent;\r\n    /**\r\n     * Creates a new InputManager\r\n     * @param scene - defines the hosting scene\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh that is currently under the pointer\r\n     * @returns Mesh that the pointer is pointer is hovering over\r\n     */\r\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\r\n        if (this._movePointerInfo) {\r\n            // Because _pointerOverMesh is populated as part of _pickMove, we need to force a pick to update it.\r\n            // Calling _pickMove calls _setCursorAndPointerOverMesh which calls setPointerOverMesh\r\n            this._movePointerInfo._generatePickInfo();\r\n            // Once we have what we need, we can clear _movePointerInfo because we don't need it anymore\r\n            this._movePointerInfo = null;\r\n        }\r\n        return this._pointerOverMesh;\r\n    }\r\n\r\n    /**\r\n     * When using more than one pointer (for example in XR) you can get the mesh under the specific pointer\r\n     * @param pointerId - the pointer id to use\r\n     * @returns The mesh under this pointer id or null if not found\r\n     */\r\n    public getMeshUnderPointerByPointerId(pointerId: number): Nullable<AbstractMesh> {\r\n        return this._meshUnderPointerId[pointerId] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the pointer coordinates in 2D without any translation (ie. straight out of the pointer event)\r\n     * @returns Vector with X/Y values directly from pointer event\r\n     */\r\n    public get unTranslatedPointer(): Vector2 {\r\n        return new Vector2(this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen X position of the pointer\r\n     * @returns Translated X with respect to screen\r\n     */\r\n    public get pointerX(): number {\r\n        return this._pointerX;\r\n    }\r\n\r\n    public set pointerX(value: number) {\r\n        this._pointerX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen Y position of the pointer\r\n     * @returns Translated Y with respect to screen\r\n     */\r\n    public get pointerY(): number {\r\n        return this._pointerY;\r\n    }\r\n\r\n    public set pointerY(value: number) {\r\n        this._pointerY = value;\r\n    }\r\n\r\n    private _updatePointerPosition(evt: IPointerEvent): void {\r\n        const canvasRect = this._scene.getEngine().getInputElementClientRect();\r\n\r\n        if (!canvasRect) {\r\n            return;\r\n        }\r\n\r\n        this._pointerX = evt.clientX - canvasRect.left;\r\n        this._pointerY = evt.clientY - canvasRect.top;\r\n\r\n        this._unTranslatedPointerX = this._pointerX;\r\n        this._unTranslatedPointerY = this._pointerY;\r\n    }\r\n\r\n    private _processPointerMove(pickResult: Nullable<PickingInfo>, evt: IPointerEvent) {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (canvas) {\r\n            canvas.tabIndex = engine.canvasTabIndex;\r\n\r\n            // Restore pointer\r\n            if (!scene.doNotHandleCursors) {\r\n                canvas.style.cursor = scene.defaultCursor;\r\n            }\r\n        }\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, evt, scene);\r\n\r\n        for (const step of scene._pointerMoveStage) {\r\n            // If _pointerMoveState is defined, we have an active spriteManager and can't use Lazy Picking\r\n            // Therefore, we need to force a pick to update the pickResult\r\n            pickResult = pickResult || this._pickMove(evt);\r\n            const isMeshPicked = pickResult?.pickedMesh ? true : false;\r\n            pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, isMeshPicked, canvas);\r\n        }\r\n\r\n        const type = evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE;\r\n\r\n        if (scene.onPointerMove) {\r\n            // Because of lazy picking, we need to force a pick to update the pickResult\r\n            pickResult = pickResult || this._pickMove(evt);\r\n            scene.onPointerMove(evt, pickResult, type);\r\n        }\r\n\r\n        let pointerInfo: PointerInfo;\r\n        if (pickResult) {\r\n            pointerInfo = new PointerInfo(type, evt, pickResult);\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n        } else {\r\n            pointerInfo = new PointerInfo(type, evt, null, this);\r\n            this._movePointerInfo = pointerInfo;\r\n        }\r\n\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            scene.onPointerObservable.notifyObservers(pointerInfo, type);\r\n        }\r\n    }\r\n\r\n    // Pointers handling\r\n    /** @internal */\r\n    public _setRayOnPointerInfo(pickInfo: Nullable<PickingInfo>, event: IMouseEvent) {\r\n        const scene = this._scene;\r\n        if (pickInfo && _ImportHelper._IsPickingAvailable) {\r\n            if (!pickInfo.ray) {\r\n                pickInfo.ray = scene.createPickingRay(event.offsetX, event.offsetY, Matrix.Identity(), scene.activeCamera);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _addCameraPointerObserver(observer: (p: PointerInfo, s: EventState) => void, mask?: number): Nullable<Observer<PointerInfo>> {\r\n        this._cameraObserverCount++;\r\n        return this._scene.onPointerObservable.add(observer, mask);\r\n    }\r\n\r\n    /** @internal */\r\n    public _removeCameraPointerObserver(observer: Observer<PointerInfo>): boolean {\r\n        this._cameraObserverCount--;\r\n        return this._scene.onPointerObservable.remove(observer);\r\n    }\r\n\r\n    private _checkForPicking(): boolean {\r\n        return !!(this._scene.onPointerObservable.observers.length > this._cameraObserverCount || this._scene.onPointerPick);\r\n    }\r\n\r\n    private _checkPrePointerObservable(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, type: number) {\r\n        const scene = this._scene;\r\n        const pi = new PointerInfoPre(type, evt, this._unTranslatedPointerX, this._unTranslatedPointerY);\r\n        if (pickResult) {\r\n            pi.originalPickingInfo = pickResult;\r\n            pi.ray = pickResult.ray;\r\n            if (evt.pointerType === \"xr-near\" && pickResult.originMesh) {\r\n                pi.nearInteractionPickingInfo = pickResult;\r\n            }\r\n        }\r\n\r\n        scene.onPrePointerObservable.notifyObservers(pi, type);\r\n        if (pi.skipOnPointerObservable) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _pickMove(evt: IPointerEvent): PickingInfo {\r\n        const scene = this._scene;\r\n        const pickResult = scene.pick(\r\n            this._unTranslatedPointerX,\r\n            this._unTranslatedPointerY,\r\n            scene.pointerMovePredicate,\r\n            scene.pointerMoveFastCheck,\r\n            scene.cameraToUseForPointers,\r\n            scene.pointerMoveTrianglePredicate\r\n        );\r\n\r\n        this._setCursorAndPointerOverMesh(pickResult, evt, scene);\r\n\r\n        return pickResult;\r\n    }\r\n\r\n    private _setCursorAndPointerOverMesh(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, scene: Scene) {\r\n        const engine = scene.getEngine();\r\n        const canvas = engine.getInputElement();\r\n\r\n        if (pickResult?.pickedMesh) {\r\n            this.setPointerOverMesh(pickResult.pickedMesh, evt.pointerId, pickResult, evt);\r\n\r\n            if (!scene.doNotHandleCursors && canvas && this._pointerOverMesh) {\r\n                const actionManager = this._pointerOverMesh._getActionManagerForTrigger();\r\n                if (actionManager && actionManager.hasPointerTriggers) {\r\n                    canvas.style.cursor = actionManager.hoverCursor || scene.hoverCursor;\r\n                }\r\n            }\r\n        } else {\r\n            this.setPointerOverMesh(null, evt.pointerId, pickResult, evt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer move on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointermove\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERMOVE)) {\r\n            return;\r\n        }\r\n        this._processPointerMove(pickResult, evt);\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer down on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     */\r\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): void {\r\n        const evt = new PointerEvent(\"pointerdown\", pointerEventInit);\r\n        evt.inputIndex = evt.button + 2;\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERDOWN)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerDown(pickResult, evt);\r\n    }\r\n\r\n    private _processPointerDown(pickResult: Nullable<PickingInfo>, evt: IPointerEvent): void {\r\n        const scene = this._scene;\r\n        if (pickResult?.pickedMesh) {\r\n            this._pickedDownMesh = pickResult.pickedMesh;\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager) {\r\n                if (actionManager.hasPickTriggers) {\r\n                    actionManager.processTrigger(\r\n                        Constants.ACTION_OnPickDownTrigger,\r\n                        new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                    );\r\n                    switch (evt.button) {\r\n                        case 0:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnLeftPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                        case 1:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnCenterPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                        case 2:\r\n                            actionManager.processTrigger(\r\n                                Constants.ACTION_OnRightPickTrigger,\r\n                                new ActionEvent(pickResult.pickedMesh, scene.pointerX, scene.pointerY, pickResult.pickedMesh, evt, pickResult)\r\n                            );\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                if (actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger)) {\r\n                    window.setTimeout(() => {\r\n                        const pickResult = scene.pick(\r\n                            this._unTranslatedPointerX,\r\n                            this._unTranslatedPointerY,\r\n                            (mesh: AbstractMesh): boolean =>\r\n                                <boolean>(\r\n                                    (mesh.isPickable &&\r\n                                        mesh.isVisible &&\r\n                                        mesh.isReady() &&\r\n                                        mesh.actionManager &&\r\n                                        mesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnLongPressTrigger) &&\r\n                                        mesh === this._pickedDownMesh)\r\n                                ),\r\n                            false,\r\n                            scene.cameraToUseForPointers\r\n                        );\r\n\r\n                        if (pickResult?.pickedMesh && actionManager) {\r\n                            if (this._activePointerIdsCount !== 0 && Date.now() - this._startingPointerTime > InputManager.LongPressDelay && !this._isPointerSwiping()) {\r\n                                this._startingPointerTime = 0;\r\n                                actionManager.processTrigger(Constants.ACTION_OnLongPressTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt));\r\n                            }\r\n                        }\r\n                    }, InputManager.LongPressDelay);\r\n                }\r\n            }\r\n        } else {\r\n            for (const step of scene._pointerDownStage) {\r\n                pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, false);\r\n            }\r\n        }\r\n\r\n        let pointerInfo: PointerInfo;\r\n        const type = PointerEventTypes.POINTERDOWN;\r\n\r\n        if (pickResult) {\r\n            if (scene.onPointerDown) {\r\n                scene.onPointerDown(evt, pickResult, type);\r\n            }\r\n\r\n            pointerInfo = new PointerInfo(type, evt, pickResult);\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n        } else {\r\n            pointerInfo = new PointerInfo(type, evt, null, this);\r\n        }\r\n\r\n        if (scene.onPointerObservable.hasObservers()) {\r\n            scene.onPointerObservable.notifyObservers(pointerInfo, type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @internals Boolean if delta for pointer exceeds drag movement threshold\r\n     */\r\n    public _isPointerSwiping(): boolean {\r\n        return this._isSwiping;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer up on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult - pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit - pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @param doubleTap - indicates that the pointer up event should be considered as part of a double click (false by default)\r\n     */\r\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): void {\r\n        const evt = new PointerEvent(\"pointerup\", pointerEventInit);\r\n        evt.inputIndex = PointerInput.Move;\r\n        const clickInfo = new _ClickInfo();\r\n\r\n        if (doubleTap) {\r\n            clickInfo.doubleClick = true;\r\n        } else {\r\n            clickInfo.singleClick = true;\r\n        }\r\n\r\n        if (this._checkPrePointerObservable(pickResult, evt, PointerEventTypes.POINTERUP)) {\r\n            return;\r\n        }\r\n\r\n        this._processPointerUp(pickResult, evt, clickInfo);\r\n    }\r\n\r\n    private _processPointerUp(pickResult: Nullable<PickingInfo>, evt: IPointerEvent, clickInfo: _ClickInfo): void {\r\n        const scene = this._scene;\r\n        if (pickResult?.pickedMesh) {\r\n            this._pickedUpMesh = pickResult.pickedMesh;\r\n            if (this._pickedDownMesh === this._pickedUpMesh) {\r\n                if (scene.onPointerPick) {\r\n                    scene.onPointerPick(evt, pickResult);\r\n                }\r\n                if (clickInfo.singleClick && !clickInfo.ignore && scene.onPointerObservable.observers.length > this._cameraObserverCount) {\r\n                    const type = PointerEventTypes.POINTERPICK;\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    this._setRayOnPointerInfo(pickResult, evt);\r\n                    scene.onPointerObservable.notifyObservers(pi, type);\r\n                }\r\n            }\r\n            const actionManager = pickResult.pickedMesh._getActionManagerForTrigger();\r\n            if (actionManager && !clickInfo.ignore) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPickUpTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n\r\n                if (!clickInfo.hasSwiped && clickInfo.singleClick) {\r\n                    actionManager.processTrigger(Constants.ACTION_OnPickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n\r\n                const doubleClickActionManager = pickResult.pickedMesh._getActionManagerForTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                if (clickInfo.doubleClick && doubleClickActionManager) {\r\n                    doubleClickActionManager.processTrigger(Constants.ACTION_OnDoublePickTrigger, ActionEvent.CreateNew(pickResult.pickedMesh, evt, pickResult));\r\n                }\r\n            }\r\n        } else {\r\n            if (!clickInfo.ignore) {\r\n                for (const step of scene._pointerUpStage) {\r\n                    pickResult = step.action(this._unTranslatedPointerX, this._unTranslatedPointerY, pickResult, evt, clickInfo.doubleClick);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._pickedDownMesh && this._pickedDownMesh !== this._pickedUpMesh) {\r\n            const pickedDownActionManager = this._pickedDownMesh._getActionManagerForTrigger(Constants.ACTION_OnPickOutTrigger);\r\n            if (pickedDownActionManager) {\r\n                pickedDownActionManager.processTrigger(Constants.ACTION_OnPickOutTrigger, ActionEvent.CreateNew(this._pickedDownMesh, evt));\r\n            }\r\n        }\r\n\r\n        if (!clickInfo.ignore) {\r\n            const pi = new PointerInfo(PointerEventTypes.POINTERUP, evt, pickResult);\r\n            // Set ray on picking info.  Note that this info will also be reused for the tap notification.\r\n            this._setRayOnPointerInfo(pickResult, evt);\r\n            scene.onPointerObservable.notifyObservers(pi, PointerEventTypes.POINTERUP);\r\n\r\n            if (scene.onPointerUp) {\r\n                scene.onPointerUp(evt, pickResult, PointerEventTypes.POINTERUP);\r\n            }\r\n\r\n            if (!clickInfo.hasSwiped && !this._skipPointerTap && !this._isMultiTouchGesture) {\r\n                let type = 0;\r\n                if (clickInfo.singleClick) {\r\n                    type = PointerEventTypes.POINTERTAP;\r\n                } else if (clickInfo.doubleClick) {\r\n                    type = PointerEventTypes.POINTERDOUBLETAP;\r\n                }\r\n\r\n                if (type) {\r\n                    const pi = new PointerInfo(type, evt, pickResult);\r\n                    if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                        scene.onPointerObservable.notifyObservers(pi, type);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\r\n     * @param pointerId - defines the pointer id to use in a multi-touch scenario (0 by default)\r\n     * @returns true if the pointer was captured\r\n     */\r\n    public isPointerCaptured(pointerId = 0): boolean {\r\n        return this._pointerCaptures[pointerId];\r\n    }\r\n\r\n    /**\r\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\r\n     * @param attachUp - defines if you want to attach events to pointerup\r\n     * @param attachDown - defines if you want to attach events to pointerdown\r\n     * @param attachMove - defines if you want to attach events to pointermove\r\n     * @param elementToAttachTo - defines the target DOM element to attach to (will use the canvas by default)\r\n     */\r\n    public attachControl(attachUp = true, attachDown = true, attachMove = true, elementToAttachTo: Nullable<HTMLElement> = null): void {\r\n        const scene = this._scene;\r\n        const engine = scene.getEngine();\r\n\r\n        if (!elementToAttachTo) {\r\n            elementToAttachTo = engine.getInputElement();\r\n        }\r\n\r\n        if (this._alreadyAttached) {\r\n            this.detachControl();\r\n        }\r\n\r\n        if (elementToAttachTo) {\r\n            this._alreadyAttachedTo = elementToAttachTo;\r\n        }\r\n        this._deviceSourceManager = new DeviceSourceManager(engine);\r\n\r\n        // Because this is only called from _initClickEvent, which is called in _onPointerUp, we'll use the pointerUpPredicate for the pick call\r\n        this._initActionManager = (act: Nullable<AbstractActionManager>): Nullable<AbstractActionManager> => {\r\n            if (!this._meshPickProceed) {\r\n                const pickResult =\r\n                    scene.skipPointerUpPicking || (scene._registeredActions === 0 && !this._checkForPicking() && !scene.onPointerUp)\r\n                        ? null\r\n                        : scene.pick(\r\n                              this._unTranslatedPointerX,\r\n                              this._unTranslatedPointerY,\r\n                              scene.pointerUpPredicate,\r\n                              scene.pointerUpFastCheck,\r\n                              scene.cameraToUseForPointers,\r\n                              scene.pointerUpTrianglePredicate\r\n                          );\r\n                this._currentPickResult = pickResult;\r\n                if (pickResult) {\r\n                    act = pickResult.hit && pickResult.pickedMesh ? pickResult.pickedMesh._getActionManagerForTrigger() : null;\r\n                }\r\n                this._meshPickProceed = true;\r\n            }\r\n            return act;\r\n        };\r\n\r\n        this._delayedSimpleClick = (btn: number, clickInfo: _ClickInfo, cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void) => {\r\n            // double click delay is over and that no double click has been raised since, or the 2 consecutive keys pressed are different\r\n            if ((Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay && !this._doubleClickOccured) || btn !== this._previousButtonPressed) {\r\n                this._doubleClickOccured = false;\r\n                clickInfo.singleClick = true;\r\n                clickInfo.ignore = false;\r\n\r\n                // If we have a delayed click, we need to resolve the TAP event\r\n                if (this._delayedClicks[btn]) {\r\n                    const evt = this._delayedClicks[btn].evt;\r\n                    const type = PointerEventTypes.POINTERTAP;\r\n                    const pi = new PointerInfo(type, evt, this._currentPickResult);\r\n                    if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                        scene.onPointerObservable.notifyObservers(pi, type);\r\n                    }\r\n\r\n                    // Clear the delayed click\r\n                    this._delayedClicks[btn] = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        this._initClickEvent = (\r\n            obs1: Observable<PointerInfoPre>,\r\n            obs2: Observable<PointerInfo>,\r\n            evt: IPointerEvent,\r\n            cb: (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => void\r\n        ): void => {\r\n            const clickInfo = new _ClickInfo();\r\n            this._currentPickResult = null;\r\n            let act: Nullable<AbstractActionManager> = null;\r\n\r\n            let checkPicking =\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERPICK) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERTAP) ||\r\n                obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) ||\r\n                obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n            if (!checkPicking && AbstractActionManager) {\r\n                act = this._initActionManager(act, clickInfo);\r\n                if (act) {\r\n                    checkPicking = act.hasPickTriggers;\r\n                }\r\n            }\r\n\r\n            let needToIgnoreNext = false;\r\n\r\n            // Never pick if this is a multi-touch gesture (e.g. pinch)\r\n            checkPicking = checkPicking && !this._isMultiTouchGesture;\r\n\r\n            if (checkPicking) {\r\n                const btn = evt.button;\r\n                clickInfo.hasSwiped = this._isPointerSwiping();\r\n\r\n                if (!clickInfo.hasSwiped) {\r\n                    let checkSingleClickImmediately = !InputManager.ExclusiveDoubleClickMode;\r\n\r\n                    if (!checkSingleClickImmediately) {\r\n                        checkSingleClickImmediately = !obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) && !obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n\r\n                        if (checkSingleClickImmediately && !AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                            act = this._initActionManager(act, clickInfo);\r\n                            if (act) {\r\n                                checkSingleClickImmediately = !act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (checkSingleClickImmediately) {\r\n                        // single click detected if double click delay is over or two different successive keys pressed without exclusive double click or no double click required\r\n                        if (Date.now() - this._previousStartingPointerTime > InputManager.DoubleClickDelay || btn !== this._previousButtonPressed) {\r\n                            clickInfo.singleClick = true;\r\n                            cb(clickInfo, this._currentPickResult);\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                    }\r\n                    // at least one double click is required to be check and exclusive double click is enabled\r\n                    else {\r\n                        // Queue up a delayed click, just in case this isn't a double click\r\n                        // It should be noted that while this delayed event happens\r\n                        // because of user input, it shouldn't be considered as a direct,\r\n                        // timing-dependent result of that input.  It's meant to just fire the TAP event\r\n                        const delayedClick = {\r\n                            evt: evt,\r\n                            clickInfo: clickInfo,\r\n                            timeoutId: window.setTimeout(this._delayedSimpleClick.bind(this, btn, clickInfo, cb), InputManager.DoubleClickDelay),\r\n                        };\r\n\r\n                        this._delayedClicks[btn] = delayedClick;\r\n                    }\r\n\r\n                    let checkDoubleClick = obs1.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP) || obs2.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP);\r\n                    if (!checkDoubleClick && AbstractActionManager.HasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger)) {\r\n                        act = this._initActionManager(act, clickInfo);\r\n                        if (act) {\r\n                            checkDoubleClick = act.hasSpecificTrigger(Constants.ACTION_OnDoublePickTrigger);\r\n                        }\r\n                    }\r\n                    if (checkDoubleClick) {\r\n                        // two successive keys pressed are equal, double click delay is not over and double click has not just occurred\r\n                        if (btn === this._previousButtonPressed && Date.now() - this._previousStartingPointerTime < InputManager.DoubleClickDelay && !this._doubleClickOccured) {\r\n                            // pointer has not moved for 2 clicks, it's a double click\r\n                            if (!clickInfo.hasSwiped && !this._isPointerSwiping()) {\r\n                                this._previousStartingPointerTime = 0;\r\n                                this._doubleClickOccured = true;\r\n                                clickInfo.doubleClick = true;\r\n                                clickInfo.ignore = false;\r\n                                // If we have a pending click, we need to cancel it\r\n                                if (InputManager.ExclusiveDoubleClickMode && this._delayedClicks[btn]) {\r\n                                    clearTimeout(this._delayedClicks[btn]?.timeoutId);\r\n                                    this._delayedClicks[btn] = null;\r\n                                }\r\n\r\n                                cb(clickInfo, this._currentPickResult);\r\n                            }\r\n                            // if the two successive clicks are too far, it's just two simple clicks\r\n                            else {\r\n                                this._doubleClickOccured = false;\r\n                                this._previousStartingPointerTime = this._startingPointerTime;\r\n                                this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                                this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                                this._previousButtonPressed = btn;\r\n                                if (InputManager.ExclusiveDoubleClickMode) {\r\n                                    // If we have a delayed click, we need to cancel it\r\n                                    if (this._delayedClicks[btn]) {\r\n                                        clearTimeout(this._delayedClicks[btn]?.timeoutId);\r\n                                        this._delayedClicks[btn] = null;\r\n                                    }\r\n                                    cb(clickInfo, this._previousPickResult);\r\n                                } else {\r\n                                    cb(clickInfo, this._currentPickResult);\r\n                                }\r\n                            }\r\n                            needToIgnoreNext = true;\r\n                        }\r\n                        // just the first click of the double has been raised\r\n                        else {\r\n                            this._doubleClickOccured = false;\r\n                            this._previousStartingPointerTime = this._startingPointerTime;\r\n                            this._previousStartingPointerPosition.x = this._startingPointerPosition.x;\r\n                            this._previousStartingPointerPosition.y = this._startingPointerPosition.y;\r\n                            this._previousButtonPressed = btn!;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Even if ExclusiveDoubleClickMode is true, we need to always handle\r\n            // up events at time of execution, unless we're explicitly ignoring them.\r\n            if (!needToIgnoreNext) {\r\n                cb(clickInfo, this._currentPickResult);\r\n            }\r\n        };\r\n\r\n        this._onPointerMove = (evt: IMouseEvent) => {\r\n            this._updatePointerPosition(evt as IPointerEvent);\r\n\r\n            // Check if pointer leaves DragMovementThreshold range to determine if swipe is occurring\r\n            if (!this._isSwiping && this._swipeButtonPressed !== -1) {\r\n                this._isSwiping =\r\n                    Math.abs(this._startingPointerPosition.x - this._pointerX) > InputManager.DragMovementThreshold ||\r\n                    Math.abs(this._startingPointerPosition.y - this._pointerY) > InputManager.DragMovementThreshold;\r\n            }\r\n\r\n            // Because there's a race condition between pointermove and pointerlockchange events, we need to\r\n            // verify that the pointer is still locked after each pointermove event.\r\n            if (engine.isPointerLock) {\r\n                engine._verifyPointerLock();\r\n            }\r\n\r\n            // PreObservable support\r\n            if (\r\n                this._checkPrePointerObservable(\r\n                    null,\r\n                    evt as IPointerEvent,\r\n                    evt.inputIndex >= PointerInput.MouseWheelX && evt.inputIndex <= PointerInput.MouseWheelZ ? PointerEventTypes.POINTERWHEEL : PointerEventTypes.POINTERMOVE\r\n                )\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            if (scene.skipPointerMovePicking) {\r\n                this._processPointerMove(new PickingInfo(), evt as IPointerEvent);\r\n                return;\r\n            }\r\n\r\n            if (!scene.pointerMovePredicate) {\r\n                scene.pointerMovePredicate = (mesh: AbstractMesh): boolean =>\r\n                    mesh.isPickable &&\r\n                    mesh.isVisible &&\r\n                    mesh.isReady() &&\r\n                    mesh.isEnabled() &&\r\n                    (mesh.enablePointerMoveEvents || scene.constantlyUpdateMeshUnderPointer || mesh._getActionManagerForTrigger() !== null) &&\r\n                    (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0);\r\n            }\r\n\r\n            const pickResult = scene._registeredActions > 0 || scene.constantlyUpdateMeshUnderPointer ? this._pickMove(evt as IPointerEvent) : null;\r\n            this._processPointerMove(pickResult, evt as IPointerEvent);\r\n        };\r\n\r\n        this._onPointerDown = (evt: IPointerEvent) => {\r\n            const freeIndex = this._activePointerIds.indexOf(-1);\r\n            if (freeIndex === -1) {\r\n                this._activePointerIds.push(evt.pointerId);\r\n            } else {\r\n                this._activePointerIds[freeIndex] = evt.pointerId;\r\n            }\r\n            this._activePointerIdsCount++;\r\n            this._pickedDownMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            // If ExclusiveDoubleClickMode is true, we need to resolve any pending delayed clicks\r\n            if (InputManager.ExclusiveDoubleClickMode) {\r\n                for (let i = 0; i < this._delayedClicks.length; i++) {\r\n                    if (this._delayedClicks[i]) {\r\n                        // If the button that was pressed is the same as the one that was released,\r\n                        // just clear the timer.  This will be resolved in the up event.\r\n                        if (evt.button === i) {\r\n                            clearTimeout(this._delayedClicks[i]?.timeoutId);\r\n                        } else {\r\n                            // Otherwise, we need to resolve the click\r\n                            const clickInfo = this._delayedClicks[i]!.clickInfo;\r\n                            this._doubleClickOccured = false;\r\n                            clickInfo.singleClick = true;\r\n                            clickInfo.ignore = false;\r\n\r\n                            const prevEvt = this._delayedClicks[i]!.evt;\r\n                            const type = PointerEventTypes.POINTERTAP;\r\n                            const pi = new PointerInfo(type, prevEvt, this._currentPickResult);\r\n                            if (scene.onPointerObservable.hasObservers() && scene.onPointerObservable.hasSpecificMask(type)) {\r\n                                scene.onPointerObservable.notifyObservers(pi, type);\r\n                            }\r\n\r\n                            // Clear the delayed click\r\n                            this._delayedClicks[i] = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (this._swipeButtonPressed === -1) {\r\n                this._swipeButtonPressed = evt.button;\r\n            }\r\n\r\n            if (scene.preventDefaultOnPointerDown && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._startingPointerPosition.x = this._pointerX;\r\n            this._startingPointerPosition.y = this._pointerY;\r\n            this._startingPointerTime = Date.now();\r\n\r\n            // PreObservable support\r\n            if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOWN)) {\r\n                return;\r\n            }\r\n\r\n            if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            this._pointerCaptures[evt.pointerId] = true;\r\n\r\n            if (!scene.pointerDownPredicate) {\r\n                scene.pointerDownPredicate = (mesh: AbstractMesh): boolean => {\r\n                    return (\r\n                        mesh.isPickable &&\r\n                        mesh.isVisible &&\r\n                        mesh.isReady() &&\r\n                        mesh.isEnabled() &&\r\n                        (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                    );\r\n                };\r\n            }\r\n\r\n            // Meshes\r\n            this._pickedDownMesh = null;\r\n            let pickResult;\r\n            if (scene.skipPointerDownPicking || (scene._registeredActions === 0 && !this._checkForPicking() && !scene.onPointerDown)) {\r\n                pickResult = new PickingInfo();\r\n            } else {\r\n                pickResult = scene.pick(\r\n                    this._unTranslatedPointerX,\r\n                    this._unTranslatedPointerY,\r\n                    scene.pointerDownPredicate,\r\n                    scene.pointerDownFastCheck,\r\n                    scene.cameraToUseForPointers,\r\n                    scene.pointerDownTrianglePredicate\r\n                );\r\n            }\r\n\r\n            this._processPointerDown(pickResult, evt);\r\n        };\r\n\r\n        this._onPointerUp = (evt: IPointerEvent) => {\r\n            const pointerIdIndex = this._activePointerIds.indexOf(evt.pointerId);\r\n            if (pointerIdIndex === -1) {\r\n                // We are attaching the pointer up to windows because of a bug in FF\r\n                // If this pointerId is not paired with an _onPointerDown call, ignore it\r\n                return;\r\n            }\r\n\r\n            this._activePointerIds[pointerIdIndex] = -1;\r\n            this._activePointerIdsCount--;\r\n            this._pickedUpMesh = null;\r\n            this._meshPickProceed = false;\r\n\r\n            this._updatePointerPosition(evt);\r\n\r\n            if (scene.preventDefaultOnPointerUp && elementToAttachTo) {\r\n                evt.preventDefault();\r\n                elementToAttachTo.focus();\r\n            }\r\n\r\n            this._initClickEvent(scene.onPrePointerObservable, scene.onPointerObservable, evt, (clickInfo: _ClickInfo, pickResult: Nullable<PickingInfo>) => {\r\n                // PreObservable support\r\n                if (scene.onPrePointerObservable.hasObservers()) {\r\n                    this._skipPointerTap = false;\r\n                    if (!clickInfo.ignore) {\r\n                        if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERUP)) {\r\n                            // If we're skipping the next observable, we need to reset the swipe state before returning\r\n                            if (this._swipeButtonPressed === evt.button) {\r\n                                this._isSwiping = false;\r\n                                this._swipeButtonPressed = -1;\r\n                            }\r\n\r\n                            // If we're going to skip the POINTERUP, we need to reset the pointer capture\r\n                            if (evt.buttons === 0) {\r\n                                this._pointerCaptures[evt.pointerId] = false;\r\n                            }\r\n\r\n                            return;\r\n                        }\r\n                        if (!clickInfo.hasSwiped) {\r\n                            if (clickInfo.singleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERTAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERTAP)) {\r\n                                    this._skipPointerTap = true;\r\n                                }\r\n                            }\r\n                            if (clickInfo.doubleClick && scene.onPrePointerObservable.hasSpecificMask(PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                if (this._checkPrePointerObservable(null, evt, PointerEventTypes.POINTERDOUBLETAP)) {\r\n                                    this._skipPointerTap = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // There should be a pointer captured at this point so if there isn't we should reset and return\r\n                if (!this._pointerCaptures[evt.pointerId]) {\r\n                    if (this._swipeButtonPressed === evt.button) {\r\n                        this._isSwiping = false;\r\n                        this._swipeButtonPressed = -1;\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                // Only release capture if all buttons are released\r\n                if (evt.buttons === 0) {\r\n                    this._pointerCaptures[evt.pointerId] = false;\r\n                }\r\n                if (!scene.cameraToUseForPointers && !scene.activeCamera) {\r\n                    return;\r\n                }\r\n\r\n                if (!scene.pointerUpPredicate) {\r\n                    scene.pointerUpPredicate = (mesh: AbstractMesh): boolean => {\r\n                        return (\r\n                            mesh.isPickable &&\r\n                            mesh.isVisible &&\r\n                            mesh.isReady() &&\r\n                            mesh.isEnabled() &&\r\n                            (!scene.cameraToUseForPointers || (scene.cameraToUseForPointers.layerMask & mesh.layerMask) !== 0)\r\n                        );\r\n                    };\r\n                }\r\n\r\n                // Meshes\r\n                if (!this._meshPickProceed && ((AbstractActionManager && AbstractActionManager.HasTriggers) || this._checkForPicking() || scene.onPointerUp)) {\r\n                    this._initActionManager(null, clickInfo);\r\n                }\r\n                if (!pickResult) {\r\n                    pickResult = this._currentPickResult;\r\n                }\r\n\r\n                this._processPointerUp(pickResult, evt, clickInfo);\r\n\r\n                this._previousPickResult = this._currentPickResult;\r\n\r\n                if (this._swipeButtonPressed === evt.button) {\r\n                    this._isSwiping = false;\r\n                    this._swipeButtonPressed = -1;\r\n                }\r\n            });\r\n        };\r\n\r\n        this._onKeyDown = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYDOWN;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyDownTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        this._onKeyUp = (evt: IKeyboardEvent) => {\r\n            const type = KeyboardEventTypes.KEYUP;\r\n            if (scene.onPreKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfoPre(type, evt);\r\n                scene.onPreKeyboardObservable.notifyObservers(pi, type);\r\n                if (pi.skipOnKeyboardObservable) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (scene.onKeyboardObservable.hasObservers()) {\r\n                const pi = new KeyboardInfo(type, evt);\r\n                scene.onKeyboardObservable.notifyObservers(pi, type);\r\n            }\r\n\r\n            if (scene.actionManager) {\r\n                scene.actionManager.processTrigger(Constants.ACTION_OnKeyUpTrigger, ActionEvent.CreateNewFromScene(scene, evt));\r\n            }\r\n        };\r\n\r\n        // If a device connects that we can handle, wire up the observable\r\n        this._deviceSourceManager.onDeviceConnectedObservable.add((deviceSource) => {\r\n            if (deviceSource.deviceType === DeviceType.Mouse) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    this._originMouseEvent = eventData;\r\n                    if (\r\n                        eventData.inputIndex === PointerInput.LeftClick ||\r\n                        eventData.inputIndex === PointerInput.MiddleClick ||\r\n                        eventData.inputIndex === PointerInput.RightClick ||\r\n                        eventData.inputIndex === PointerInput.BrowserBack ||\r\n                        eventData.inputIndex === PointerInput.BrowserForward\r\n                    ) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                        }\r\n                    } else if (attachMove) {\r\n                        if (eventData.inputIndex === PointerInput.Move) {\r\n                            this._onPointerMove(eventData);\r\n                        } else if (\r\n                            eventData.inputIndex === PointerInput.MouseWheelX ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelY ||\r\n                            eventData.inputIndex === PointerInput.MouseWheelZ\r\n                        ) {\r\n                            this._onPointerMove(eventData);\r\n                        }\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Touch) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.inputIndex === PointerInput.LeftClick) {\r\n                        if (attachDown && deviceSource.getInput(eventData.inputIndex) === 1) {\r\n                            this._onPointerDown(eventData);\r\n                            if (this._activePointerIdsCount > 1) {\r\n                                this._isMultiTouchGesture = true;\r\n                            }\r\n                        } else if (attachUp && deviceSource.getInput(eventData.inputIndex) === 0) {\r\n                            this._onPointerUp(eventData);\r\n                            if (this._activePointerIdsCount === 0) {\r\n                                this._isMultiTouchGesture = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (attachMove && eventData.inputIndex === PointerInput.Move) {\r\n                        this._onPointerMove(eventData);\r\n                    }\r\n                });\r\n            } else if (deviceSource.deviceType === DeviceType.Keyboard) {\r\n                deviceSource.onInputChangedObservable.add((eventData) => {\r\n                    if (eventData.type === \"keydown\") {\r\n                        this._onKeyDown(eventData);\r\n                    } else if (eventData.type === \"keyup\") {\r\n                        this._onKeyUp(eventData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this._alreadyAttached = true;\r\n    }\r\n\r\n    /**\r\n     * Detaches all event handlers\r\n     */\r\n    public detachControl() {\r\n        if (this._alreadyAttached) {\r\n            this._deviceSourceManager!.dispose();\r\n            this._deviceSourceManager = null;\r\n\r\n            // Cursor\r\n            if (this._alreadyAttachedTo && !this._scene.doNotHandleCursors) {\r\n                this._alreadyAttachedTo.style.cursor = this._scene.defaultCursor;\r\n            }\r\n\r\n            this._alreadyAttached = false;\r\n            this._alreadyAttachedTo = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the value of meshUnderPointer for a given pointerId\r\n     * @param mesh - defines the mesh to use\r\n     * @param pointerId - optional pointer id when using more than one pointer. Defaults to 0\r\n     * @param pickResult - optional pickingInfo data used to find mesh\r\n     * @param evt - optional pointer event\r\n     */\r\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId: number = 0, pickResult?: Nullable<PickingInfo>, evt?: IPointerEvent): void {\r\n        if (this._meshUnderPointerId[pointerId] === mesh && (!mesh || !mesh._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting)) {\r\n            return;\r\n        }\r\n\r\n        const underPointerMesh = this._meshUnderPointerId[pointerId];\r\n\r\n        let actionManager: Nullable<AbstractActionManager>;\r\n        if (underPointerMesh) {\r\n            actionManager = underPointerMesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOutTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOutTrigger, new ActionEvent(underPointerMesh, this._pointerX, this._pointerY, mesh, evt, { pointerId }));\r\n            }\r\n        }\r\n\r\n        if (mesh) {\r\n            this._meshUnderPointerId[pointerId] = mesh;\r\n            this._pointerOverMesh = mesh;\r\n\r\n            actionManager = mesh._getActionManagerForTrigger(Constants.ACTION_OnPointerOverTrigger);\r\n            if (actionManager) {\r\n                actionManager.processTrigger(Constants.ACTION_OnPointerOverTrigger, new ActionEvent(mesh, this._pointerX, this._pointerY, mesh, evt, { pointerId, pickResult }));\r\n            }\r\n        } else {\r\n            delete this._meshUnderPointerId[pointerId];\r\n            this._pointerOverMesh = null;\r\n        }\r\n        // if we reached this point, meshUnderPointerId has been updated. We need to notify observers that are registered.\r\n        if (this._scene.onMeshUnderPointerUpdatedObservable.hasObservers()) {\r\n            this._scene.onMeshUnderPointerUpdatedObservable.notifyObservers({\r\n                mesh,\r\n                pointerId,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh under the pointer\r\n     * @returns a Mesh or null if no mesh is under the pointer\r\n     */\r\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\r\n        return this.meshUnderPointer;\r\n    }\r\n\r\n    /**\r\n     * @param mesh - Mesh to invalidate\r\n     * @internal\r\n     */\r\n    public _invalidateMesh(mesh: AbstractMesh) {\r\n        if (this._pointerOverMesh === mesh) {\r\n            this._pointerOverMesh = null;\r\n        }\r\n        if (this._pickedDownMesh === mesh) {\r\n            this._pickedDownMesh = null;\r\n        }\r\n        if (this._pickedUpMesh === mesh) {\r\n            this._pickedUpMesh = null;\r\n        }\r\n        for (const pointerId in this._meshUnderPointerId) {\r\n            if (this._meshUnderPointerId[pointerId] === mesh) {\r\n                delete this._meshUnderPointerId[pointerId];\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * Class used to store configuration data associated with pointer picking\r\n */\r\nexport class PointerPickingConfiguration {\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownPredicate: (Mesh: AbstractMesh) => boolean;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpPredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMovePredicate: (Mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public pointerDownFastCheck = false;\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public pointerUpFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public pointerMoveFastCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\r\n     */\r\n    public skipPointerMovePicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\r\n     */\r\n    public skipPointerDownPicking = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\r\n     */\r\n    public skipPointerUpPicking = false;\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"./types\";\r\nimport { Tools } from \"./Misc/tools\";\r\nimport type { IAnimatable } from \"./Animations/animatable.interface\";\r\nimport { PrecisionDate } from \"./Misc/precisionDate\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport { Observable } from \"./Misc/observable\";\r\nimport type { ISmartArrayLike } from \"./Misc/smartArray\";\r\nimport { SmartArrayNoDuplicate, SmartArray } from \"./Misc/smartArray\";\r\nimport { StringDictionary } from \"./Misc/stringDictionary\";\r\nimport { Tags } from \"./Misc/tags\";\r\nimport type { Vector2, Vector4 } from \"./Maths/math.vector\";\r\nimport { Vector3, Matrix, TmpVectors } from \"./Maths/math.vector\";\r\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport { ImageProcessingConfiguration } from \"./Materials/imageProcessingConfiguration\";\r\nimport { UniformBuffer } from \"./Materials/uniformBuffer\";\r\nimport { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { ICollisionCoordinator } from \"./Collisions/collisionCoordinator\";\r\nimport type { PointerEventTypes, PointerInfoPre, PointerInfo } from \"./Events/pointerEvents\";\r\nimport type { KeyboardInfoPre, KeyboardInfo } from \"./Events/keyboardEvents\";\r\nimport { ActionEvent } from \"./Actions/actionEvent\";\r\nimport { PostProcessManager } from \"./PostProcesses/postProcessManager\";\r\nimport type { IOfflineProvider } from \"./Offline/IOfflineProvider\";\r\nimport { OverrideMatrixFunctions, ResetMatrixFunctions } from \"./Materials/floatingOriginMatrixOverrides\";\r\nimport type { RenderingGroupInfo, IRenderingManagerAutoClearSetup } from \"./Rendering/renderingManager\";\r\nimport { RenderingManager } from \"./Rendering/renderingManager\";\r\nimport type {\r\n    ISceneComponent,\r\n    ISceneSerializableComponent,\r\n    SimpleStageAction,\r\n    RenderTargetsStageAction,\r\n    RenderTargetStageAction,\r\n    MeshStageAction,\r\n    EvaluateSubMeshStageAction,\r\n    PreActiveMeshStageAction,\r\n    CameraStageAction,\r\n    RenderingGroupStageAction,\r\n    RenderingMeshStageAction,\r\n    PointerMoveStageAction,\r\n    PointerUpDownStageAction,\r\n    CameraStageFrameBufferAction,\r\n} from \"./sceneComponent\";\r\nimport { Stage } from \"./sceneComponent\";\r\nimport { Constants } from \"./Engines/constants\";\r\nimport { IsWindowObjectExist } from \"./Misc/domManagement\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport { _WarnImport } from \"./Misc/devTools\";\r\nimport type { WebRequest } from \"./Misc/webRequest\";\r\nimport { InputManager } from \"./Inputs/scene.inputManager\";\r\nimport { PerfCounter } from \"./Misc/perfCounter\";\r\nimport type { IFileRequest } from \"./Misc/fileRequest\";\r\nimport { Color4, Color3 } from \"./Maths/math.color\";\r\nimport type { Plane } from \"./Maths/math.plane\";\r\nimport { Frustum } from \"./Maths/math.frustum\";\r\nimport { UniqueIdGenerator } from \"./Misc/uniqueIdGenerator\";\r\nimport type { LoadFileError, RequestFileError, ReadFileError } from \"./Misc/fileTools\";\r\nimport { ReadFile, RequestFile, LoadFile } from \"./Misc/fileTools\";\r\nimport type { IClipPlanesHolder } from \"./Misc/interfaces/iClipPlanesHolder\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\nimport { LightConstants } from \"./Lights/lightConstants\";\r\nimport { _ObserveArray } from \"./Misc/arrayTools\";\r\nimport type { IAction } from \"./Actions/action\";\r\nimport type { AnimationPropertiesOverride } from \"./Animations/animationPropertiesOverride\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { Bone } from \"./Bones/bone\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { Collider } from \"./Collisions/collider\";\r\nimport type { Ray, MeshPredicate, TrianglePickingPredicate } from \"./Culling/ray.core\";\r\nimport type { Light } from \"./Lights/light\";\r\nimport type { PerformanceViewerCollector } from \"./Misc/PerformanceViewer/performanceViewerCollector\";\r\nimport type { MorphTarget } from \"./Morph/morphTarget\";\r\nimport type { MorphTargetManager } from \"./Morph/morphTargetManager\";\r\nimport type { PostProcess } from \"./PostProcesses/postProcess\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport type { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport type { Geometry } from \"./Meshes/geometry\";\r\nimport type { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { Effect } from \"./Materials/effect\";\r\nimport type { RenderTargetTexture } from \"./Materials/Textures/renderTargetTexture\";\r\nimport type { Mesh } from \"./Meshes/mesh\";\r\nimport type { SubMesh } from \"./Meshes/subMesh\";\r\nimport type { Node } from \"./node\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { Animatable } from \"./Animations/animatable.core\";\r\nimport type { Texture } from \"./Materials/Textures/texture\";\r\nimport { PointerPickingConfiguration } from \"./Inputs/pointerPickingConfiguration\";\r\nimport { Logger } from \"./Misc/logger\";\r\nimport type { AbstractEngine } from \"./Engines/abstractEngine\";\r\nimport { RegisterClass } from \"./Misc/typeStore\";\r\nimport type { FrameGraph } from \"./FrameGraph/frameGraph\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\n\r\nimport type { EffectLayer } from \"./Layers/effectLayer\";\r\nimport type { Sound } from \"./Audio/sound\";\r\nimport type { Layer } from \"./Layers/layer\";\r\nimport type { LensFlareSystem } from \"./LensFlares/lensFlareSystem\";\r\nimport type { ProceduralTexture } from \"./Materials/Textures/Procedurals/proceduralTexture\";\r\nimport { FrameGraphObjectRendererTask } from \"./FrameGraph/Tasks/Rendering/objectRendererTask\";\r\nimport { _RetryWithInterval } from \"./Misc/timingTools\";\r\nimport type { ObjectRenderer } from \"./Rendering/objectRenderer\";\r\nimport type { BoundingBoxRenderer } from \"./Rendering/boundingBoxRenderer\";\r\nimport type { BoundingBox } from \"./Culling/boundingBox\";\r\n\r\n/**\r\n * Define an interface for all classes that will hold resources\r\n */\r\nexport interface IDisposable {\r\n    /**\r\n     * Releases all held resources\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/** Interface defining initialization parameters for Scene class */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface SceneOptions {\r\n    /**\r\n     * Defines that scene should keep up-to-date a map of geometry to enable fast look-up by uniqueId\r\n     * It will improve performance when the number of geometries becomes important.\r\n     */\r\n    useGeometryUniqueIdsMap?: boolean;\r\n\r\n    /**\r\n     * Defines that each material of the scene should keep up-to-date a map of referencing meshes for fast disposing\r\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\r\n     */\r\n    useMaterialMeshMap?: boolean;\r\n\r\n    /**\r\n     * Defines that each mesh of the scene should keep up-to-date a map of referencing cloned meshes for fast disposing\r\n     * It will improve performance when the number of mesh becomes important, but might consume a bit more memory\r\n     */\r\n    useClonedMeshMap?: boolean;\r\n\r\n    /** Defines if the creation of the scene should impact the engine (Eg. UtilityLayer's scene) */\r\n    virtual?: boolean;\r\n\r\n    /**\r\n     * @experimental\r\n     * FloatingOriginMode helps avoid floating point imprecision of rendering large worlds by\r\n     * 1. Forcing the engine to use doublePrecision mode\r\n     * 2. Offsetting uniform values before passing to shader so that camera is centered at origin and world is offset by camera position\r\n     */\r\n    floatingOriginMode?: boolean;\r\n}\r\n\r\n/**\r\n * Define how the scene should favor performance over ease of use\r\n */\r\nexport const enum ScenePerformancePriority {\r\n    /** Default mode. No change. Performance will be treated as less important than backward compatibility */\r\n    BackwardCompatible,\r\n    /** Some performance options will be turned on trying to strike a balance between perf and ease of use */\r\n    Intermediate,\r\n    /** Performance will be top priority */\r\n    Aggressive,\r\n}\r\n\r\n/**\r\n * Represents a scene to be rendered by the engine.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/scene\r\n */\r\nexport class Scene implements IAnimatable, IClipPlanesHolder, IAssetContainer {\r\n    /** The fog is deactivated */\r\n    public static readonly FOGMODE_NONE = Constants.FOGMODE_NONE;\r\n    /** The fog density is following an exponential function */\r\n    public static readonly FOGMODE_EXP = Constants.FOGMODE_EXP;\r\n    /** The fog density is following an exponential function faster than FOGMODE_EXP */\r\n    public static readonly FOGMODE_EXP2 = Constants.FOGMODE_EXP2;\r\n    /** The fog density is following a linear function. */\r\n    public static readonly FOGMODE_LINEAR = Constants.FOGMODE_LINEAR;\r\n\r\n    /**\r\n     * Gets or sets the minimum deltatime when deterministic lock step is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     */\r\n    public static MinDeltaTime = 1.0;\r\n    /**\r\n     * Gets or sets the maximum deltatime when deterministic lock step is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     */\r\n    public static MaxDeltaTime = 1000.0;\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Factory used to create the default material.\r\n     * @param scene The scene to create the material for\r\n     * @returns The default material\r\n     */\r\n    public static DefaultMaterialFactory(scene: Scene): Material {\r\n        throw _WarnImport(\"StandardMaterial\");\r\n    }\r\n\r\n    private static readonly _OriginalDefaultMaterialFactory = Scene.DefaultMaterialFactory;\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Factory used to create the a collision coordinator.\r\n     * @returns The collision coordinator\r\n     */\r\n    public static CollisionCoordinatorFactory(): ICollisionCoordinator {\r\n        throw _WarnImport(\"DefaultCollisionCoordinator\");\r\n    }\r\n\r\n    // Members\r\n\r\n    /** @internal */\r\n    public _tempPickingRay: Nullable<Ray>;\r\n\r\n    /** @internal */\r\n    public _cachedRayForTransform: Ray;\r\n\r\n    /** @internal */\r\n    public _pickWithRayInverseMatrix: Matrix;\r\n\r\n    /** @internal */\r\n    public _inputManager = new InputManager(this);\r\n\r\n    /** Define this parameter if you are using multiple cameras and you want to specify which one should be used for pointer position */\r\n    public cameraToUseForPointers: Nullable<Camera> = null;\r\n\r\n    /** @internal */\r\n    public readonly _isScene = true;\r\n\r\n    /** @internal */\r\n    public _blockEntityCollection = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean that indicates if the scene must clear the render buffer before rendering a frame\r\n     */\r\n    public autoClear = true;\r\n    /**\r\n     * Gets or sets a boolean that indicates if the scene must clear the depth and stencil buffers before rendering a frame\r\n     */\r\n    public autoClearDepthAndStencil = true;\r\n\r\n    private _clearColor: Color4 = new Color4(0.2, 0.2, 0.3, 1.0);\r\n\r\n    /**\r\n     * Observable triggered when the performance priority is changed\r\n     */\r\n    public onClearColorChangedObservable = new Observable<Color4>();\r\n\r\n    /**\r\n     * Defines the color used to clear the render buffer (Default is (0.2, 0.2, 0.3, 1.0))\r\n     */\r\n    public get clearColor(): Color4 {\r\n        return this._clearColor;\r\n    }\r\n\r\n    public set clearColor(value: Color4) {\r\n        if (value !== this._clearColor) {\r\n            this._clearColor = value;\r\n            this.onClearColorChangedObservable.notifyObservers(this._clearColor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the color used to simulate the ambient color (Default is (0, 0, 0))\r\n     */\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * This is use to store the default BRDF lookup for PBR materials in your scene.\r\n     * It should only be one of the following (if not the default embedded one):\r\n     * * For uncorrelated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = false) : https://assets.babylonjs.com/environments/uncorrelatedBRDF.dds\r\n     * * For correlated BRDF (pbr.brdf.useEnergyConservation = false and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedBRDF.dds\r\n     * * For correlated multi scattering BRDF (pbr.brdf.useEnergyConservation = true and pbr.brdf.useSmithVisibilityHeightCorrelated = true) : https://assets.babylonjs.com/environments/correlatedMSBRDF.dds\r\n     * The material properties need to be setup according to the type of texture in use.\r\n     */\r\n    public environmentBRDFTexture: BaseTexture;\r\n\r\n    /**\r\n     * Intensity of the environment (i.e. all indirect lighting) in all pbr material.\r\n     * This dims or reinforces the indirect lighting overall (reflection and diffuse).\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     * Note that this is more of a debugging parameter and is not physically accurate.\r\n     * If you want to modify the intensity of the IBL texture, you should update iblIntensity instead.\r\n     */\r\n    public environmentIntensity: number = 1;\r\n\r\n    /**\r\n     * Overall intensity of the IBL texture.\r\n     * This value is multiplied with the reflectionTexture.level value to calculate the final IBL intensity.\r\n     */\r\n    public iblIntensity = 1;\r\n\r\n    /** @internal */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n    /**\r\n     * Default image processing configuration used either in the rendering\r\n     * Forward main pass or through the imageProcessingPostProcess if present.\r\n     * As in the majority of the scene they are the same (exception for multi camera),\r\n     * this is easier to reference from here than from all the materials and post process.\r\n     *\r\n     * No setter as we it is a shared configuration, you can set the values instead.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    private _performancePriority = ScenePerformancePriority.BackwardCompatible;\r\n\r\n    /**\r\n     * Observable triggered when the performance priority is changed\r\n     */\r\n    public onScenePerformancePriorityChangedObservable = new Observable<ScenePerformancePriority>();\r\n    /**\r\n     * Gets or sets a value indicating how to treat performance relatively to ease of use and backward compatibility\r\n     */\r\n    public get performancePriority() {\r\n        return this._performancePriority;\r\n    }\r\n\r\n    public set performancePriority(value) {\r\n        if (value === this._performancePriority) {\r\n            return;\r\n        }\r\n\r\n        this._performancePriority = value;\r\n\r\n        switch (value) {\r\n            case ScenePerformancePriority.BackwardCompatible:\r\n                this.skipFrustumClipping = false;\r\n                this._renderingManager.maintainStateBetweenFrames = false;\r\n                this.skipPointerMovePicking = false;\r\n                this.autoClear = true;\r\n                break;\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.skipFrustumClipping = false;\r\n                this._renderingManager.maintainStateBetweenFrames = false;\r\n                this.skipPointerMovePicking = true;\r\n                this.autoClear = false;\r\n                break;\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.skipFrustumClipping = true;\r\n                this._renderingManager.maintainStateBetweenFrames = true;\r\n                this.skipPointerMovePicking = true;\r\n                this.autoClear = false;\r\n                break;\r\n        }\r\n\r\n        this.onScenePerformancePriorityChangedObservable.notifyObservers(value);\r\n    }\r\n\r\n    private _forceWireframe = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if all rendering must be done in wireframe\r\n     */\r\n    public set forceWireframe(value: boolean) {\r\n        if (this._forceWireframe === value) {\r\n            return;\r\n        }\r\n        this._forceWireframe = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get forceWireframe(): boolean {\r\n        return this._forceWireframe;\r\n    }\r\n\r\n    private _skipFrustumClipping = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if we should skip the frustum clipping part of the active meshes selection\r\n     */\r\n    public set skipFrustumClipping(value: boolean) {\r\n        if (this._skipFrustumClipping === value) {\r\n            return;\r\n        }\r\n        this._skipFrustumClipping = value;\r\n    }\r\n    public get skipFrustumClipping(): boolean {\r\n        return this._skipFrustumClipping;\r\n    }\r\n\r\n    private _forcePointsCloud = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if all rendering must be done in point cloud\r\n     */\r\n    public set forcePointsCloud(value: boolean) {\r\n        if (this._forcePointsCloud === value) {\r\n            return;\r\n        }\r\n        this._forcePointsCloud = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get forcePointsCloud(): boolean {\r\n        return this._forcePointsCloud;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 1\r\n     */\r\n    public clipPlane: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 2\r\n     */\r\n    public clipPlane2: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 3\r\n     */\r\n    public clipPlane3: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 4\r\n     */\r\n    public clipPlane4: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 5\r\n     */\r\n    public clipPlane5: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets or sets the active clipplane 6\r\n     */\r\n    public clipPlane6: Nullable<Plane>;\r\n\r\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\r\n    public rootNodes: Node[] = [];\r\n\r\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     */\r\n    public cameras: Camera[] = [];\r\n\r\n    /**\r\n     * All of the lights added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     */\r\n    public lights: Light[] = [];\r\n\r\n    /**\r\n     * All of the (abstract) meshes added to this scene\r\n     */\r\n    public meshes: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public skeletons: Skeleton[] = [];\r\n\r\n    /**\r\n     * All of the particle systems added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n     */\r\n    public particleSystems: IParticleSystem[] = [];\r\n\r\n    /**\r\n     * Gets the current delta time used by animation engine\r\n     */\r\n    deltaTime: number;\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * All of the animation groups added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     */\r\n    public animationGroups: AnimationGroup[] = [];\r\n\r\n    /**\r\n     * All of the multi-materials added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public multiMaterials: MultiMaterial[] = [];\r\n\r\n    /**\r\n     * All of the materials added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n     * Note also that the order of the Material within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     */\r\n    public materials: Material[] = [];\r\n\r\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\r\n     */\r\n    public morphTargetManagers: MorphTargetManager[] = [];\r\n\r\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\r\n    public geometries: Geometry[] = [];\r\n\r\n    /**\r\n     * All of the transform nodes added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n     * Note also that the order of the TransformNode within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n     */\r\n    public transformNodes: TransformNode[] = [];\r\n\r\n    /**\r\n     * ActionManagers available on the scene.\r\n     */\r\n    public actionManagers: AbstractActionManager[] = [];\r\n\r\n    /**\r\n     * Object renderers available on the scene.\r\n     */\r\n    public objectRenderers: ObjectRenderer[] = [];\r\n\r\n    /**\r\n     * Textures to keep.\r\n     */\r\n    public textures: BaseTexture[] = [];\r\n\r\n    /** @internal */\r\n    protected _environmentTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public get environmentTexture(): Nullable<BaseTexture> {\r\n        return this._environmentTexture;\r\n    }\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to set here than in all the materials.\r\n     */\r\n    public set environmentTexture(value: Nullable<BaseTexture>) {\r\n        if (this._environmentTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._environmentTexture = value;\r\n        this.onEnvironmentTextureChangedObservable.notifyObservers(value);\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\r\n    public postProcesses: PostProcess[] = [];\r\n\r\n    /**\r\n     * The list of effect layers (highlights/glow) added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/highlightLayer\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/glowLayer\r\n     */\r\n    public effectLayers: Array<EffectLayer> = [];\r\n\r\n    /**\r\n     * The list of sounds used in the scene.\r\n     */\r\n    public sounds: Nullable<Array<Sound>> = null;\r\n\r\n    /**\r\n     * The list of layers (background and foreground) of the scene\r\n     */\r\n    public layers: Array<Layer> = [];\r\n\r\n    /**\r\n     * The list of lens flare system added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     */\r\n    public lensFlareSystems: Array<LensFlareSystem> = [];\r\n\r\n    /**\r\n     * The list of procedural textures added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/proceduralTextures\r\n     */\r\n    public proceduralTextures: Array<ProceduralTexture> = [];\r\n\r\n    /**\r\n     * @returns all meshes, lights, cameras, transformNodes and bones\r\n     */\r\n    public getNodes(): Array<Node> {\r\n        let nodes: Node[] = [];\r\n        nodes = nodes.concat(this.meshes);\r\n        nodes = nodes.concat(this.lights);\r\n        nodes = nodes.concat(this.cameras);\r\n        nodes = nodes.concat(this.transformNodes); // dummies\r\n        for (const skeleton of this.skeletons) {\r\n            nodes = nodes.concat(skeleton.bones);\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if animations are enabled\r\n     */\r\n    public animationsEnabled = true;\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if a constant deltatime has to be used\r\n     * This is mostly useful for testing purposes when you do not want the animations to scale with the framerate\r\n     */\r\n    public useConstantAnimationDeltaTime = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if the scene must keep the meshUnderPointer property updated\r\n     * Please note that it requires to run a ray cast through the scene on every frame\r\n     */\r\n    public constantlyUpdateMeshUnderPointer = false;\r\n\r\n    /**\r\n     * Defines the HTML cursor to use when hovering over interactive elements\r\n     */\r\n    public hoverCursor = \"pointer\";\r\n    /**\r\n     * Defines the HTML default cursor to use (empty by default)\r\n     */\r\n    public defaultCursor: string = \"\";\r\n    /**\r\n     * Defines whether cursors are handled by the scene.\r\n     */\r\n    public doNotHandleCursors = false;\r\n    /**\r\n     * This is used to call preventDefault() on pointer down\r\n     * in order to block unwanted artifacts like system double clicks\r\n     */\r\n    public preventDefaultOnPointerDown = true;\r\n\r\n    /**\r\n     * This is used to call preventDefault() on pointer up\r\n     * in order to block unwanted artifacts like system double clicks\r\n     */\r\n    public preventDefaultOnPointerUp = true;\r\n\r\n    // Metadata\r\n    /**\r\n     * Gets or sets user defined metadata\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * For internal use only. Please do not use.\r\n     */\r\n    public reservedDataStore: any = null;\r\n\r\n    /**\r\n     * Gets the name of the plugin used to load this scene (null by default)\r\n     */\r\n    public loadingPluginName: string;\r\n\r\n    /**\r\n     * Use this array to add regular expressions used to disable offline support for specific urls\r\n     */\r\n    public disableOfflineSupportExceptionRules: RegExp[] = [];\r\n\r\n    /**\r\n     * An event triggered when the scene is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Scene>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed when this scene is disposed. */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the scene (right after animations and physics)\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Scene>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed before rendering this scene */\r\n    public set beforeRender(callback: Nullable<() => void>) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        if (callback) {\r\n            this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the scene\r\n     */\r\n    public onAfterRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after rendering the scene for an active camera (When scene.render is called this will be called after each camera)\r\n     * This is triggered for each \"sub\" camera in a Camera Rig unlike onAfterCameraRenderObservable\r\n     */\r\n    public onAfterRenderCameraObservable = new Observable<Camera>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\r\n    /** Sets a function to be executed after rendering this scene */\r\n    public set afterRender(callback: Nullable<() => void>) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n\r\n        if (callback) {\r\n            this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * An event triggered before animating the scene\r\n     */\r\n    public onBeforeAnimationsObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after animations processing\r\n     */\r\n    public onAfterAnimationsObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before draw calls are ready to be sent\r\n     */\r\n    public onBeforeDrawPhaseObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after draw calls have been sent\r\n     */\r\n    public onAfterDrawPhaseObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the scene is ready\r\n     */\r\n    public onReadyObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before rendering a camera\r\n     */\r\n    public onBeforeCameraRenderObservable = new Observable<Camera>();\r\n\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    /** Sets a function to be executed before rendering a camera*/\r\n    public set beforeCameraRender(callback: () => void) {\r\n        if (this._onBeforeCameraRenderObserver) {\r\n            this.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        }\r\n\r\n        this._onBeforeCameraRenderObserver = this.onBeforeCameraRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering a camera\r\n     * This is triggered for the full rig Camera only unlike onAfterRenderCameraObservable\r\n     */\r\n    public onAfterCameraRenderObservable = new Observable<Camera>();\r\n\r\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    /** Sets a function to be executed after rendering a camera*/\r\n    public set afterCameraRender(callback: () => void) {\r\n        if (this._onAfterCameraRenderObserver) {\r\n            this.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n        }\r\n        this._onAfterCameraRenderObserver = this.onAfterCameraRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when active meshes evaluation is about to start\r\n     */\r\n    public onBeforeActiveMeshesEvaluationObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when active meshes evaluation is done\r\n     */\r\n    public onAfterActiveMeshesEvaluationObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when particles rendering is about to start\r\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\r\n     */\r\n    public onBeforeParticlesRenderingObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when particles rendering is done\r\n     * Note: This event can be trigger more than once per frame (because particles can be rendered by render target textures as well)\r\n     */\r\n    public onAfterParticlesRenderingObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when SceneLoader.Append or SceneLoader.Load or SceneLoader.ImportMesh were successfully executed\r\n     */\r\n    public onDataLoadedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when a camera is created\r\n     */\r\n    public onNewCameraAddedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * An event triggered when a camera is removed\r\n     */\r\n    public onCameraRemovedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * An event triggered when a light is created\r\n     */\r\n    public onNewLightAddedObservable = new Observable<Light>();\r\n\r\n    /**\r\n     * An event triggered when a light is removed\r\n     */\r\n    public onLightRemovedObservable = new Observable<Light>();\r\n\r\n    /**\r\n     * An event triggered when a geometry is created\r\n     */\r\n    public onNewGeometryAddedObservable = new Observable<Geometry>();\r\n\r\n    /**\r\n     * An event triggered when a geometry is removed\r\n     */\r\n    public onGeometryRemovedObservable = new Observable<Geometry>();\r\n\r\n    /**\r\n     * An event triggered when a transform node is created\r\n     */\r\n    public onNewTransformNodeAddedObservable = new Observable<TransformNode>();\r\n\r\n    /**\r\n     * An event triggered when a transform node is removed\r\n     */\r\n    public onTransformNodeRemovedObservable = new Observable<TransformNode>();\r\n\r\n    /**\r\n     * An event triggered when a mesh is created\r\n     */\r\n    public onNewMeshAddedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * An event triggered when a mesh is removed\r\n     */\r\n    public onMeshRemovedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * An event triggered when a skeleton is created\r\n     */\r\n    public onNewSkeletonAddedObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * An event triggered when a skeleton is removed\r\n     */\r\n    public onSkeletonRemovedObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * An event triggered when a particle system is created\r\n     */\r\n    public onNewParticleSystemAddedObservable = new Observable<IParticleSystem>();\r\n\r\n    /**\r\n     * An event triggered when a particle system is removed\r\n     */\r\n    public onParticleSystemRemovedObservable = new Observable<IParticleSystem>();\r\n\r\n    /**\r\n     * An event triggered when an animation group is created\r\n     */\r\n    public onNewAnimationGroupAddedObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * An event triggered when an animation group is removed\r\n     */\r\n    public onAnimationGroupRemovedObservable = new Observable<AnimationGroup>();\r\n\r\n    /**\r\n     * An event triggered when a material is created\r\n     */\r\n    public onNewMaterialAddedObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An event triggered when a multi material is created\r\n     */\r\n    public onNewMultiMaterialAddedObservable = new Observable<MultiMaterial>();\r\n\r\n    /**\r\n     * An event triggered when a material is removed\r\n     */\r\n    public onMaterialRemovedObservable = new Observable<Material>();\r\n\r\n    /**\r\n     * An event triggered when a multi material is removed\r\n     */\r\n    public onMultiMaterialRemovedObservable = new Observable<MultiMaterial>();\r\n\r\n    /**\r\n     * An event triggered when a texture is created\r\n     */\r\n    public onNewTextureAddedObservable = new Observable<BaseTexture>();\r\n\r\n    /**\r\n     * An event triggered when a texture is removed\r\n     */\r\n    public onTextureRemovedObservable = new Observable<BaseTexture>();\r\n\r\n    /**\r\n     * An event triggered when a frame graph is created\r\n     */\r\n    public onNewFrameGraphAddedObservable = new Observable<FrameGraph>();\r\n\r\n    /**\r\n     * An event triggered when a frame graph is removed\r\n     */\r\n    public onFrameGraphRemovedObservable = new Observable<FrameGraph>();\r\n\r\n    /**\r\n     * An event triggered when an object renderer is created\r\n     */\r\n    public onNewObjectRendererAddedObservable = new Observable<ObjectRenderer>();\r\n\r\n    /**\r\n     * An event triggered when an object renderer is removed\r\n     */\r\n    public onObjectRendererRemovedObservable = new Observable<ObjectRenderer>();\r\n\r\n    /**\r\n     * An event triggered when a post process is created\r\n     */\r\n    public onNewPostProcessAddedObservable = new Observable<PostProcess>();\r\n\r\n    /**\r\n     * An event triggered when a post process is removed\r\n     */\r\n    public onPostProcessRemovedObservable = new Observable<PostProcess>();\r\n\r\n    /**\r\n     * An event triggered when an effect layer is created\r\n     */\r\n    public onNewEffectLayerAddedObservable = new Observable<EffectLayer>();\r\n\r\n    /**\r\n     * An event triggered when an effect layer is removed\r\n     */\r\n    public onEffectLayerRemovedObservable = new Observable<EffectLayer>();\r\n\r\n    /**\r\n     * An event triggered when render targets are about to be rendered\r\n     * Can happen multiple times per frame.\r\n     */\r\n    public onBeforeRenderTargetsRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when render targets were rendered.\r\n     * Can happen multiple times per frame.\r\n     */\r\n    public onAfterRenderTargetsRenderObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered before calculating deterministic simulation step\r\n     */\r\n    public onBeforeStepObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered after calculating deterministic simulation step\r\n     */\r\n    public onAfterStepObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the activeCamera property is updated\r\n     */\r\n    public onActiveCameraChanged = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the activeCameras property is updated\r\n     */\r\n    public onActiveCamerasChanged = new Observable<Scene>();\r\n\r\n    /**\r\n     * This Observable will be triggered before rendering each renderingGroup of each rendered camera.\r\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\r\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\r\n     */\r\n    public onBeforeRenderingGroupObservable = new Observable<RenderingGroupInfo>();\r\n\r\n    /**\r\n     * This Observable will be triggered after rendering each renderingGroup of each rendered camera.\r\n     * The RenderingGroupInfo class contains all the information about the context in which the observable is called\r\n     * If you wish to register an Observer only for a given set of renderingGroup, use the mask with a combination of the renderingGroup index elevated to the power of two (1 for renderingGroup 0, 2 for renderingrOup1, 4 for 2 and 8 for 3)\r\n     */\r\n    public onAfterRenderingGroupObservable = new Observable<RenderingGroupInfo>();\r\n\r\n    /**\r\n     * This Observable will when a mesh has been imported into the scene.\r\n     */\r\n    public onMeshImportedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * This Observable will when an animation file has been imported into the scene.\r\n     */\r\n    public onAnimationFileImportedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * An event triggered when the environmentTexture is changed.\r\n     */\r\n    public onEnvironmentTextureChangedObservable = new Observable<Nullable<BaseTexture>>();\r\n\r\n    /**\r\n     * An event triggered when the state of mesh under pointer, for a specific pointerId, changes.\r\n     */\r\n    public onMeshUnderPointerUpdatedObservable = new Observable<{ mesh: Nullable<AbstractMesh>; pointerId: number }>();\r\n\r\n    /**\r\n     * Gets or sets a user defined funtion to select LOD from a mesh and a camera.\r\n     * By default this function is undefined and Babylon.js will select LOD based on distance to camera\r\n     */\r\n    public customLODSelector: (mesh: AbstractMesh, camera: Camera) => Nullable<AbstractMesh>;\r\n\r\n    // Animations\r\n\r\n    /** @internal */\r\n    public _registeredForLateAnimationBindings = new SmartArrayNoDuplicate<any>(256);\r\n\r\n    // Pointers\r\n    private _pointerPickingConfiguration = new PointerPickingConfiguration();\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public get pointerDownPredicate() {\r\n        return this._pointerPickingConfiguration.pointerDownPredicate;\r\n    }\r\n\r\n    public set pointerDownPredicate(value) {\r\n        this._pointerPickingConfiguration.pointerDownPredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public get pointerUpPredicate() {\r\n        return this._pointerPickingConfiguration.pointerUpPredicate;\r\n    }\r\n\r\n    public set pointerUpPredicate(value) {\r\n        this._pointerPickingConfiguration.pointerUpPredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public get pointerMovePredicate() {\r\n        return this._pointerPickingConfiguration.pointerMovePredicate;\r\n    }\r\n\r\n    public set pointerMovePredicate(value) {\r\n        this._pointerPickingConfiguration.pointerMovePredicate = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer down event\r\n     */\r\n    public get pointerDownFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerDownFastCheck;\r\n    }\r\n\r\n    public set pointerDownFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerDownFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer up event\r\n     */\r\n    public get pointerUpFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerUpFastCheck;\r\n    }\r\n\r\n    public set pointerUpFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerUpFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate meshes for a pointer move event\r\n     */\r\n    public get pointerMoveFastCheck() {\r\n        return this._pointerPickingConfiguration.pointerMoveFastCheck;\r\n    }\r\n\r\n    public set pointerMoveFastCheck(value) {\r\n        this._pointerPickingConfiguration.pointerMoveFastCheck = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer move event occurs.\r\n     */\r\n    public get skipPointerMovePicking() {\r\n        return this._pointerPickingConfiguration.skipPointerMovePicking;\r\n    }\r\n\r\n    public set skipPointerMovePicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerMovePicking = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer down event occurs.\r\n     */\r\n    public get skipPointerDownPicking() {\r\n        return this._pointerPickingConfiguration.skipPointerDownPicking;\r\n    }\r\n\r\n    public set skipPointerDownPicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerDownPicking = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the user want to entirely skip the picking phase when a pointer up event occurs.  Off by default.\r\n     */\r\n    public get skipPointerUpPicking() {\r\n        return this._pointerPickingConfiguration.skipPointerUpPicking;\r\n    }\r\n\r\n    public set skipPointerUpPicking(value) {\r\n        this._pointerPickingConfiguration.skipPointerUpPicking = value;\r\n    }\r\n\r\n    /** Callback called when a pointer move is detected */\r\n    public onPointerMove?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer down is detected  */\r\n    public onPointerDown?: (evt: IPointerEvent, pickInfo: PickingInfo, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer up is detected  */\r\n    public onPointerUp?: (evt: IPointerEvent, pickInfo: Nullable<PickingInfo>, type: PointerEventTypes) => void;\r\n    /** Callback called when a pointer pick is detected */\r\n    public onPointerPick?: (evt: IPointerEvent, pickInfo: PickingInfo) => void;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer move event\r\n     */\r\n    public pointerMoveTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer down event\r\n     */\r\n    public pointerDownTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * Gets or sets a predicate used to select candidate faces for a pointer up event\r\n     */\r\n    public pointerUpTrianglePredicate: ((p0: Vector3, p1: Vector3, p2: Vector3, ray: Ray) => boolean) | undefined;\r\n\r\n    /**\r\n     * This observable event is triggered when any ponter event is triggered. It is registered during Scene.attachControl() and it is called BEFORE the 3D engine process anything (mesh/sprite picking for instance).\r\n     * You have the possibility to skip the process and the call to onPointerObservable by setting PointerInfoPre.skipOnPointerObservable to true\r\n     */\r\n    public onPrePointerObservable = new Observable<PointerInfoPre>();\r\n\r\n    /**\r\n     * Observable event triggered each time an input event is received from the rendering canvas\r\n     */\r\n    public onPointerObservable = new Observable<PointerInfo>();\r\n\r\n    /**\r\n     * Gets the pointer coordinates without any translation (ie. straight out of the pointer event)\r\n     */\r\n    public get unTranslatedPointer(): Vector2 {\r\n        return this._inputManager.unTranslatedPointer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the distance in pixel that you have to move to prevent some events. Default is 10 pixels\r\n     */\r\n    public static get DragMovementThreshold() {\r\n        return InputManager.DragMovementThreshold;\r\n    }\r\n\r\n    public static set DragMovementThreshold(value: number) {\r\n        InputManager.DragMovementThreshold = value;\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 500 ms\r\n     */\r\n    public static get LongPressDelay() {\r\n        return InputManager.LongPressDelay;\r\n    }\r\n\r\n    public static set LongPressDelay(value: number) {\r\n        InputManager.LongPressDelay = value;\r\n    }\r\n\r\n    /**\r\n     * Time in milliseconds to wait to raise long press events if button is still pressed. Default is 300 ms\r\n     */\r\n    public static get DoubleClickDelay() {\r\n        return InputManager.DoubleClickDelay;\r\n    }\r\n\r\n    public static set DoubleClickDelay(value: number) {\r\n        InputManager.DoubleClickDelay = value;\r\n    }\r\n\r\n    /** If you need to check double click without raising a single click at first click, enable this flag */\r\n    public static get ExclusiveDoubleClickMode() {\r\n        return InputManager.ExclusiveDoubleClickMode;\r\n    }\r\n\r\n    public static set ExclusiveDoubleClickMode(value: boolean) {\r\n        InputManager.ExclusiveDoubleClickMode = value;\r\n    }\r\n\r\n    /**\r\n     * Bind the current view position to an effect.\r\n     * @param effect The effect to be bound\r\n     * @param variableName name of the shader variable that will hold the eye position\r\n     * @param isVector3 true to indicates that variableName is a Vector3 and not a Vector4\r\n     * @returns the computed eye position\r\n     */\r\n    public bindEyePosition(effect: Nullable<Effect>, variableName = \"vEyePosition\", isVector3 = false): Vector4 {\r\n        const eyePosition = this._forcedViewPosition\r\n            ? this._forcedViewPosition\r\n            : this._mirroredCameraPosition\r\n              ? this._mirroredCameraPosition\r\n              : (this.activeCamera?.globalPosition ?? Vector3.ZeroReadOnly);\r\n\r\n        const invertNormal = this.useRightHandedSystem === (this._mirroredCameraPosition != null);\r\n\r\n        TmpVectors.Vector4[0].set(eyePosition.x, eyePosition.y, eyePosition.z, invertNormal ? -1 : 1);\r\n\r\n        TmpVectors.Vector4[1].copyFromFloats(\r\n            TmpVectors.Vector4[0].x - this.floatingOriginOffset.x,\r\n            TmpVectors.Vector4[0].y - this.floatingOriginOffset.y,\r\n            TmpVectors.Vector4[0].z - this.floatingOriginOffset.z,\r\n            TmpVectors.Vector4[0].w\r\n        );\r\n\r\n        if (effect) {\r\n            if (isVector3) {\r\n                effect.setFloat3(variableName, TmpVectors.Vector4[1].x, TmpVectors.Vector4[1].y, TmpVectors.Vector4[1].z);\r\n            } else {\r\n                effect.setVector4(variableName, TmpVectors.Vector4[1]);\r\n            }\r\n        }\r\n\r\n        return TmpVectors.Vector4[0];\r\n    }\r\n\r\n    /**\r\n     * Update the scene ubo before it can be used in rendering processing\r\n     * @returns the scene UniformBuffer\r\n     */\r\n    public finalizeSceneUbo(): UniformBuffer {\r\n        const ubo = this.getSceneUniformBuffer();\r\n        const eyePosition = this.bindEyePosition(null);\r\n\r\n        ubo.updateFloat4(\r\n            \"vEyePosition\",\r\n            eyePosition.x - this.floatingOriginOffset.x,\r\n            eyePosition.y - this.floatingOriginOffset.y,\r\n            eyePosition.z - this.floatingOriginOffset.z,\r\n            eyePosition.w\r\n        );\r\n\r\n        ubo.update();\r\n\r\n        return ubo;\r\n    }\r\n\r\n    // Mirror\r\n    /** @internal */\r\n    public _mirroredCameraPosition: Nullable<Vector3>;\r\n\r\n    // Keyboard\r\n\r\n    /**\r\n     * This observable event is triggered when any keyboard event si raised and registered during Scene.attachControl()\r\n     * You have the possibility to skip the process and the call to onKeyboardObservable by setting KeyboardInfoPre.skipOnPointerObservable to true\r\n     */\r\n    public onPreKeyboardObservable = new Observable<KeyboardInfoPre>();\r\n\r\n    /**\r\n     * Observable event triggered each time an keyboard event is received from the hosting window\r\n     */\r\n    public onKeyboardObservable = new Observable<KeyboardInfo>();\r\n\r\n    // Coordinates system\r\n\r\n    private _useRightHandedSystem = false;\r\n    /**\r\n     * Gets or sets a boolean indicating if the scene must use right-handed coordinates system\r\n     */\r\n    public set useRightHandedSystem(value: boolean) {\r\n        if (this._useRightHandedSystem === value) {\r\n            return;\r\n        }\r\n        this._useRightHandedSystem = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get useRightHandedSystem(): boolean {\r\n        return this._useRightHandedSystem;\r\n    }\r\n\r\n    // Deterministic lockstep\r\n    private _timeAccumulator: number = 0;\r\n    private _currentStepId: number = 0;\r\n    private _currentInternalStep: number = 0;\r\n\r\n    /**\r\n     * Sets the step Id used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @param newStepId defines the step Id\r\n     */\r\n    public setStepId(newStepId: number): void {\r\n        this._currentStepId = newStepId;\r\n    }\r\n\r\n    /**\r\n     * Gets the step Id used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the step Id\r\n     */\r\n    public getStepId(): number {\r\n        return this._currentStepId;\r\n    }\r\n\r\n    /**\r\n     * Gets the internal step used by deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the internal step\r\n     */\r\n    public getInternalStep(): number {\r\n        return this._currentInternalStep;\r\n    }\r\n\r\n    // Fog\r\n\r\n    private _fogEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if fog is enabled on this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is true)\r\n     */\r\n    public set fogEnabled(value: boolean) {\r\n        if (this._fogEnabled === value) {\r\n            return;\r\n        }\r\n        this._fogEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get fogEnabled(): boolean {\r\n        return this._fogEnabled;\r\n    }\r\n\r\n    private _fogMode = Scene.FOGMODE_NONE;\r\n    /**\r\n     * Gets or sets the fog mode to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * | mode | value |\r\n     * | --- | --- |\r\n     * | FOGMODE_NONE | 0 |\r\n     * | FOGMODE_EXP | 1 |\r\n     * | FOGMODE_EXP2 | 2 |\r\n     * | FOGMODE_LINEAR | 3 |\r\n     */\r\n    public set fogMode(value: number) {\r\n        if (this._fogMode === value) {\r\n            return;\r\n        }\r\n        this._fogMode = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n    public get fogMode(): number {\r\n        return this._fogMode;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the fog color to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is Color3(0.2, 0.2, 0.3))\r\n     */\r\n    public fogColor = new Color3(0.2, 0.2, 0.3);\r\n    /**\r\n     * Gets or sets the fog density to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 0.1)\r\n     */\r\n    public fogDensity = 0.1;\r\n    /**\r\n     * Gets or sets the fog start distance to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 0)\r\n     */\r\n    public fogStart = 0;\r\n    /**\r\n     * Gets or sets the fog end distance to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/environment_introduction#fog\r\n     * (Default is 1000)\r\n     */\r\n    public fogEnd = 1000.0;\r\n\r\n    /**\r\n     * Flag indicating that the frame buffer binding is handled by another component\r\n     */\r\n    public get prePass(): boolean {\r\n        return !!this.prePassRenderer && this.prePassRenderer.defaultRT.enabled;\r\n    }\r\n\r\n    /**\r\n     * Flag indicating if we need to store previous matrices when rendering\r\n     */\r\n    public needsPreviousWorldMatrices = false;\r\n\r\n    // Lights\r\n    private _shadowsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if shadows are enabled on this scene\r\n     */\r\n    public set shadowsEnabled(value: boolean) {\r\n        if (this._shadowsEnabled === value) {\r\n            return;\r\n        }\r\n        this._shadowsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\r\n    }\r\n    public get shadowsEnabled(): boolean {\r\n        return this._shadowsEnabled;\r\n    }\r\n\r\n    private _lightsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if lights are enabled on this scene\r\n     */\r\n    public set lightsEnabled(value: boolean) {\r\n        if (this._lightsEnabled === value) {\r\n            return;\r\n        }\r\n        this._lightsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_LightDirtyFlag);\r\n    }\r\n\r\n    public get lightsEnabled(): boolean {\r\n        return this._lightsEnabled;\r\n    }\r\n\r\n    private _activeCameras: Nullable<Camera[]>;\r\n    private _unObserveActiveCameras: Nullable<() => void> = null;\r\n\r\n    /** All of the active cameras added to this scene. */\r\n    public get activeCameras(): Nullable<Camera[]> {\r\n        return this._activeCameras;\r\n    }\r\n\r\n    public set activeCameras(cameras: Nullable<Camera[]>) {\r\n        if (this._unObserveActiveCameras) {\r\n            this._unObserveActiveCameras();\r\n            this._unObserveActiveCameras = null;\r\n        }\r\n\r\n        if (cameras) {\r\n            this._unObserveActiveCameras = _ObserveArray(cameras, () => {\r\n                this.onActiveCamerasChanged.notifyObservers(this);\r\n            });\r\n        }\r\n\r\n        this._activeCameras = cameras;\r\n    }\r\n\r\n    /** @internal */\r\n    public _activeCamera: Nullable<Camera>;\r\n    /** Gets or sets the current active camera */\r\n    public get activeCamera(): Nullable<Camera> {\r\n        return this._activeCamera;\r\n    }\r\n\r\n    public set activeCamera(value: Nullable<Camera>) {\r\n        if (value === this._activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this._activeCamera = value;\r\n        this.onActiveCameraChanged.notifyObservers(this);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _hasDefaultMaterial() {\r\n        return Scene.DefaultMaterialFactory !== Scene._OriginalDefaultMaterialFactory;\r\n    }\r\n\r\n    private _defaultMaterial: Material;\r\n\r\n    /** The default material used on meshes when no material is affected */\r\n    public get defaultMaterial(): Material {\r\n        if (!this._defaultMaterial) {\r\n            this._defaultMaterial = Scene.DefaultMaterialFactory(this);\r\n        }\r\n\r\n        return this._defaultMaterial;\r\n    }\r\n\r\n    /** The default material used on meshes when no material is affected */\r\n    public set defaultMaterial(value: Material) {\r\n        this._defaultMaterial = value;\r\n    }\r\n\r\n    // Textures\r\n    private _texturesEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if textures are enabled on this scene\r\n     */\r\n    public set texturesEnabled(value: boolean) {\r\n        if (this._texturesEnabled === value) {\r\n            return;\r\n        }\r\n        this._texturesEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    public get texturesEnabled(): boolean {\r\n        return this._texturesEnabled;\r\n    }\r\n\r\n    private _frameGraph: Nullable<FrameGraph> = null;\r\n    private _currentCustomRenderFunction?: (updateCameras: boolean, ignoreAnimations: boolean) => void;\r\n    /**\r\n     * Gets or sets the frame graph used to render the scene. If set, the scene will use the frame graph to render the scene instead of the default render loop.\r\n     */\r\n    public get frameGraph() {\r\n        return this._frameGraph;\r\n    }\r\n\r\n    public set frameGraph(value: Nullable<FrameGraph>) {\r\n        if (this._frameGraph) {\r\n            this._frameGraph = value;\r\n            if (!value) {\r\n                this.customRenderFunction = this._currentCustomRenderFunction;\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._frameGraph = value;\r\n        if (value) {\r\n            this._currentCustomRenderFunction = this.customRenderFunction;\r\n            this.customRenderFunction = this._renderWithFrameGraph;\r\n            this.activeCamera = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * List of frame graphs associated with the scene\r\n     */\r\n    public frameGraphs: FrameGraph[] = [];\r\n\r\n    // Physics\r\n    /**\r\n     * Gets or sets a boolean indicating if physic engines are enabled on this scene\r\n     */\r\n    public physicsEnabled = true;\r\n\r\n    // Particles\r\n    /**\r\n     * Gets or sets a boolean indicating if particles are enabled on this scene\r\n     */\r\n    public particlesEnabled = true;\r\n\r\n    // Sprites\r\n    /**\r\n     * Gets or sets a boolean indicating if sprites are enabled on this scene\r\n     */\r\n    public spritesEnabled = true;\r\n\r\n    // Skeletons\r\n    private _skeletonsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if skeletons are enabled on this scene\r\n     */\r\n    public set skeletonsEnabled(value: boolean) {\r\n        if (this._skeletonsEnabled === value) {\r\n            return;\r\n        }\r\n        this._skeletonsEnabled = value;\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_AttributesDirtyFlag);\r\n    }\r\n\r\n    public get skeletonsEnabled(): boolean {\r\n        return this._skeletonsEnabled;\r\n    }\r\n\r\n    // Lens flares\r\n    /**\r\n     * Gets or sets a boolean indicating if lens flares are enabled on this scene\r\n     */\r\n    public lensFlaresEnabled = true;\r\n\r\n    // Collisions\r\n    /**\r\n     * Gets or sets a boolean indicating if collisions are enabled on this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public collisionsEnabled = true;\r\n\r\n    private _collisionCoordinator: ICollisionCoordinator;\r\n\r\n    /** @internal */\r\n    public get collisionCoordinator(): ICollisionCoordinator {\r\n        if (!this._collisionCoordinator) {\r\n            this._collisionCoordinator = Scene.CollisionCoordinatorFactory();\r\n            this._collisionCoordinator.init(this);\r\n        }\r\n\r\n        return this._collisionCoordinator;\r\n    }\r\n\r\n    /**\r\n     * Defines the gravity applied to this scene (used only for collisions)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public gravity = new Vector3(0, -9.807, 0);\r\n\r\n    // Postprocesses\r\n    /**\r\n     * Gets or sets a boolean indicating if postprocesses are enabled on this scene\r\n     */\r\n    public postProcessesEnabled = true;\r\n    /**\r\n     * Gets the current postprocess manager\r\n     */\r\n    public postProcessManager: PostProcessManager;\r\n\r\n    // Customs render targets\r\n    /**\r\n     * Gets or sets a boolean indicating if render targets are enabled on this scene\r\n     */\r\n    public renderTargetsEnabled = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if next render targets must be dumped as image for debugging purposes\r\n     * We recommend not using it and instead rely on Spector.js: http://spector.babylonjs.com\r\n     */\r\n    public dumpNextRenderTargets = false;\r\n    /**\r\n     * The list of user defined render targets added to the scene\r\n     */\r\n    public customRenderTargets: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Defines if texture loading must be delayed\r\n     * If true, textures will only be loaded when they need to be rendered\r\n     */\r\n    public useDelayedTextureLoading: boolean;\r\n\r\n    /**\r\n     * Gets the list of meshes imported to the scene through SceneLoader\r\n     */\r\n    public importedMeshesFiles: string[] = [];\r\n\r\n    // Probes\r\n    /**\r\n     * Gets or sets a boolean indicating if probes are enabled on this scene\r\n     */\r\n    public probesEnabled = true;\r\n\r\n    // Offline support\r\n    /**\r\n     * Gets or sets the current offline provider to use to store scene data\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimizeCached\r\n     */\r\n    public offlineProvider: IOfflineProvider;\r\n\r\n    /**\r\n     * Gets or sets the action manager associated with the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n     */\r\n    public actionManager: AbstractActionManager;\r\n\r\n    private _meshesForIntersections = new SmartArrayNoDuplicate<AbstractMesh>(256);\r\n\r\n    // Procedural textures\r\n    /**\r\n     * Gets or sets a boolean indicating if procedural textures are enabled on this scene\r\n     */\r\n    public proceduralTexturesEnabled = true;\r\n\r\n    // Private\r\n    private _engine: AbstractEngine;\r\n\r\n    // Performance counters\r\n    private _totalVertices = new PerfCounter();\r\n    /** @internal */\r\n    public _activeIndices = new PerfCounter();\r\n    /** @internal */\r\n    public _activeParticles = new PerfCounter();\r\n    /** @internal */\r\n    public _activeBones = new PerfCounter();\r\n\r\n    private _animationRatio: number;\r\n\r\n    /** @internal */\r\n    public _animationTimeLast: number;\r\n\r\n    /** @internal */\r\n    public _animationTime: number = 0;\r\n\r\n    /**\r\n     * Gets or sets a general scale for animation speed\r\n     * @see https://www.babylonjs-playground.com/#IBU2W7#3\r\n     */\r\n    public animationTimeScale: number = 1;\r\n\r\n    /** @internal */\r\n    public _cachedMaterial: Nullable<Material>;\r\n    /** @internal */\r\n    public _cachedEffect: Nullable<Effect>;\r\n    /** @internal */\r\n    public _cachedVisibility: Nullable<number>;\r\n\r\n    private _renderId = 0;\r\n    private _frameId = 0;\r\n    private _executeWhenReadyTimeoutId: Nullable<ReturnType<typeof setTimeout>> = null;\r\n    /** @internal */\r\n    public _intermediateRendering = false;\r\n    private _defaultFrameBufferCleared = false;\r\n\r\n    private _viewUpdateFlag = -1;\r\n    private _projectionUpdateFlag = -1;\r\n\r\n    /** @internal */\r\n    public _toBeDisposed = new Array<Nullable<IDisposable>>(256);\r\n    private _activeRequests = new Array<IFileRequest>();\r\n\r\n    /** @internal */\r\n    public _pendingData = [] as any[];\r\n    private _isDisposed = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that all submeshes of active meshes must be rendered\r\n     * Use this boolean to avoid computing frustum clipping on submeshes (This could help when you are CPU bound)\r\n     */\r\n    public dispatchAllSubMeshesOfActiveMeshes: boolean = false;\r\n    private _activeMeshes = new SmartArray<AbstractMesh>(256);\r\n    private _processedMaterials = new SmartArray<Material>(256);\r\n    private _renderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\r\n    private _materialsRenderTargets = new SmartArrayNoDuplicate<RenderTargetTexture>(256);\r\n    /** @internal */\r\n    public _activeParticleSystems = new SmartArray<IParticleSystem>(256);\r\n    private _activeSkeletons = new SmartArrayNoDuplicate<Skeleton>(32);\r\n    private _softwareSkinnedMeshes = new SmartArrayNoDuplicate<Mesh>(32);\r\n\r\n    private _renderingManager: RenderingManager;\r\n\r\n    /**\r\n     * Gets the scene's rendering manager\r\n     */\r\n    public get renderingManager(): RenderingManager {\r\n        return this._renderingManager;\r\n    }\r\n\r\n    /** @internal */\r\n    public _activeAnimatables = new Array<Animatable>();\r\n\r\n    private _transformMatrix = Matrix.Zero();\r\n    private _sceneUbo: UniformBuffer;\r\n\r\n    /** @internal */\r\n    public _viewMatrix: Matrix;\r\n    /** @internal */\r\n    public _projectionMatrix: Matrix;\r\n    /** @internal */\r\n    public _forcedViewPosition: Nullable<Vector3>;\r\n\r\n    /** @internal */\r\n    public _frustumPlanes: Plane[];\r\n    /**\r\n     * Gets the list of frustum planes (built from the active camera)\r\n     */\r\n    public get frustumPlanes(): Plane[] {\r\n        return this._frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if lights must be sorted by priority (off by default)\r\n     * This is useful if there are more lights that the maximum simulteanous authorized\r\n     */\r\n    public requireLightSorting = false;\r\n\r\n    /** @internal */\r\n    public readonly useMaterialMeshMap: boolean;\r\n    /** @internal */\r\n    public readonly useClonedMeshMap: boolean;\r\n\r\n    private _externalData: StringDictionary<object>;\r\n    private _uid: Nullable<string>;\r\n\r\n    /**\r\n     * @internal\r\n     * Backing store of defined scene components.\r\n     */\r\n    public _components: ISceneComponent[] = [];\r\n\r\n    /**\r\n     * @internal\r\n     * Backing store of defined scene components.\r\n     */\r\n    public _serializableComponents: ISceneSerializableComponent[] = [];\r\n\r\n    /**\r\n     * List of components to register on the next registration step.\r\n     */\r\n    private _transientComponents: ISceneComponent[] = [];\r\n\r\n    /**\r\n     * Registers the transient components if needed.\r\n     */\r\n    private _registerTransientComponents(): void {\r\n        // Register components that have been associated lately to the scene.\r\n        if (this._transientComponents.length > 0) {\r\n            for (const component of this._transientComponents) {\r\n                component.register();\r\n            }\r\n            this._transientComponents.length = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Add a component to the scene.\r\n     * Note that the ccomponent could be registered on th next frame if this is called after\r\n     * the register component stage.\r\n     * @param component Defines the component to add to the scene\r\n     */\r\n    public _addComponent(component: ISceneComponent) {\r\n        this._components.push(component);\r\n        this._transientComponents.push(component);\r\n\r\n        const serializableComponent = component as any;\r\n        if (serializableComponent.addFromContainer && serializableComponent.serialize) {\r\n            this._serializableComponents.push(serializableComponent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Gets a component from the scene.\r\n     * @param name defines the name of the component to retrieve\r\n     * @returns the component or null if not present\r\n     */\r\n    public _getComponent(name: string): Nullable<ISceneComponent> {\r\n        for (const component of this._components) {\r\n            if (component.name === name) {\r\n                return component;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before camera updates.\r\n     */\r\n    public _beforeCameraUpdateStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before clear the canvas.\r\n     */\r\n    public _beforeClearStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before clear the canvas.\r\n     */\r\n    public _beforeRenderTargetClearStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions when collecting render targets for the frame.\r\n     */\r\n    public _gatherRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening for one camera in the frame.\r\n     */\r\n    public _gatherActiveCameraRenderTargetsStage = Stage.Create<RenderTargetsStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the per mesh ready checks.\r\n     */\r\n    public _isReadyForMeshStage = Stage.Create<MeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening before evaluate active mesh checks.\r\n     */\r\n    public _beforeEvaluateActiveMeshStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the evaluate sub mesh checks.\r\n     */\r\n    public _evaluateSubMeshStage = Stage.Create<EvaluateSubMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the active mesh stage.\r\n     */\r\n    public _preActiveMeshStage = Stage.Create<PreActiveMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening during the per camera render target step.\r\n     */\r\n    public _cameraDrawRenderTargetStage = Stage.Create<CameraStageFrameBufferAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before the active camera is drawing.\r\n     */\r\n    public _beforeCameraDrawStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a render target is drawing.\r\n     */\r\n    public _beforeRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a rendering group is drawing.\r\n     */\r\n    public _beforeRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just before a mesh is drawing.\r\n     */\r\n    public _beforeRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a mesh has been drawn.\r\n     */\r\n    public _afterRenderingMeshStage = Stage.Create<RenderingMeshStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a rendering group has been drawn.\r\n     */\r\n    public _afterRenderingGroupDrawStage = Stage.Create<RenderingGroupStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after the active camera has been drawn.\r\n     */\r\n    public _afterCameraDrawStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after the post processing\r\n     */\r\n    public _afterCameraPostProcessStage = Stage.Create<CameraStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after a render target has been drawn.\r\n     */\r\n    public _afterRenderTargetDrawStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * Defines the actions happening just after the post processing on a render target\r\n     */\r\n    public _afterRenderTargetPostProcessStage = Stage.Create<RenderTargetStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening just after rendering all cameras and computing intersections.\r\n     */\r\n    public _afterRenderStage = Stage.Create<SimpleStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer move event happens.\r\n     */\r\n    public _pointerMoveStage = Stage.Create<PointerMoveStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer down event happens.\r\n     */\r\n    public _pointerDownStage = Stage.Create<PointerUpDownStageAction>();\r\n    /**\r\n     * @internal\r\n     * Defines the actions happening when a pointer up event happens.\r\n     */\r\n    public _pointerUpStage = Stage.Create<PointerUpDownStageAction>();\r\n\r\n    /**\r\n     * an optional map from Geometry Id to Geometry index in the 'geometries' array\r\n     */\r\n    private _geometriesByUniqueId: Nullable<{ [uniqueId: string]: number | undefined }> = null;\r\n\r\n    private _uniqueId = 0;\r\n\r\n    /**\r\n     * Gets the unique id of the scene\r\n     */\r\n    public get uniqueId() {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Scene\r\n     * @param engine defines the engine to use to render this scene\r\n     * @param options defines the scene options\r\n     */\r\n    constructor(engine: AbstractEngine, options?: SceneOptions) {\r\n        this.activeCameras = [] as Camera[];\r\n\r\n        this._uniqueId = this.getUniqueId();\r\n\r\n        const fullOptions = {\r\n            useGeometryUniqueIdsMap: true,\r\n            useMaterialMeshMap: true,\r\n            useClonedMeshMap: true,\r\n            virtual: false,\r\n            ...options,\r\n        };\r\n\r\n        engine = this._engine = engine || EngineStore.LastCreatedEngine;\r\n        if (fullOptions.virtual) {\r\n            engine._virtualScenes.push(this);\r\n        } else {\r\n            EngineStore._LastCreatedScene = this;\r\n            engine.scenes.push(this);\r\n        }\r\n\r\n        if (options?.floatingOriginMode) {\r\n            engine.getCreationOptions().useHighPrecisionMatrix = true;\r\n            OverrideMatrixFunctions(this);\r\n            this._floatingOriginMode = true;\r\n        }\r\n\r\n        this._uid = null;\r\n\r\n        this._renderingManager = new RenderingManager(this);\r\n\r\n        if (PostProcessManager) {\r\n            this.postProcessManager = new PostProcessManager(this);\r\n        }\r\n\r\n        if (IsWindowObjectExist()) {\r\n            this.attachControl();\r\n        }\r\n\r\n        // Uniform Buffer\r\n        this._createUbo();\r\n\r\n        // Default Image processing definition\r\n        if (ImageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n        }\r\n\r\n        this.setDefaultCandidateProviders();\r\n\r\n        if (fullOptions.useGeometryUniqueIdsMap) {\r\n            this._geometriesByUniqueId = {};\r\n        }\r\n\r\n        this.useMaterialMeshMap = fullOptions.useMaterialMeshMap;\r\n        this.useClonedMeshMap = fullOptions.useClonedMeshMap;\r\n\r\n        if (!options || !options.virtual) {\r\n            engine.onNewSceneAddedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"Scene\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"Scene\";\r\n    }\r\n\r\n    private _defaultMeshCandidates: ISmartArrayLike<AbstractMesh> = {\r\n        data: [],\r\n        length: 0,\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDefaultMeshCandidates(): ISmartArrayLike<AbstractMesh> {\r\n        this._defaultMeshCandidates.data = this.meshes;\r\n        this._defaultMeshCandidates.length = this.meshes.length;\r\n        return this._defaultMeshCandidates;\r\n    }\r\n\r\n    private _defaultSubMeshCandidates: ISmartArrayLike<SubMesh> = {\r\n        data: [],\r\n        length: 0,\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getDefaultSubMeshCandidates(mesh: AbstractMesh): ISmartArrayLike<SubMesh> {\r\n        this._defaultSubMeshCandidates.data = mesh.subMeshes;\r\n        this._defaultSubMeshCandidates.length = mesh.subMeshes.length;\r\n        return this._defaultSubMeshCandidates;\r\n    }\r\n\r\n    /**\r\n     * Sets the default candidate providers for the scene.\r\n     * This sets the getActiveMeshCandidates, getActiveSubMeshCandidates, getIntersectingSubMeshCandidates\r\n     * and getCollidingSubMeshCandidates to their default function\r\n     */\r\n    public setDefaultCandidateProviders(): void {\r\n        this.getActiveMeshCandidates = () => this._getDefaultMeshCandidates();\r\n        this.getActiveSubMeshCandidates = (mesh: AbstractMesh) => this._getDefaultSubMeshCandidates(mesh);\r\n        this.getIntersectingSubMeshCandidates = (mesh: AbstractMesh, localRay: Ray) => this._getDefaultSubMeshCandidates(mesh);\r\n        this.getCollidingSubMeshCandidates = (mesh: AbstractMesh, collider: Collider) => this._getDefaultSubMeshCandidates(mesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh that is currently under the pointer\r\n     */\r\n    public get meshUnderPointer(): Nullable<AbstractMesh> {\r\n        return this._inputManager.meshUnderPointer;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen X position of the pointer\r\n     */\r\n    public get pointerX(): number {\r\n        return this._inputManager.pointerX;\r\n    }\r\n\r\n    public set pointerX(value: number) {\r\n        this._inputManager.pointerX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current on-screen Y position of the pointer\r\n     */\r\n    public get pointerY(): number {\r\n        return this._inputManager.pointerY;\r\n    }\r\n\r\n    public set pointerY(value: number) {\r\n        this._inputManager.pointerY = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached material (ie. the latest rendered one)\r\n     * @returns the cached material\r\n     */\r\n    public getCachedMaterial(): Nullable<Material> {\r\n        return this._cachedMaterial;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached effect (ie. the latest rendered one)\r\n     * @returns the cached effect\r\n     */\r\n    public getCachedEffect(): Nullable<Effect> {\r\n        return this._cachedEffect;\r\n    }\r\n\r\n    /**\r\n     * Gets the cached visibility state (ie. the latest rendered one)\r\n     * @returns the cached visibility state\r\n     */\r\n    public getCachedVisibility(): Nullable<number> {\r\n        return this._cachedVisibility;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current material / effect / visibility must be bind again\r\n     * @param material defines the current material\r\n     * @param effect defines the current effect\r\n     * @param visibility defines the current visibility state\r\n     * @returns true if one parameter is not cached\r\n     */\r\n    public isCachedMaterialInvalid(material: Material, effect: Effect, visibility: number = 1) {\r\n        return this._cachedEffect !== effect || this._cachedMaterial !== material || this._cachedVisibility !== visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets the engine associated with the scene\r\n     * @returns an Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of vertices rendered per frame\r\n     * @returns the total number of vertices rendered per frame\r\n     */\r\n    public getTotalVertices(): number {\r\n        return this._totalVertices.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for total vertices\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get totalVerticesPerfCounter(): PerfCounter {\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active indices rendered per frame (You can deduce the number of rendered triangles by dividing this number by 3)\r\n     * @returns the total number of active indices rendered per frame\r\n     */\r\n    public getActiveIndices(): number {\r\n        return this._activeIndices.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active indices\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get totalActiveIndicesPerfCounter(): PerfCounter {\r\n        return this._activeIndices;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active particles rendered per frame\r\n     * @returns the total number of active particles rendered per frame\r\n     */\r\n    public getActiveParticles(): number {\r\n        return this._activeParticles.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active particles\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get activeParticlesPerfCounter(): PerfCounter {\r\n        return this._activeParticles;\r\n    }\r\n\r\n    /**\r\n     * Gets the total number of active bones rendered per frame\r\n     * @returns the total number of active bones rendered per frame\r\n     */\r\n    public getActiveBones(): number {\r\n        return this._activeBones.current;\r\n    }\r\n\r\n    /**\r\n     * Gets the performance counter for active bones\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#instrumentation\r\n     */\r\n    public get activeBonesPerfCounter(): PerfCounter {\r\n        return this._activeBones;\r\n    }\r\n\r\n    /**\r\n     * Gets the array of active meshes\r\n     * @returns an array of AbstractMesh\r\n     */\r\n    public getActiveMeshes(): SmartArray<AbstractMesh> {\r\n        return this._activeMeshes;\r\n    }\r\n\r\n    /**\r\n     * Gets the animation ratio (which is 1.0 is the scene renders at 60fps and 2 if the scene renders at 30fps, etc.)\r\n     * @returns a number\r\n     */\r\n    public getAnimationRatio(): number {\r\n        return this._animationRatio !== undefined ? this._animationRatio : 1;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique Id for the current render phase\r\n     * @returns a number\r\n     */\r\n    public getRenderId(): number {\r\n        return this._renderId;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique Id for the current frame\r\n     * @returns a number\r\n     */\r\n    public getFrameId(): number {\r\n        return this._frameId;\r\n    }\r\n\r\n    /** Call this function if you want to manually increment the render Id*/\r\n    public incrementRenderId(): void {\r\n        this._renderId++;\r\n    }\r\n\r\n    private _createUbo(): void {\r\n        this.setSceneUniformBuffer(this.createSceneUniformBuffer());\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer move on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerMove(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\r\n        this._inputManager.simulatePointerMove(pickResult, pointerEventInit);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer down on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerDown(pickResult: PickingInfo, pointerEventInit?: PointerEventInit): Scene {\r\n        this._inputManager.simulatePointerDown(pickResult, pointerEventInit);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this method to simulate a pointer up on a mesh\r\n     * The pickResult parameter can be obtained from a scene.pick or scene.pickWithRay\r\n     * @param pickResult pickingInfo of the object wished to simulate pointer event on\r\n     * @param pointerEventInit pointer event state to be used when simulating the pointer event (eg. pointer id for multitouch)\r\n     * @param doubleTap indicates that the pointer up event should be considered as part of a double click (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public simulatePointerUp(pickResult: PickingInfo, pointerEventInit?: PointerEventInit, doubleTap?: boolean): Scene {\r\n        this._inputManager.simulatePointerUp(pickResult, pointerEventInit, doubleTap);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current pointer event is captured (meaning that the scene has already handled the pointer down)\r\n     * @param pointerId defines the pointer id to use in a multi-touch scenario (0 by default)\r\n     * @returns true if the pointer was captured\r\n     */\r\n    public isPointerCaptured(pointerId = 0): boolean {\r\n        return this._inputManager.isPointerCaptured(pointerId);\r\n    }\r\n\r\n    /**\r\n     * Attach events to the canvas (To handle actionManagers triggers and raise onPointerMove, onPointerDown and onPointerUp\r\n     * @param attachUp defines if you want to attach events to pointerup\r\n     * @param attachDown defines if you want to attach events to pointerdown\r\n     * @param attachMove defines if you want to attach events to pointermove\r\n     */\r\n    public attachControl(attachUp = true, attachDown = true, attachMove = true): void {\r\n        this._inputManager.attachControl(attachUp, attachDown, attachMove);\r\n    }\r\n\r\n    /** Detaches all event handlers*/\r\n    public detachControl() {\r\n        this._inputManager.detachControl();\r\n    }\r\n\r\n    /**\r\n     * This function will check if the scene can be rendered (textures are loaded, shaders are compiled)\r\n     * Delay loaded resources are not taking in account\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: true)\r\n     * @returns true if all required resources are ready\r\n     */\r\n    public isReady(checkRenderTargets = true): boolean {\r\n        if (this._isDisposed) {\r\n            return false;\r\n        }\r\n\r\n        let index: number;\r\n        const engine = this.getEngine();\r\n\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        engine.currentRenderPassId = this.activeCamera?.renderPassId ?? currentRenderPassId;\r\n\r\n        let isReady = true;\r\n\r\n        // Pending data\r\n        if (this._pendingData.length > 0) {\r\n            isReady = false;\r\n        }\r\n\r\n        // Ensures that the pre-pass renderer is enabled if it is to be enabled.\r\n        this.prePassRenderer?.update();\r\n\r\n        // OIT\r\n        if (this.useOrderIndependentTransparency && this.depthPeelingRenderer) {\r\n            isReady &&= this.depthPeelingRenderer.isReady();\r\n        }\r\n\r\n        // Meshes\r\n        if (checkRenderTargets) {\r\n            this._processedMaterials.reset();\r\n            this._materialsRenderTargets.reset();\r\n        }\r\n\r\n        for (index = 0; index < this.meshes.length; index++) {\r\n            const mesh = this.meshes[index];\r\n\r\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            // Do not stop at the first encountered \"unready\" object as we want to ensure\r\n            // all materials are starting off their compilation in parallel.\r\n            if (!mesh.isReady(true)) {\r\n                isReady = false;\r\n                continue;\r\n            }\r\n\r\n            const hardwareInstancedRendering =\r\n                mesh.hasThinInstances ||\r\n                mesh.getClassName() === \"InstancedMesh\" ||\r\n                mesh.getClassName() === \"InstancedLinesMesh\" ||\r\n                (engine.getCaps().instancedArrays && (<Mesh>mesh).instances.length > 0);\r\n            // Is Ready For Mesh\r\n            for (const step of this._isReadyForMeshStage) {\r\n                if (!step.action(mesh, hardwareInstancedRendering)) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n\r\n            if (!checkRenderTargets) {\r\n                continue;\r\n            }\r\n\r\n            const mat = mesh.material || this.defaultMaterial;\r\n            if (mat) {\r\n                if (mat._storeEffectOnSubMeshes) {\r\n                    for (const subMesh of mesh.subMeshes) {\r\n                        const material = subMesh.getMaterial();\r\n                        if (material && material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\r\n                            if (this._processedMaterials.indexOf(material) === -1) {\r\n                                this._processedMaterials.push(material);\r\n\r\n                                this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (mat.hasRenderTargetTextures && mat.getRenderTargetTextures != null) {\r\n                        if (this._processedMaterials.indexOf(mat) === -1) {\r\n                            this._processedMaterials.push(mat);\r\n\r\n                            this._materialsRenderTargets.concatWithNoDuplicate(mat.getRenderTargetTextures());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render targets\r\n        if (checkRenderTargets) {\r\n            for (index = 0; index < this._materialsRenderTargets.length; ++index) {\r\n                const rtt = this._materialsRenderTargets.data[index];\r\n                if (!rtt.isReadyForRendering()) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Geometries\r\n        for (index = 0; index < this.geometries.length; index++) {\r\n            const geometry = this.geometries[index];\r\n\r\n            if (geometry.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Post-processes\r\n        if (this.activeCameras && this.activeCameras.length > 0) {\r\n            for (const camera of this.activeCameras) {\r\n                if (!camera.isReady(true)) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        } else if (this.activeCamera) {\r\n            if (!this.activeCamera.isReady(true)) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Particles\r\n        for (const particleSystem of this.particleSystems) {\r\n            if (!particleSystem.isReady()) {\r\n                isReady = false;\r\n            }\r\n        }\r\n\r\n        // Layers\r\n        if (this.layers) {\r\n            for (const layer of this.layers) {\r\n                if (!layer.isReady()) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Effect layers\r\n        if (this.effectLayers) {\r\n            for (const effectLayer of this.effectLayers) {\r\n                if (!effectLayer.isLayerReady()) {\r\n                    isReady = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Effects\r\n        if (!engine.areAllEffectsReady()) {\r\n            isReady = false;\r\n        }\r\n\r\n        engine.currentRenderPassId = currentRenderPassId;\r\n\r\n        return isReady;\r\n    }\r\n\r\n    /** Resets all cached information relative to material (including effect and visibility) */\r\n    public resetCachedMaterial(): void {\r\n        this._cachedMaterial = null;\r\n        this._cachedEffect = null;\r\n        this._cachedVisibility = null;\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be called before every frame render\r\n     * @param func defines the function to register\r\n     */\r\n    public registerBeforeRender(func: () => void): void {\r\n        this.onBeforeRenderObservable.add(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function called before every frame render\r\n     * @param func defines the function to unregister\r\n     */\r\n    public unregisterBeforeRender(func: () => void): void {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be called after every frame render\r\n     * @param func defines the function to register\r\n     */\r\n    public registerAfterRender(func: () => void): void {\r\n        this.onAfterRenderObservable.add(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function called after every frame render\r\n     * @param func defines the function to unregister\r\n     */\r\n    public unregisterAfterRender(func: () => void): void {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n    }\r\n\r\n    private _executeOnceBeforeRender(func: () => void): void {\r\n        const execFunc = () => {\r\n            func();\r\n            setTimeout(() => {\r\n                this.unregisterBeforeRender(execFunc);\r\n            });\r\n        };\r\n        this.registerBeforeRender(execFunc);\r\n    }\r\n\r\n    /**\r\n     * The provided function will run before render once and will be disposed afterwards.\r\n     * A timeout delay can be provided so that the function will be executed in N ms.\r\n     * The timeout is using the browser's native setTimeout so time percision cannot be guaranteed.\r\n     * @param func The function to be executed.\r\n     * @param timeout optional delay in ms\r\n     */\r\n    public executeOnceBeforeRender(func: () => void, timeout?: number): void {\r\n        if (timeout !== undefined) {\r\n            setTimeout(() => {\r\n                this._executeOnceBeforeRender(func);\r\n            }, timeout);\r\n        } else {\r\n            this._executeOnceBeforeRender(func);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function can help adding any object to the list of data awaited to be ready in order to check for a complete scene loading.\r\n     * @param data defines the object to wait for\r\n     */\r\n    public addPendingData(data: any): void {\r\n        this._pendingData.push(data);\r\n    }\r\n\r\n    /**\r\n     * Remove a pending data from the loading list which has previously been added with addPendingData.\r\n     * @param data defines the object to remove from the pending list\r\n     */\r\n    public removePendingData(data: any): void {\r\n        const wasLoading = this.isLoading;\r\n        const index = this._pendingData.indexOf(data);\r\n\r\n        if (index !== -1) {\r\n            this._pendingData.splice(index, 1);\r\n        }\r\n\r\n        if (wasLoading && !this.isLoading) {\r\n            this.onDataLoadedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the number of items waiting to be loaded\r\n     * @returns the number of items waiting to be loaded\r\n     */\r\n    public getWaitingItemsCount(): number {\r\n        return this._pendingData.length;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean indicating if the scene is still loading data\r\n     */\r\n    public get isLoading(): boolean {\r\n        return this._pendingData.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Registers a function to be executed when the scene is ready\r\n     * @param func - the function to be executed\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\r\n     */\r\n    public executeWhenReady(func: () => void, checkRenderTargets = false): void {\r\n        this.onReadyObservable.addOnce(func);\r\n\r\n        if (this._executeWhenReadyTimeoutId !== null) {\r\n            return;\r\n        }\r\n\r\n        this._checkIsReady(checkRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when the scene is ready\r\n     * @param checkRenderTargets true to also check that the meshes rendered as part of a render target are ready (default: false)\r\n     * @returns A promise that resolves when the scene is ready\r\n     */\r\n    public async whenReadyAsync(checkRenderTargets = false): Promise<void> {\r\n        return await new Promise((resolve) => {\r\n            this.executeWhenReady(() => {\r\n                resolve();\r\n            }, checkRenderTargets);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkIsReady(checkRenderTargets = false) {\r\n        this._registerTransientComponents();\r\n\r\n        if (this.isReady(checkRenderTargets)) {\r\n            this.onReadyObservable.notifyObservers(this);\r\n\r\n            this.onReadyObservable.clear();\r\n            this._executeWhenReadyTimeoutId = null;\r\n            return;\r\n        }\r\n\r\n        if (this._isDisposed) {\r\n            this.onReadyObservable.clear();\r\n            this._executeWhenReadyTimeoutId = null;\r\n            return;\r\n        }\r\n\r\n        this._executeWhenReadyTimeoutId = setTimeout(() => {\r\n            // Ensure materials effects are checked outside render loops\r\n            this.incrementRenderId();\r\n            this._checkIsReady(checkRenderTargets);\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Gets all animatable attached to the scene\r\n     */\r\n    public get animatables(): Animatable[] {\r\n        return this._activeAnimatables;\r\n    }\r\n\r\n    /**\r\n     * Resets the last animation time frame.\r\n     * Useful to override when animations start running when loading a scene for the first time.\r\n     */\r\n    public resetLastAnimationTimeFrame(): void {\r\n        this._animationTimeLast = PrecisionDate.Now;\r\n    }\r\n\r\n    // Matrix\r\n\r\n    /**\r\n     * Gets the current view matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getViewMatrix(): Matrix {\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the current projection matrix\r\n     * @returns a Matrix\r\n     */\r\n    public getProjectionMatrix(): Matrix {\r\n        return this._projectionMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets the current transform matrix\r\n     * @returns a Matrix made of View * Projection\r\n     */\r\n    public getTransformMatrix(): Matrix {\r\n        return this._transformMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sets the current transform matrix\r\n     * @param viewL defines the View matrix to use\r\n     * @param projectionL defines the Projection matrix to use\r\n     * @param viewR defines the right View matrix to use (if provided)\r\n     * @param projectionR defines the right Projection matrix to use (if provided)\r\n     */\r\n    public setTransformMatrix(viewL: Matrix, projectionL: Matrix, viewR?: Matrix, projectionR?: Matrix): void {\r\n        // clear the multiviewSceneUbo if no viewR and projectionR are defined\r\n        if (!viewR && !projectionR && this._multiviewSceneUbo) {\r\n            this._multiviewSceneUbo.dispose();\r\n            this._multiviewSceneUbo = null;\r\n        }\r\n        if (this._viewUpdateFlag === viewL.updateFlag && this._projectionUpdateFlag === projectionL.updateFlag) {\r\n            return;\r\n        }\r\n\r\n        this._viewUpdateFlag = viewL.updateFlag;\r\n        this._projectionUpdateFlag = projectionL.updateFlag;\r\n        this._viewMatrix = viewL;\r\n        this._projectionMatrix = projectionL;\r\n\r\n        this._viewMatrix.multiplyToRef(this._projectionMatrix, this._transformMatrix);\r\n\r\n        // Update frustum\r\n        if (!this._frustumPlanes) {\r\n            this._frustumPlanes = Frustum.GetPlanes(this._transformMatrix);\r\n        } else {\r\n            Frustum.GetPlanesToRef(this._transformMatrix, this._frustumPlanes);\r\n        }\r\n\r\n        if (this._multiviewSceneUbo && this._multiviewSceneUbo.useUbo) {\r\n            this._updateMultiviewUbo(viewR, projectionR);\r\n        } else if (this._sceneUbo.useUbo) {\r\n            this._sceneUbo.updateMatrix(\"viewProjection\", this._transformMatrix);\r\n            this._sceneUbo.updateMatrix(\"view\", this._viewMatrix);\r\n            this._sceneUbo.updateMatrix(\"projection\", this._projectionMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the uniform buffer used to store scene data\r\n     * @returns a UniformBuffer\r\n     */\r\n    public getSceneUniformBuffer(): UniformBuffer {\r\n        return this._multiviewSceneUbo ? this._multiviewSceneUbo : this._sceneUbo;\r\n    }\r\n\r\n    /**\r\n     * Creates a scene UBO\r\n     * @param name name of the uniform buffer (optional, for debugging purpose only)\r\n     * @param trackUBOsInFrame define if the UBOs should be tracked in the frame (default: undefined - will use the value from Engine._features.trackUbosInFrame)\r\n     * @returns a new ubo\r\n     */\r\n    public createSceneUniformBuffer(name?: string, trackUBOsInFrame?: boolean): UniformBuffer {\r\n        const sceneUbo = new UniformBuffer(this._engine, undefined, false, name ?? \"scene\", undefined, trackUBOsInFrame);\r\n        sceneUbo.addUniform(\"viewProjection\", 16);\r\n        sceneUbo.addUniform(\"view\", 16);\r\n        sceneUbo.addUniform(\"projection\", 16);\r\n        sceneUbo.addUniform(\"vEyePosition\", 4);\r\n\r\n        return sceneUbo;\r\n    }\r\n\r\n    /**\r\n     * Sets the scene ubo\r\n     * @param ubo the ubo to set for the scene\r\n     */\r\n    public setSceneUniformBuffer(ubo: UniformBuffer): void {\r\n        this._sceneUbo = ubo;\r\n        this._viewUpdateFlag = -1;\r\n        this._projectionUpdateFlag = -1;\r\n    }\r\n\r\n    private _floatingOriginMode: boolean = false;\r\n    /**\r\n     * @experimental\r\n     * When true, enables floatingOriginMode which helps avoid floating point imprecision when using huge coordinate system by\r\n     * 1. Forcing the engine to use doublePrecision mode\r\n     * 2. Offsetting uniform values before passing to shader so that camera is centered at origin and world is offset by camera position\r\n     */\r\n    public get floatingOriginMode(): boolean {\r\n        return this._floatingOriginMode;\r\n    }\r\n\r\n    private _floatingOriginOffsetDefault: Vector3 = Vector3.Zero();\r\n    /**\r\n     * @experimental\r\n     * When floatingOriginMode is enabled, offset is equal to the active camera position in world space. If no active camera or floatingOriginMode is disabled, offset is 0.\r\n     */\r\n    public get floatingOriginOffset(): Vector3 {\r\n        return this.floatingOriginMode && this.activeCamera ? this.activeCamera.getWorldMatrix().getTranslation() : this._floatingOriginOffsetDefault;\r\n    }\r\n\r\n    /**\r\n     * Gets an unique (relatively to the current scene) Id\r\n     * @returns an unique number for the scene\r\n     */\r\n    public getUniqueId() {\r\n        return UniqueIdGenerator.UniqueId;\r\n    }\r\n\r\n    /**\r\n     * Add a mesh to the list of scene's meshes\r\n     * @param newMesh defines the mesh to add\r\n     * @param recursive if all child meshes should also be added to the scene\r\n     */\r\n    public addMesh(newMesh: AbstractMesh, recursive = false) {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        this.meshes.push(newMesh);\r\n\r\n        newMesh._resyncLightSources();\r\n\r\n        if (!newMesh.parent) {\r\n            newMesh._addToSceneRootNodes();\r\n        }\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMeshAddedObservable.notifyObservers(newMesh);\r\n        });\r\n\r\n        if (recursive) {\r\n            const children = newMesh.getChildMeshes();\r\n\r\n            for (const m of children) {\r\n                this.addMesh(m);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh for the list of scene's meshes\r\n     * @param toRemove defines the mesh to remove\r\n     * @param recursive if all child meshes should also be removed from the scene\r\n     * @returns the index where the mesh was in the mesh list\r\n     */\r\n    public removeMesh(toRemove: AbstractMesh, recursive = false): number {\r\n        const index = this.meshes.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if the mesh found\r\n\r\n            this.meshes.splice(index, 1);\r\n\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        this._inputManager._invalidateMesh(toRemove);\r\n\r\n        this.onMeshRemovedObservable.notifyObservers(toRemove);\r\n        if (recursive) {\r\n            const children = toRemove.getChildMeshes();\r\n            for (const m of children) {\r\n                this.removeMesh(m);\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Add a transform node to the list of scene's transform nodes\r\n     * @param newTransformNode defines the transform node to add\r\n     */\r\n    public addTransformNode(newTransformNode: TransformNode) {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (newTransformNode.getScene() === this && newTransformNode._indexInSceneTransformNodesArray !== -1) {\r\n            // Already there?\r\n            return;\r\n        }\r\n\r\n        newTransformNode._indexInSceneTransformNodesArray = this.transformNodes.length;\r\n        this.transformNodes.push(newTransformNode);\r\n\r\n        if (!newTransformNode.parent) {\r\n            newTransformNode._addToSceneRootNodes();\r\n        }\r\n\r\n        this.onNewTransformNodeAddedObservable.notifyObservers(newTransformNode);\r\n    }\r\n\r\n    /**\r\n     * Remove a transform node for the list of scene's transform nodes\r\n     * @param toRemove defines the transform node to remove\r\n     * @returns the index where the transform node was in the transform node list\r\n     */\r\n    public removeTransformNode(toRemove: TransformNode): number {\r\n        const index = toRemove._indexInSceneTransformNodesArray;\r\n        if (index !== -1) {\r\n            if (index !== this.transformNodes.length - 1) {\r\n                const lastNode = this.transformNodes[this.transformNodes.length - 1];\r\n                this.transformNodes[index] = lastNode;\r\n                lastNode._indexInSceneTransformNodesArray = index;\r\n            }\r\n\r\n            toRemove._indexInSceneTransformNodesArray = -1;\r\n            this.transformNodes.pop();\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n\r\n        this.onTransformNodeRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a skeleton for the list of scene's skeletons\r\n     * @param toRemove defines the skeleton to remove\r\n     * @returns the index where the skeleton was in the skeleton list\r\n     */\r\n    public removeSkeleton(toRemove: Skeleton): number {\r\n        const index = this.skeletons.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if found\r\n            this.skeletons.splice(index, 1);\r\n            this.onSkeletonRemovedObservable.notifyObservers(toRemove);\r\n\r\n            // Clean active container\r\n            this._executeActiveContainerCleanup(this._activeSkeletons);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a morph target for the list of scene's morph targets\r\n     * @param toRemove defines the morph target to remove\r\n     * @returns the index where the morph target was in the morph target list\r\n     */\r\n    public removeMorphTargetManager(toRemove: MorphTargetManager): number {\r\n        const index = this.morphTargetManagers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if found\r\n            this.morphTargetManagers.splice(index, 1);\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a light for the list of scene's lights\r\n     * @param toRemove defines the light to remove\r\n     * @returns the index where the light was in the light list\r\n     */\r\n    public removeLight(toRemove: Light): number {\r\n        const index = this.lights.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from meshes\r\n            for (const mesh of this.meshes) {\r\n                mesh._removeLightSource(toRemove, false);\r\n            }\r\n\r\n            // Remove from the scene if mesh found\r\n            this.lights.splice(index, 1);\r\n            this.sortLightsByPriority();\r\n\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n        this.onLightRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a camera for the list of scene's cameras\r\n     * @param toRemove defines the camera to remove\r\n     * @returns the index where the camera was in the camera list\r\n     */\r\n    public removeCamera(toRemove: Camera): number {\r\n        const index = this.cameras.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            // Remove from the scene if mesh found\r\n            this.cameras.splice(index, 1);\r\n            if (!toRemove.parent) {\r\n                toRemove._removeFromSceneRootNodes();\r\n            }\r\n        }\r\n        // Remove from activeCameras\r\n        if (this.activeCameras) {\r\n            const index2 = this.activeCameras.indexOf(toRemove);\r\n            if (index2 !== -1) {\r\n                // Remove from the scene if mesh found\r\n                this.activeCameras.splice(index2, 1);\r\n            }\r\n        }\r\n        // Reset the activeCamera\r\n        if (this.activeCamera === toRemove) {\r\n            if (this.cameras.length > 0) {\r\n                this.activeCamera = this.cameras[0];\r\n            } else {\r\n                this.activeCamera = null;\r\n            }\r\n        }\r\n        this.onCameraRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a particle system for the list of scene's particle systems\r\n     * @param toRemove defines the particle system to remove\r\n     * @returns the index where the particle system was in the particle system list\r\n     */\r\n    public removeParticleSystem(toRemove: IParticleSystem): number {\r\n        const index = this.particleSystems.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.particleSystems.splice(index, 1);\r\n\r\n            // Clean active container\r\n            this._executeActiveContainerCleanup(this._activeParticleSystems);\r\n        }\r\n        this.onParticleSystemRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Remove a animation for the list of scene's animations\r\n     * @param toRemove defines the animation to remove\r\n     * @returns the index where the animation was in the animation list\r\n     */\r\n    public removeAnimation(toRemove: Animation): number {\r\n        const index = this.animations.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.animations.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Will stop the animation of the given target\r\n     * @param target - the target\r\n     * @param animationName - the name of the animation to stop (all animations will be stopped if both this and targetMask are empty)\r\n     * @param targetMask - a function that determines if the animation should be stopped based on its target (all animations will be stopped if both this and animationName are empty)\r\n     */\r\n    public stopAnimation(target: any, animationName?: string, targetMask?: (target: any) => boolean): void {\r\n        // Do nothing as code will be provided by animation component\r\n    }\r\n\r\n    /**\r\n     * Removes the given animation group from this scene.\r\n     * @param toRemove The animation group to remove\r\n     * @returns The index of the removed animation group\r\n     */\r\n    public removeAnimationGroup(toRemove: AnimationGroup): number {\r\n        const index = this.animationGroups.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.animationGroups.splice(index, 1);\r\n        }\r\n        this.onAnimationGroupRemovedObservable.notifyObservers(toRemove);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given multi-material from this scene.\r\n     * @param toRemove The multi-material to remove\r\n     * @returns The index of the removed multi-material\r\n     */\r\n    public removeMultiMaterial(toRemove: MultiMaterial): number {\r\n        const index = this.multiMaterials.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        this.onMultiMaterialRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given material from this scene.\r\n     * @param toRemove The material to remove\r\n     * @returns The index of the removed material\r\n     */\r\n    public removeMaterial(toRemove: Material): number {\r\n        const index = toRemove._indexInSceneMaterialArray;\r\n        if (index !== -1 && index < this.materials.length) {\r\n            if (index !== this.materials.length - 1) {\r\n                const lastMaterial = this.materials[this.materials.length - 1];\r\n                this.materials[index] = lastMaterial;\r\n                lastMaterial._indexInSceneMaterialArray = index;\r\n            }\r\n\r\n            toRemove._indexInSceneMaterialArray = -1;\r\n            this.materials.pop();\r\n        }\r\n\r\n        this.onMaterialRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given action manager from this scene.\r\n     * @deprecated\r\n     * @param toRemove The action manager to remove\r\n     * @returns The index of the removed action manager\r\n     */\r\n    public removeActionManager(toRemove: AbstractActionManager): number {\r\n        const index = this.actionManagers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.actionManagers.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given texture from this scene.\r\n     * @param toRemove The texture to remove\r\n     * @returns The index of the removed texture\r\n     */\r\n    public removeTexture(toRemove: BaseTexture): number {\r\n        const index = this.textures.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.textures.splice(index, 1);\r\n        }\r\n        this.onTextureRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given frame graph from this scene.\r\n     * @param toRemove The frame graph to remove\r\n     * @returns The index of the removed frame graph\r\n     */\r\n    public removeFrameGraph(toRemove: FrameGraph): number {\r\n        const index = this.frameGraphs.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.frameGraphs.splice(index, 1);\r\n        }\r\n        this.onFrameGraphRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given object renderer from this scene.\r\n     * @param toRemove The object renderer to remove\r\n     * @returns The index of the removed object renderer\r\n     */\r\n    public removeObjectRenderer(toRemove: ObjectRenderer): number {\r\n        const index = this.objectRenderers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.objectRenderers.splice(index, 1);\r\n        }\r\n        this.onObjectRendererRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given post-process from this scene.\r\n     * @param toRemove The post-process to remove\r\n     * @returns The index of the removed post-process\r\n     */\r\n    public removePostProcess(toRemove: PostProcess): number {\r\n        const index = this.postProcesses.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.postProcesses.splice(index, 1);\r\n        }\r\n        this.onPostProcessRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Removes the given layer from this scene.\r\n     * @param toRemove The layer to remove\r\n     * @returns The index of the removed layer\r\n     */\r\n    public removeEffectLayer(toRemove: EffectLayer): number {\r\n        const index = this.effectLayers.indexOf(toRemove);\r\n        if (index !== -1) {\r\n            this.effectLayers.splice(index, 1);\r\n        }\r\n        this.onEffectLayerRemovedObservable.notifyObservers(toRemove);\r\n\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * Adds the given light to this scene\r\n     * @param newLight The light to add\r\n     */\r\n    public addLight(newLight: Light): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.lights.push(newLight);\r\n        this.sortLightsByPriority();\r\n\r\n        if (!newLight.parent) {\r\n            newLight._addToSceneRootNodes();\r\n        }\r\n\r\n        // Add light to all meshes (To support if the light is removed and then re-added)\r\n        for (const mesh of this.meshes) {\r\n            if (mesh.lightSources.indexOf(newLight) === -1) {\r\n                mesh.lightSources.push(newLight);\r\n                mesh._resyncLightSources();\r\n            }\r\n        }\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewLightAddedObservable.notifyObservers(newLight);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sorts the list list based on light priorities\r\n     */\r\n    public sortLightsByPriority(): void {\r\n        if (this.requireLightSorting) {\r\n            this.lights.sort(LightConstants.CompareLightsPriority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given camera to this scene\r\n     * @param newCamera The camera to add\r\n     */\r\n    public addCamera(newCamera: Camera): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        this.cameras.push(newCamera);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewCameraAddedObservable.notifyObservers(newCamera);\r\n        });\r\n\r\n        if (!newCamera.parent) {\r\n            newCamera._addToSceneRootNodes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given skeleton to this scene\r\n     * @param newSkeleton The skeleton to add\r\n     */\r\n    public addSkeleton(newSkeleton: Skeleton): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.skeletons.push(newSkeleton);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewSkeletonAddedObservable.notifyObservers(newSkeleton);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given particle system to this scene\r\n     * @param newParticleSystem The particle system to add\r\n     */\r\n    public addParticleSystem(newParticleSystem: IParticleSystem): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.particleSystems.push(newParticleSystem);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewParticleSystemAddedObservable.notifyObservers(newParticleSystem);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given animation to this scene\r\n     * @param newAnimation The animation to add\r\n     */\r\n    public addAnimation(newAnimation: Animation): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.animations.push(newAnimation);\r\n    }\r\n\r\n    /**\r\n     * Adds the given animation group to this scene.\r\n     * @param newAnimationGroup The animation group to add\r\n     */\r\n    public addAnimationGroup(newAnimationGroup: AnimationGroup): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.animationGroups.push(newAnimationGroup);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewAnimationGroupAddedObservable.notifyObservers(newAnimationGroup);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given multi-material to this scene\r\n     * @param newMultiMaterial The multi-material to add\r\n     */\r\n    public addMultiMaterial(newMultiMaterial: MultiMaterial): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.multiMaterials.push(newMultiMaterial);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMultiMaterialAddedObservable.notifyObservers(newMultiMaterial);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given material to this scene\r\n     * @param newMaterial The material to add\r\n     */\r\n    public addMaterial(newMaterial: Material): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (newMaterial.getScene() === this && newMaterial._indexInSceneMaterialArray !== -1) {\r\n            // Already there??\r\n            return;\r\n        }\r\n\r\n        newMaterial._indexInSceneMaterialArray = this.materials.length;\r\n        this.materials.push(newMaterial);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewMaterialAddedObservable.notifyObservers(newMaterial);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given morph target to this scene\r\n     * @param newMorphTargetManager The morph target to add\r\n     */\r\n    public addMorphTargetManager(newMorphTargetManager: MorphTargetManager): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.morphTargetManagers.push(newMorphTargetManager);\r\n    }\r\n\r\n    /**\r\n     * Adds the given geometry to this scene\r\n     * @param newGeometry The geometry to add\r\n     */\r\n    public addGeometry(newGeometry: Geometry): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n\r\n        if (this._geometriesByUniqueId) {\r\n            this._geometriesByUniqueId[newGeometry.uniqueId] = this.geometries.length;\r\n        }\r\n\r\n        this.geometries.push(newGeometry);\r\n    }\r\n\r\n    /**\r\n     * Adds the given action manager to this scene\r\n     * @deprecated\r\n     * @param newActionManager The action manager to add\r\n     */\r\n    public addActionManager(newActionManager: AbstractActionManager): void {\r\n        this.actionManagers.push(newActionManager);\r\n    }\r\n\r\n    /**\r\n     * Adds the given texture to this scene.\r\n     * @param newTexture The texture to add\r\n     */\r\n    public addTexture(newTexture: BaseTexture): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.textures.push(newTexture);\r\n        this.onNewTextureAddedObservable.notifyObservers(newTexture);\r\n    }\r\n\r\n    /**\r\n     * Adds the given frame graph to this scene.\r\n     * @param newFrameGraph The frame graph to add\r\n     */\r\n    public addFrameGraph(newFrameGraph: FrameGraph): void {\r\n        this.frameGraphs.push(newFrameGraph);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewFrameGraphAddedObservable.notifyObservers(newFrameGraph);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given object renderer to this scene.\r\n     * @param objectRenderer The object renderer to add\r\n     */\r\n    public addObjectRenderer(objectRenderer: ObjectRenderer): void {\r\n        this.objectRenderers.push(objectRenderer);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewObjectRendererAddedObservable.notifyObservers(objectRenderer);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given post process to this scene.\r\n     * @param newPostProcess The post process to add\r\n     */\r\n    public addPostProcess(newPostProcess: PostProcess): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.postProcesses.push(newPostProcess);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewPostProcessAddedObservable.notifyObservers(newPostProcess);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds the given effect layer to this scene.\r\n     * @param newEffectLayer The effect layer to add\r\n     */\r\n    public addEffectLayer(newEffectLayer: EffectLayer): void {\r\n        if (this._blockEntityCollection) {\r\n            return;\r\n        }\r\n        this.effectLayers.push(newEffectLayer);\r\n        Tools.SetImmediate(() => {\r\n            this.onNewEffectLayerAddedObservable.notifyObservers(newEffectLayer);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Switch active camera\r\n     * @param newCamera defines the new active camera\r\n     * @param attachControl defines if attachControl must be called for the new active camera (default: true)\r\n     */\r\n    public switchActiveCamera(newCamera: Camera, attachControl = true): void {\r\n        const canvas = this._engine.getInputElement();\r\n\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n\r\n        if (this.activeCamera) {\r\n            this.activeCamera.detachControl();\r\n        }\r\n        this.activeCamera = newCamera;\r\n        if (attachControl) {\r\n            newCamera.attachControl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * sets the active camera of the scene using its Id\r\n     * @param id defines the camera's Id\r\n     * @returns the new active camera or null if none found.\r\n     */\r\n    public setActiveCameraById(id: string): Nullable<Camera> {\r\n        const camera = this.getCameraById(id);\r\n\r\n        if (camera) {\r\n            this.activeCamera = camera;\r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * sets the active camera of the scene using its name\r\n     * @param name defines the camera's name\r\n     * @returns the new active camera or null if none found.\r\n     */\r\n    public setActiveCameraByName(name: string): Nullable<Camera> {\r\n        const camera = this.getCameraByName(name);\r\n\r\n        if (camera) {\r\n            this.activeCamera = camera;\r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get an animation group using its name\r\n     * @param name defines the material's name\r\n     * @returns the animation group or null if none found.\r\n     */\r\n    public getAnimationGroupByName(name: string): Nullable<AnimationGroup> {\r\n        for (let index = 0; index < this.animationGroups.length; index++) {\r\n            if (this.animationGroups[index].name === name) {\r\n                return this.animationGroups[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _getMaterial(allowMultiMaterials: boolean, predicate: (m: Material) => boolean): Nullable<Material> {\r\n        for (let index = 0; index < this.materials.length; index++) {\r\n            const material = this.materials[index];\r\n            if (predicate(material)) {\r\n                return material;\r\n            }\r\n        }\r\n        if (allowMultiMaterials) {\r\n            for (let index = 0; index < this.multiMaterials.length; index++) {\r\n                const material = this.multiMaterials[index];\r\n                if (predicate(material)) {\r\n                    return material;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a material using its unique id\r\n     * @param uniqueId defines the material's unique id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     * @deprecated Please use getMaterialByUniqueId instead.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public getMaterialByUniqueID(uniqueId: number, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this.getMaterialByUniqueId(uniqueId, allowMultiMaterials);\r\n    }\r\n\r\n    /**\r\n     * Get a material using its unique id\r\n     * @param uniqueId defines the material's unique id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialByUniqueId(uniqueId: number, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.uniqueId === uniqueId);\r\n    }\r\n\r\n    /**\r\n     * get a material using its id\r\n     * @param id defines the material's Id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.id === id);\r\n    }\r\n\r\n    /**\r\n     * Gets a material using its name\r\n     * @param name defines the material's name\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the material or null if none found.\r\n     */\r\n    public getMaterialByName(name: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        return this._getMaterial(allowMultiMaterials, (m) => m.name === name);\r\n    }\r\n\r\n    /**\r\n     * Gets a last added material using a given id\r\n     * @param id defines the material's id\r\n     * @param allowMultiMaterials determines whether multimaterials should be considered\r\n     * @returns the last material with the given id or null if none found.\r\n     */\r\n    public getLastMaterialById(id: string, allowMultiMaterials: boolean = false): Nullable<Material> {\r\n        for (let index = this.materials.length - 1; index >= 0; index--) {\r\n            if (this.materials[index].id === id) {\r\n                return this.materials[index];\r\n            }\r\n        }\r\n        if (allowMultiMaterials) {\r\n            for (let index = this.multiMaterials.length - 1; index >= 0; index--) {\r\n                if (this.multiMaterials[index].id === id) {\r\n                    return this.multiMaterials[index];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a texture using its unique id\r\n     * @param uniqueId defines the texture's unique id\r\n     * @returns the texture or null if none found.\r\n     */\r\n    public getTextureByUniqueId(uniqueId: number): Nullable<BaseTexture> {\r\n        for (let index = 0; index < this.textures.length; index++) {\r\n            if (this.textures[index].uniqueId === uniqueId) {\r\n                return this.textures[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a texture using its name\r\n     * @param name defines the texture's name\r\n     * @returns the texture or null if none found.\r\n     */\r\n    public getTextureByName(name: string): Nullable<BaseTexture> {\r\n        for (let index = 0; index < this.textures.length; index++) {\r\n            if (this.textures[index].name === name) {\r\n                return this.textures[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its Id\r\n     * @param id defines the Id to look for\r\n     * @returns the camera or null if not found\r\n     */\r\n    public getCameraById(id: string): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].id === id) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its unique Id\r\n     * @param uniqueId defines the unique Id to look for\r\n     * @returns the camera or null if not found\r\n     */\r\n    public getCameraByUniqueId(uniqueId: number): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].uniqueId === uniqueId) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a camera using its name\r\n     * @param name defines the camera's name\r\n     * @returns the camera or null if none found.\r\n     */\r\n    public getCameraByName(name: string): Nullable<Camera> {\r\n        for (let index = 0; index < this.cameras.length; index++) {\r\n            if (this.cameras[index].name === name) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a bone using its Id\r\n     * @param id defines the bone's Id\r\n     * @returns the bone or null if not found\r\n     */\r\n    public getBoneById(id: string): Nullable<Bone> {\r\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\r\n            const skeleton = this.skeletons[skeletonIndex];\r\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\r\n                if (skeleton.bones[boneIndex].id === id) {\r\n                    return skeleton.bones[boneIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a bone using its id\r\n     * @param name defines the bone's name\r\n     * @returns the bone or null if not found\r\n     */\r\n    public getBoneByName(name: string): Nullable<Bone> {\r\n        for (let skeletonIndex = 0; skeletonIndex < this.skeletons.length; skeletonIndex++) {\r\n            const skeleton = this.skeletons[skeletonIndex];\r\n            for (let boneIndex = 0; boneIndex < skeleton.bones.length; boneIndex++) {\r\n                if (skeleton.bones[boneIndex].name === name) {\r\n                    return skeleton.bones[boneIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its name\r\n     * @param name defines the light's name\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightByName(name: string): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].name === name) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its Id\r\n     * @param id defines the light's Id\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightById(id: string): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].id === id) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a light node using its scene-generated unique Id\r\n     * @param uniqueId defines the light's unique Id\r\n     * @returns the light or null if none found.\r\n     */\r\n    public getLightByUniqueId(uniqueId: number): Nullable<Light> {\r\n        for (let index = 0; index < this.lights.length; index++) {\r\n            if (this.lights[index].uniqueId === uniqueId) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a particle system by Id\r\n     * @param id defines the particle system Id\r\n     * @returns the corresponding system or null if none found\r\n     */\r\n    public getParticleSystemById(id: string): Nullable<IParticleSystem> {\r\n        for (let index = 0; index < this.particleSystems.length; index++) {\r\n            if (this.particleSystems[index].id === id) {\r\n                return this.particleSystems[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a geometry using its Id\r\n     * @param id defines the geometry's Id\r\n     * @returns the geometry or null if none found.\r\n     */\r\n    public getGeometryById(id: string): Nullable<Geometry> {\r\n        for (let index = 0; index < this.geometries.length; index++) {\r\n            if (this.geometries[index].id === id) {\r\n                return this.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _getGeometryByUniqueId(uniqueId: number): Nullable<Geometry> {\r\n        if (this._geometriesByUniqueId) {\r\n            const index = this._geometriesByUniqueId[uniqueId];\r\n            if (index !== undefined) {\r\n                return this.geometries[index];\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.geometries.length; index++) {\r\n                if (this.geometries[index].uniqueId === uniqueId) {\r\n                    return this.geometries[index];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a frame graph using its name\r\n     * @param name defines the frame graph's name\r\n     * @returns the frame graph or null if none found.\r\n     */\r\n    public getFrameGraphByName(name: string): Nullable<FrameGraph> {\r\n        for (let index = 0; index < this.frameGraphs.length; index++) {\r\n            if (this.frameGraphs[index].name === name) {\r\n                return this.frameGraphs[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Add a new geometry to this scene\r\n     * @param geometry defines the geometry to be added to the scene.\r\n     * @param force defines if the geometry must be pushed even if a geometry with this id already exists\r\n     * @returns a boolean defining if the geometry was added or not\r\n     */\r\n    public pushGeometry(geometry: Geometry, force?: boolean): boolean {\r\n        if (!force && this._getGeometryByUniqueId(geometry.uniqueId)) {\r\n            return false;\r\n        }\r\n\r\n        this.addGeometry(geometry);\r\n\r\n        Tools.SetImmediate(() => {\r\n            this.onNewGeometryAddedObservable.notifyObservers(geometry);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes an existing geometry\r\n     * @param geometry defines the geometry to be removed from the scene\r\n     * @returns a boolean defining if the geometry was removed or not\r\n     */\r\n    public removeGeometry(geometry: Geometry): boolean {\r\n        let index;\r\n        if (this._geometriesByUniqueId) {\r\n            index = this._geometriesByUniqueId[geometry.uniqueId];\r\n            if (index === undefined) {\r\n                return false;\r\n            }\r\n        } else {\r\n            index = this.geometries.indexOf(geometry);\r\n            if (index < 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (index !== this.geometries.length - 1) {\r\n            const lastGeometry = this.geometries[this.geometries.length - 1];\r\n            if (lastGeometry) {\r\n                this.geometries[index] = lastGeometry;\r\n                if (this._geometriesByUniqueId) {\r\n                    this._geometriesByUniqueId[lastGeometry.uniqueId] = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this._geometriesByUniqueId) {\r\n            this._geometriesByUniqueId[geometry.uniqueId] = undefined;\r\n        }\r\n\r\n        this.geometries.pop();\r\n\r\n        this.onGeometryRemovedObservable.notifyObservers(geometry);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of geometries attached to the scene\r\n     * @returns an array of Geometry\r\n     */\r\n    public getGeometries(): Geometry[] {\r\n        return this.geometries;\r\n    }\r\n\r\n    /**\r\n     * Gets the first added mesh found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the mesh found or null if not found at all\r\n     */\r\n    public getMeshById(id: string): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of meshes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of meshes\r\n     */\r\n    public getMeshesById(id: string): Array<AbstractMesh> {\r\n        return this.meshes.filter(function (m) {\r\n            return m.id === id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the first added transform node found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeById(id: string): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a transform node with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeByUniqueId(uniqueId: number): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].uniqueId === uniqueId) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of transform nodes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of transform nodes\r\n     */\r\n    public getTransformNodesById(id: string): Array<TransformNode> {\r\n        return this.transformNodes.filter(function (m) {\r\n            return m.id === id;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a mesh with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getMeshByUniqueId(uniqueId: number): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].uniqueId === uniqueId) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last added mesh using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getLastMeshById(id: string): Nullable<AbstractMesh> {\r\n        for (let index = this.meshes.length - 1; index >= 0; index--) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last transform node using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getLastTransformNodeById(id: string): Nullable<TransformNode> {\r\n        for (let index = this.transformNodes.length - 1; index >= 0; index--) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     */\r\n    public getLastEntryById(id: string): Nullable<Node> {\r\n        let index: number;\r\n        for (index = this.meshes.length - 1; index >= 0; index--) {\r\n            if (this.meshes[index].id === id) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.transformNodes.length - 1; index >= 0; index--) {\r\n            if (this.transformNodes[index].id === id) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.cameras.length - 1; index >= 0; index--) {\r\n            if (this.cameras[index].id === id) {\r\n                return this.cameras[index];\r\n            }\r\n        }\r\n\r\n        for (index = this.lights.length - 1; index >= 0; index--) {\r\n            if (this.lights[index].id === id) {\r\n                return this.lights[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     */\r\n    public getNodeById(id: string): Nullable<Node> {\r\n        const mesh = this.getMeshById(id);\r\n        if (mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transformNode = this.getTransformNodeById(id);\r\n        if (transformNode) {\r\n            return transformNode;\r\n        }\r\n\r\n        const light = this.getLightById(id);\r\n        if (light) {\r\n            return light;\r\n        }\r\n\r\n        const camera = this.getCameraById(id);\r\n        if (camera) {\r\n            return camera;\r\n        }\r\n\r\n        const bone = this.getBoneById(id);\r\n        if (bone) {\r\n            return bone;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found node or null if not found at all.\r\n     */\r\n    public getNodeByName(name: string): Nullable<Node> {\r\n        const mesh = this.getMeshByName(name);\r\n        if (mesh) {\r\n            return mesh;\r\n        }\r\n\r\n        const transformNode = this.getTransformNodeByName(name);\r\n        if (transformNode) {\r\n            return transformNode;\r\n        }\r\n\r\n        const light = this.getLightByName(name);\r\n        if (light) {\r\n            return light;\r\n        }\r\n\r\n        const camera = this.getCameraByName(name);\r\n        if (camera) {\r\n            return camera;\r\n        }\r\n\r\n        const bone = this.getBoneByName(name);\r\n        if (bone) {\r\n            return bone;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a mesh using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     */\r\n    public getMeshByName(name: string): Nullable<AbstractMesh> {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            if (this.meshes[index].name === name) {\r\n                return this.meshes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a transform node using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     */\r\n    public getTransformNodeByName(name: string): Nullable<TransformNode> {\r\n        for (let index = 0; index < this.transformNodes.length; index++) {\r\n            if (this.transformNodes[index].name === name) {\r\n                return this.transformNodes[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\r\n     * @param id defines the Id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getLastSkeletonById(id: string): Nullable<Skeleton> {\r\n        for (let index = this.skeletons.length - 1; index >= 0; index--) {\r\n            if (this.skeletons[index].id === id) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given auto generated unique id\r\n     * @param  uniqueId defines the unique id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonByUniqueId(uniqueId: number): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].uniqueId === uniqueId) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given id (if many are found, this function will pick the first one)\r\n     * @param id defines the id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonById(id: string): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].id === id) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a skeleton using a given name\r\n     * @param name defines the name to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     */\r\n    public getSkeletonByName(name: string): Nullable<Skeleton> {\r\n        for (let index = 0; index < this.skeletons.length; index++) {\r\n            if (this.skeletons[index].name === name) {\r\n                return this.skeletons[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target manager  using a given id (if many are found, this function will pick the last one)\r\n     * @param id defines the id to search for\r\n     * @returns the found morph target manager or null if not found at all.\r\n     */\r\n    public getMorphTargetManagerById(id: number): Nullable<MorphTargetManager> {\r\n        for (let index = 0; index < this.morphTargetManagers.length; index++) {\r\n            if (this.morphTargetManagers[index].uniqueId === id) {\r\n                return this.morphTargetManagers[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target using a given id (if many are found, this function will pick the first one)\r\n     * @param id defines the id to search for\r\n     * @returns the found morph target or null if not found at all.\r\n     */\r\n    public getMorphTargetById(id: string): Nullable<MorphTarget> {\r\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\r\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\r\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\r\n                const target = morphTargetManager.getTarget(index);\r\n                if (target.id === id) {\r\n                    return target;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a morph target using a given name (if many are found, this function will pick the first one)\r\n     * @param name defines the name to search for\r\n     * @returns the found morph target or null if not found at all.\r\n     */\r\n    public getMorphTargetByName(name: string): Nullable<MorphTarget> {\r\n        for (let managerIndex = 0; managerIndex < this.morphTargetManagers.length; ++managerIndex) {\r\n            const morphTargetManager = this.morphTargetManagers[managerIndex];\r\n            for (let index = 0; index < morphTargetManager.numTargets; ++index) {\r\n                const target = morphTargetManager.getTarget(index);\r\n                if (target.name === name) {\r\n                    return target;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a post process using a given name (if many are found, this function will pick the first one)\r\n     * @param name defines the name to search for\r\n     * @returns the found post process or null if not found at all.\r\n     */\r\n    public getPostProcessByName(name: string): Nullable<PostProcess> {\r\n        for (let postProcessIndex = 0; postProcessIndex < this.postProcesses.length; ++postProcessIndex) {\r\n            const postProcess = this.postProcesses[postProcessIndex];\r\n            if (postProcess.name === name) {\r\n                return postProcess;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given mesh is active\r\n     * @param mesh defines the mesh to look for\r\n     * @returns true if the mesh is in the active list\r\n     */\r\n    public isActiveMesh(mesh: AbstractMesh): boolean {\r\n        return this._activeMeshes.indexOf(mesh) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Return a unique id as a string which can serve as an identifier for the scene\r\n     */\r\n    public get uid(): string {\r\n        if (!this._uid) {\r\n            this._uid = Tools.RandomId();\r\n        }\r\n        return this._uid;\r\n    }\r\n\r\n    /**\r\n     * Add an externally attached data from its key.\r\n     * This method call will fail and return false, if such key already exists.\r\n     * If you don't care and just want to get the data no matter what, use the more convenient getOrAddExternalDataWithFactory() method.\r\n     * @param key the unique key that identifies the data\r\n     * @param data the data object to associate to the key for this Engine instance\r\n     * @returns true if no such key were already present and the data was added successfully, false otherwise\r\n     */\r\n    public addExternalData<T extends object>(key: string, data: T): boolean {\r\n        if (!this._externalData) {\r\n            this._externalData = new StringDictionary<object>();\r\n        }\r\n        return this._externalData.add(key, data);\r\n    }\r\n\r\n    /**\r\n     * Get an externally attached data from its key\r\n     * @param key the unique key that identifies the data\r\n     * @returns the associated data, if present (can be null), or undefined if not present\r\n     */\r\n    public getExternalData<T>(key: string): Nullable<T> {\r\n        if (!this._externalData) {\r\n            return null;\r\n        }\r\n        return <T>this._externalData.get(key);\r\n    }\r\n\r\n    /**\r\n     * Get an externally attached data from its key, create it using a factory if it's not already present\r\n     * @param key the unique key that identifies the data\r\n     * @param factory the factory that will be called to create the instance if and only if it doesn't exists\r\n     * @returns the associated data, can be null if the factory returned null.\r\n     */\r\n    public getOrAddExternalDataWithFactory<T extends object>(key: string, factory: (k: string) => T): T {\r\n        if (!this._externalData) {\r\n            this._externalData = new StringDictionary<object>();\r\n        }\r\n        return <T>this._externalData.getOrAddWithFactory(key, factory);\r\n    }\r\n\r\n    /**\r\n     * Remove an externally attached data from the Engine instance\r\n     * @param key the unique key that identifies the data\r\n     * @returns true if the data was successfully removed, false if it doesn't exist\r\n     */\r\n    public removeExternalData(key: string): boolean {\r\n        return this._externalData.remove(key);\r\n    }\r\n\r\n    private _evaluateSubMesh(subMesh: SubMesh, mesh: AbstractMesh, initialMesh: AbstractMesh, forcePush: boolean): void {\r\n        if (forcePush || subMesh.isInFrustum(this._frustumPlanes)) {\r\n            for (const step of this._evaluateSubMeshStage) {\r\n                step.action(mesh, subMesh);\r\n            }\r\n\r\n            const material = subMesh.getMaterial();\r\n            if (material !== null && material !== undefined) {\r\n                // Render targets\r\n                if (material.hasRenderTargetTextures && material.getRenderTargetTextures != null) {\r\n                    if (this._processedMaterials.indexOf(material) === -1) {\r\n                        this._processedMaterials.push(material);\r\n\r\n                        this._materialsRenderTargets.concatWithNoDuplicate(material.getRenderTargetTextures());\r\n                    }\r\n                }\r\n\r\n                // Dispatch\r\n                this._renderingManager.dispatch(subMesh, mesh, material);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the processed materials smart array preventing retention point in material dispose.\r\n     */\r\n    public freeProcessedMaterials(): void {\r\n        this._processedMaterials.dispose();\r\n    }\r\n\r\n    private _preventFreeActiveMeshesAndRenderingGroups = false;\r\n\r\n    /** Gets or sets a boolean blocking all the calls to freeActiveMeshes and freeRenderingGroups\r\n     * It can be used in order to prevent going through methods freeRenderingGroups and freeActiveMeshes several times to improve performance\r\n     * when disposing several meshes in a row or a hierarchy of meshes.\r\n     * When used, it is the responsibility of the user to blockfreeActiveMeshesAndRenderingGroups back to false.\r\n     */\r\n    public get blockfreeActiveMeshesAndRenderingGroups(): boolean {\r\n        return this._preventFreeActiveMeshesAndRenderingGroups;\r\n    }\r\n\r\n    public set blockfreeActiveMeshesAndRenderingGroups(value: boolean) {\r\n        if (this._preventFreeActiveMeshesAndRenderingGroups === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.freeActiveMeshes();\r\n            this.freeRenderingGroups();\r\n        }\r\n\r\n        this._preventFreeActiveMeshesAndRenderingGroups = value;\r\n    }\r\n\r\n    /**\r\n     * Clear the active meshes smart array preventing retention point in mesh dispose.\r\n     */\r\n    public freeActiveMeshes(): void {\r\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\r\n            return;\r\n        }\r\n\r\n        this._activeMeshes.dispose();\r\n        if (this.activeCamera && this.activeCamera._activeMeshes) {\r\n            this.activeCamera._activeMeshes.dispose();\r\n        }\r\n        if (this.activeCameras) {\r\n            for (let i = 0; i < this.activeCameras.length; i++) {\r\n                const activeCamera = this.activeCameras[i];\r\n                if (activeCamera && activeCamera._activeMeshes) {\r\n                    activeCamera._activeMeshes.dispose();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear the info related to rendering groups preventing retention points during dispose.\r\n     */\r\n    public freeRenderingGroups(): void {\r\n        if (this.blockfreeActiveMeshesAndRenderingGroups) {\r\n            return;\r\n        }\r\n\r\n        if (this._renderingManager) {\r\n            this._renderingManager.freeRenderingGroups();\r\n        }\r\n        if (this.textures) {\r\n            for (let i = 0; i < this.textures.length; i++) {\r\n                const texture = this.textures[i];\r\n                if (texture && (<RenderTargetTexture>texture).renderList) {\r\n                    (<RenderTargetTexture>texture).freeRenderingGroups();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _isInIntermediateRendering(): boolean {\r\n        return this._intermediateRendering;\r\n    }\r\n\r\n    /**\r\n     * Lambda returning the list of potentially active meshes.\r\n     */\r\n    public getActiveMeshCandidates: () => ISmartArrayLike<AbstractMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially active sub meshes.\r\n     */\r\n    public getActiveSubMeshCandidates: (mesh: AbstractMesh) => ISmartArrayLike<SubMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially intersecting sub meshes.\r\n     */\r\n    public getIntersectingSubMeshCandidates: (mesh: AbstractMesh, localRay: Ray) => ISmartArrayLike<SubMesh>;\r\n\r\n    /**\r\n     * Lambda returning the list of potentially colliding sub meshes.\r\n     */\r\n    public getCollidingSubMeshCandidates: (mesh: AbstractMesh, collider: Collider) => ISmartArrayLike<SubMesh>;\r\n\r\n    /** @internal */\r\n    public _activeMeshesFrozen = false;\r\n    /** @internal */\r\n    public _activeMeshesFrozenButKeepClipping = false;\r\n    private _skipEvaluateActiveMeshesCompletely = false;\r\n    private _freezeActiveMeshesCancel: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Use this function to stop evaluating active meshes. The current list will be keep alive between frames\r\n     * @param skipEvaluateActiveMeshes defines an optional boolean indicating that the evaluate active meshes step must be completely skipped\r\n     * @param onSuccess optional success callback\r\n     * @param onError optional error callback\r\n     * @param freezeMeshes defines if meshes should be frozen (true by default)\r\n     * @param keepFrustumCulling defines if you want to keep running the frustum clipping (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public freezeActiveMeshes(\r\n        skipEvaluateActiveMeshes = false,\r\n        onSuccess?: () => void,\r\n        onError?: (message: string) => void,\r\n        freezeMeshes = true,\r\n        keepFrustumCulling = false\r\n    ): Scene {\r\n        if (this.frameGraph) {\r\n            // Executes the frame graph once to be sure the culling tasks (if any) are executed and generate the right culled lists\r\n            // (it's possible freezeActiveMeshes is called before the frame graph has been executed for the first time)\r\n            this._renderWithFrameGraph(true, false, true);\r\n\r\n            // Freeze all active meshes of all object renderers in the graph\r\n            const objectRendererTasks = this.frameGraph.getTasksByType(FrameGraphObjectRendererTask);\r\n            for (const task of objectRendererTasks) {\r\n                task.objectRenderer._freezeActiveMeshes(freezeMeshes);\r\n            }\r\n\r\n            // Wait for all object renderers to finish freezing\r\n            this._freezeActiveMeshesCancel = _RetryWithInterval(\r\n                () => {\r\n                    let ok = true;\r\n                    let notCancelled = true;\r\n                    for (const task of objectRendererTasks) {\r\n                        ok &&= task.objectRenderer._isFrozen;\r\n                        notCancelled &&= task.objectRenderer._freezeActiveMeshesCancel !== null;\r\n                    }\r\n                    if (ok) {\r\n                        return true;\r\n                    } else if (!notCancelled) {\r\n                        // At least one object renderer cancelled freezing meshes because of an error\r\n                        // Throws an error that will be caught by _RetryWithInterval.onError\r\n                        throw new Error(\"Freezing active meshes was cancelled\");\r\n                    }\r\n                    return false;\r\n                },\r\n                () => {\r\n                    // All meshes of all object renderers could be frozen correctly\r\n                    this._freezeActiveMeshesCancel = null;\r\n                    this._activeMeshesFrozen = true;\r\n                    this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\r\n                    this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\r\n\r\n                    onSuccess?.();\r\n                },\r\n                (err, isTimeout) => {\r\n                    // An error occurred => not all meshes could be frozen\r\n                    // Unfreezes all meshes so that we remain in a valid state\r\n                    this._freezeActiveMeshesCancel = null;\r\n                    this.unfreezeActiveMeshes();\r\n                    if (!isTimeout) {\r\n                        const errMsg = \"Scene: An unexpected error occurred while trying to freeze active meshes.\";\r\n                        if (onError) {\r\n                            onError(errMsg);\r\n                        } else {\r\n                            Logger.Error(errMsg);\r\n                            if (err) {\r\n                                Logger.Error(err);\r\n                                if (err.stack) {\r\n                                    Logger.Error(err.stack);\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const errMsg = \"Scene: Timeout while waiting for meshes to be frozen.\";\r\n                        if (onError) {\r\n                            onError(errMsg);\r\n                        } else {\r\n                            Logger.Error(errMsg);\r\n                            if (err) {\r\n                                Logger.Error(err);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n\r\n            return this;\r\n        }\r\n\r\n        this.executeWhenReady(() => {\r\n            if (!this.activeCamera) {\r\n                if (onError) {\r\n                    onError(\"No active camera found\");\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!this._frustumPlanes) {\r\n                this.updateTransformMatrix();\r\n            }\r\n\r\n            this._evaluateActiveMeshes();\r\n            this._activeMeshesFrozen = true;\r\n            this._activeMeshesFrozenButKeepClipping = keepFrustumCulling;\r\n            this._skipEvaluateActiveMeshesCompletely = skipEvaluateActiveMeshes;\r\n\r\n            if (freezeMeshes) {\r\n                for (let index = 0; index < this._activeMeshes.length; index++) {\r\n                    this._activeMeshes.data[index]._freeze();\r\n                }\r\n            }\r\n            if (onSuccess) {\r\n                onSuccess();\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Use this function to restart evaluating active meshes on every frame\r\n     * @returns the current scene\r\n     */\r\n    public unfreezeActiveMeshes(): Scene {\r\n        for (let index = 0; index < this.meshes.length; index++) {\r\n            const mesh = this.meshes[index];\r\n            if (mesh._internalAbstractMeshDataInfo) {\r\n                mesh._internalAbstractMeshDataInfo._isActive = false;\r\n            }\r\n        }\r\n\r\n        this._freezeActiveMeshesCancel?.();\r\n        this._freezeActiveMeshesCancel = null;\r\n\r\n        if (this.frameGraph) {\r\n            const objectRendererTasks = this.frameGraph.getTasksByType(FrameGraphObjectRendererTask);\r\n            for (const task of objectRendererTasks) {\r\n                task.objectRenderer._unfreezeActiveMeshes();\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this._activeMeshes.length; index++) {\r\n                this._activeMeshes.data[index]._unFreeze();\r\n            }\r\n        }\r\n\r\n        this._activeMeshesFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    private _executeActiveContainerCleanup(container: SmartArray<any>) {\r\n        const isInFastMode = this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\r\n\r\n        if (!isInFastMode && this._activeMeshesFrozen && this._activeMeshes.length) {\r\n            return; // Do not execute in frozen mode\r\n        }\r\n\r\n        // We need to ensure we are not in the rendering loop\r\n        this.onBeforeRenderObservable.addOnce(() => container.dispose());\r\n    }\r\n\r\n    private _evaluateActiveMeshes(): void {\r\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\r\n            if (this._activeMeshes.length > 0) {\r\n                this.activeCamera?._activeMeshes.reset();\r\n                this._activeMeshes.reset();\r\n                this._renderingManager.reset();\r\n                this._processedMaterials.reset();\r\n                this._activeParticleSystems.reset();\r\n                this._activeSkeletons.reset();\r\n                this._softwareSkinnedMeshes.reset();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this._activeMeshesFrozen && this._activeMeshes.length) {\r\n            if (!this._skipEvaluateActiveMeshesCompletely) {\r\n                const len = this._activeMeshes.length;\r\n                for (let i = 0; i < len; i++) {\r\n                    const mesh = this._activeMeshes.data[i];\r\n                    mesh.computeWorldMatrix();\r\n                }\r\n            }\r\n\r\n            if (this._activeParticleSystems) {\r\n                const psLength = this._activeParticleSystems.length;\r\n                for (let i = 0; i < psLength; i++) {\r\n                    this._activeParticleSystems.data[i].animate();\r\n                }\r\n            }\r\n\r\n            this._renderingManager.resetSprites();\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.activeCamera) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeActiveMeshesEvaluationObservable.notifyObservers(this);\r\n\r\n        this.activeCamera._activeMeshes.reset();\r\n        this._activeMeshes.reset();\r\n        this._renderingManager.reset();\r\n        this._processedMaterials.reset();\r\n        this._activeParticleSystems.reset();\r\n        this._activeSkeletons.reset();\r\n        this._softwareSkinnedMeshes.reset();\r\n        this._materialsRenderTargets.reset();\r\n\r\n        for (const step of this._beforeEvaluateActiveMeshStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Determine mesh candidates\r\n        const meshes = this.getActiveMeshCandidates();\r\n\r\n        // Check each mesh\r\n        const len = meshes.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const mesh = meshes.data[i];\r\n            let currentLOD = mesh._internalAbstractMeshDataInfo._currentLOD.get(this.activeCamera);\r\n            if (currentLOD) {\r\n                currentLOD[1] = -1;\r\n            } else {\r\n                currentLOD = [mesh, -1];\r\n                mesh._internalAbstractMeshDataInfo._currentLOD.set(this.activeCamera, currentLOD);\r\n            }\r\n            if (mesh.isBlocked) {\r\n                continue;\r\n            }\r\n\r\n            this._totalVertices.addCount(mesh.getTotalVertices(), false);\r\n\r\n            if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\r\n                continue;\r\n            }\r\n\r\n            mesh.computeWorldMatrix();\r\n\r\n            // Intersections\r\n            if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\r\n                this._meshesForIntersections.pushNoDuplicate(mesh);\r\n            }\r\n\r\n            // Switch to current LOD\r\n            let meshToRender = this.customLODSelector ? this.customLODSelector(mesh, this.activeCamera) : mesh.getLOD(this.activeCamera);\r\n            currentLOD[0] = meshToRender;\r\n            currentLOD[1] = this._frameId;\r\n            if (meshToRender === undefined || meshToRender === null) {\r\n                continue;\r\n            }\r\n\r\n            // Compute world matrix if LOD is billboard\r\n            if (meshToRender !== mesh && meshToRender.billboardMode !== 0) {\r\n                meshToRender.computeWorldMatrix();\r\n            }\r\n\r\n            mesh._preActivate();\r\n\r\n            if (\r\n                mesh.isVisible &&\r\n                mesh.visibility > 0 &&\r\n                (mesh.layerMask & this.activeCamera.layerMask) !== 0 &&\r\n                (this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh || mesh.isInFrustum(this._frustumPlanes))\r\n            ) {\r\n                this._activeMeshes.push(mesh);\r\n                this.activeCamera._activeMeshes.push(mesh);\r\n\r\n                if (meshToRender !== mesh) {\r\n                    meshToRender._activate(this._renderId, false);\r\n                }\r\n\r\n                for (const step of this._preActiveMeshStage) {\r\n                    step.action(mesh);\r\n                }\r\n\r\n                if (mesh._activate(this._renderId, false)) {\r\n                    if (!mesh.isAnInstance) {\r\n                        meshToRender._internalAbstractMeshDataInfo._onlyForInstances = false;\r\n                    } else {\r\n                        if (mesh._internalAbstractMeshDataInfo._actAsRegularMesh) {\r\n                            meshToRender = mesh;\r\n                        }\r\n                    }\r\n                    meshToRender._internalAbstractMeshDataInfo._isActive = true;\r\n                    this._activeMesh(mesh, meshToRender);\r\n                }\r\n\r\n                mesh._postActivate();\r\n            }\r\n        }\r\n\r\n        this.onAfterActiveMeshesEvaluationObservable.notifyObservers(this);\r\n\r\n        // Particle systems\r\n        if (this.particlesEnabled) {\r\n            this.onBeforeParticlesRenderingObservable.notifyObservers(this);\r\n            for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\r\n                const particleSystem = this.particleSystems[particleIndex];\r\n\r\n                if (!particleSystem.isStarted() || !particleSystem.emitter) {\r\n                    continue;\r\n                }\r\n\r\n                const emitter = <any>particleSystem.emitter;\r\n                if (!emitter.position || emitter.isEnabled()) {\r\n                    this._activeParticleSystems.push(particleSystem);\r\n                    particleSystem.animate();\r\n                    this._renderingManager.dispatchParticles(particleSystem);\r\n                }\r\n            }\r\n            this.onAfterParticlesRenderingObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareSkeleton(mesh: AbstractMesh): void {\r\n        if (!this._skeletonsEnabled || !mesh.skeleton) {\r\n            return;\r\n        }\r\n\r\n        if (this._activeSkeletons.pushNoDuplicate(mesh.skeleton)) {\r\n            mesh.skeleton.prepare();\r\n            this._activeBones.addCount(mesh.skeleton.bones.length, false);\r\n        }\r\n\r\n        if (!mesh.computeBonesUsingShaders) {\r\n            if (this._softwareSkinnedMeshes.pushNoDuplicate(<Mesh>mesh) && this.frameGraph) {\r\n                (<Mesh>mesh).applySkeleton(mesh.skeleton);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _activeMesh(sourceMesh: AbstractMesh, mesh: AbstractMesh): void {\r\n        this._prepareSkeleton(mesh);\r\n\r\n        let forcePush = sourceMesh.hasInstances || sourceMesh.isAnInstance || this.dispatchAllSubMeshesOfActiveMeshes || this._skipFrustumClipping || mesh.alwaysSelectAsActiveMesh;\r\n\r\n        if (mesh && mesh.subMeshes && mesh.subMeshes.length > 0) {\r\n            const subMeshes = this.getActiveSubMeshCandidates(mesh);\r\n            const len = subMeshes.length;\r\n            forcePush = forcePush || len === 1;\r\n            for (let i = 0; i < len; i++) {\r\n                const subMesh = subMeshes.data[i];\r\n                this._evaluateSubMesh(subMesh, mesh, sourceMesh, forcePush);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the transform matrix to update from the current active camera\r\n     * @param force defines a boolean used to force the update even if cache is up to date\r\n     */\r\n    public updateTransformMatrix(force?: boolean): void {\r\n        const activeCamera = this.activeCamera;\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        if (activeCamera._renderingMultiview) {\r\n            const leftCamera = activeCamera._rigCameras[0];\r\n            const rightCamera = activeCamera._rigCameras[1];\r\n            this.setTransformMatrix(leftCamera.getViewMatrix(), leftCamera.getProjectionMatrix(force), rightCamera.getViewMatrix(), rightCamera.getProjectionMatrix(force));\r\n        } else {\r\n            this.setTransformMatrix(activeCamera.getViewMatrix(), activeCamera.getProjectionMatrix(force));\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _useCurrentFrameBuffer = false;\r\n\r\n    private _bindFrameBuffer(camera: Nullable<Camera>, clear = true) {\r\n        if (!this._useCurrentFrameBuffer) {\r\n            if (camera && camera._multiviewTexture) {\r\n                camera._multiviewTexture._bindFrameBuffer();\r\n            } else if (camera && camera.outputRenderTarget) {\r\n                camera.outputRenderTarget._bindFrameBuffer();\r\n            } else {\r\n                if (!this._engine._currentFrameBufferIsDefaultFrameBuffer()) {\r\n                    this._engine.restoreDefaultFramebuffer();\r\n                }\r\n            }\r\n        }\r\n        if (clear) {\r\n            this._clearFrameBuffer(camera);\r\n        }\r\n    }\r\n\r\n    private _clearFrameBuffer(camera: Nullable<Camera>) {\r\n        // we assume the framebuffer currently bound is the right one\r\n        if (camera && camera._multiviewTexture) {\r\n            // no clearing\r\n        } else if (camera && camera.outputRenderTarget && !camera._renderingMultiview) {\r\n            const rtt = camera.outputRenderTarget;\r\n            if (rtt.onClearObservable.hasObservers()) {\r\n                rtt.onClearObservable.notifyObservers(this._engine);\r\n            } else if (!rtt.skipInitialClear && !camera.isRightCamera) {\r\n                if (this.autoClear) {\r\n                    this._engine.clear(rtt.clearColor || this._clearColor, !rtt._cleared, true, true);\r\n                }\r\n                rtt._cleared = true;\r\n            }\r\n        } else {\r\n            if (!this._defaultFrameBufferCleared) {\r\n                this._defaultFrameBufferCleared = true;\r\n                this._clear();\r\n            } else {\r\n                this._engine.clear(null, false, true, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _allowPostProcessClearColor = true;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderForCamera(camera: Camera, rigParent?: Camera, bindFrameBuffer = true): void {\r\n        if (camera && camera._skipRendering) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._engine;\r\n\r\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\r\n        this._activeCamera = camera;\r\n\r\n        if (!this.activeCamera) {\r\n            throw new Error(\"Active camera not set\");\r\n        }\r\n\r\n        // Viewport\r\n        engine.setViewport(this.activeCamera.viewport);\r\n\r\n        // Camera\r\n        this.resetCachedMaterial();\r\n        this._renderId++;\r\n\r\n        if (!this.prePass && bindFrameBuffer) {\r\n            let skipInitialClear = true;\r\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\r\n                skipInitialClear = camera.outputRenderTarget.skipInitialClear;\r\n                if (this.autoClear) {\r\n                    this._defaultFrameBufferCleared = false;\r\n                    camera.outputRenderTarget.skipInitialClear = false;\r\n                }\r\n            }\r\n            this._bindFrameBuffer(this._activeCamera);\r\n            if (camera._renderingMultiview && camera.outputRenderTarget) {\r\n                camera.outputRenderTarget.skipInitialClear = skipInitialClear;\r\n            }\r\n        }\r\n\r\n        this.updateTransformMatrix();\r\n\r\n        this.onBeforeCameraRenderObservable.notifyObservers(this.activeCamera);\r\n\r\n        // Meshes\r\n        this._evaluateActiveMeshes();\r\n\r\n        // Software skinning\r\n        for (let softwareSkinnedMeshIndex = 0; softwareSkinnedMeshIndex < this._softwareSkinnedMeshes.length; softwareSkinnedMeshIndex++) {\r\n            const mesh = this._softwareSkinnedMeshes.data[softwareSkinnedMeshIndex];\r\n\r\n            mesh.applySkeleton(<Skeleton>mesh.skeleton);\r\n        }\r\n\r\n        // Render targets\r\n        this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n        this._renderTargets.concatWithNoDuplicate(this._materialsRenderTargets);\r\n\r\n        if (camera.customRenderTargets && camera.customRenderTargets.length > 0) {\r\n            this._renderTargets.concatWithNoDuplicate(camera.customRenderTargets);\r\n        }\r\n\r\n        if (rigParent && rigParent.customRenderTargets && rigParent.customRenderTargets.length > 0) {\r\n            this._renderTargets.concatWithNoDuplicate(rigParent.customRenderTargets);\r\n        }\r\n\r\n        if (this.environmentTexture && this.environmentTexture.isRenderTarget) {\r\n            this._renderTargets.pushNoDuplicate(this.environmentTexture as RenderTargetTexture);\r\n        }\r\n\r\n        // Collects render targets from external components.\r\n        for (const step of this._gatherActiveCameraRenderTargetsStage) {\r\n            step.action(this._renderTargets);\r\n        }\r\n\r\n        let needRebind = false;\r\n        if (this.renderTargetsEnabled) {\r\n            this._intermediateRendering = true;\r\n\r\n            if (this._renderTargets.length > 0) {\r\n                Tools.StartPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\r\n\r\n                // The cast to \"any\" is to avoid an error in ES6 in case you don't import boundingBoxRenderer\r\n                const boundingBoxRenderer = (this as any).getBoundingBoxRenderer?.() as Nullable<BoundingBoxRenderer>;\r\n\r\n                let currentBoundingBoxMeshList: Array<BoundingBox> | undefined;\r\n\r\n                for (let renderIndex = 0; renderIndex < this._renderTargets.length; renderIndex++) {\r\n                    const renderTarget = this._renderTargets.data[renderIndex];\r\n                    if (renderTarget._shouldRender()) {\r\n                        this._renderId++;\r\n                        const hasSpecialRenderTargetCamera = renderTarget.activeCamera && renderTarget.activeCamera !== this.activeCamera;\r\n                        if (boundingBoxRenderer && !currentBoundingBoxMeshList) {\r\n                            // Saves the current bounding box mesh list (potentially built by the call to _evaluateActiveMeshes above), which will be reset/updated when processing this target\r\n                            currentBoundingBoxMeshList = boundingBoxRenderer.renderList.length > 0 ? boundingBoxRenderer.renderList.data.slice() : [];\r\n                            currentBoundingBoxMeshList.length = boundingBoxRenderer.renderList.length;\r\n                        }\r\n                        renderTarget.render(<boolean>hasSpecialRenderTargetCamera, this.dumpNextRenderTargets);\r\n                        needRebind = true;\r\n                    }\r\n                }\r\n\r\n                if (boundingBoxRenderer && currentBoundingBoxMeshList) {\r\n                    boundingBoxRenderer.renderList.data = currentBoundingBoxMeshList;\r\n                    boundingBoxRenderer.renderList.length = currentBoundingBoxMeshList.length;\r\n                }\r\n\r\n                Tools.EndPerformanceCounter(\"Render targets\", this._renderTargets.length > 0);\r\n\r\n                this._renderId++;\r\n            }\r\n\r\n            for (const step of this._cameraDrawRenderTargetStage) {\r\n                needRebind = step.action(this.activeCamera) || needRebind;\r\n            }\r\n\r\n            this._intermediateRendering = false;\r\n        }\r\n\r\n        this._engine.currentRenderPassId = camera.outputRenderTarget?.renderPassId ?? camera.renderPassId ?? Constants.RENDERPASS_MAIN;\r\n\r\n        // Restore framebuffer after rendering to targets\r\n        if (needRebind && !this.prePass) {\r\n            this._bindFrameBuffer(this._activeCamera, false);\r\n            this.updateTransformMatrix();\r\n        }\r\n\r\n        this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n        // Prepare Frame\r\n        if (this.postProcessManager && !camera._multiviewTexture && !this.prePass) {\r\n            this.postProcessManager._prepareFrame();\r\n        }\r\n\r\n        // Before Camera Draw\r\n        for (const step of this._beforeCameraDrawStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Render\r\n        this.onBeforeDrawPhaseObservable.notifyObservers(this);\r\n\r\n        const fastSnapshotMode = engine.snapshotRendering && engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST;\r\n        if (fastSnapshotMode) {\r\n            this.finalizeSceneUbo();\r\n        }\r\n        this._renderingManager.render(null, null, true, !fastSnapshotMode);\r\n        this.onAfterDrawPhaseObservable.notifyObservers(this);\r\n\r\n        // After Camera Draw\r\n        for (const step of this._afterCameraDrawStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Finalize frame\r\n        if (this.postProcessManager && !camera._multiviewTexture) {\r\n            // if the camera has an output render target, render the post process to the render target\r\n            const texture = camera.outputRenderTarget ? camera.outputRenderTarget.renderTarget! : undefined;\r\n            this.postProcessManager._finalizeFrame(camera.isIntermediate, texture);\r\n        }\r\n\r\n        // After post process\r\n        for (const step of this._afterCameraPostProcessStage) {\r\n            step.action(this.activeCamera);\r\n        }\r\n\r\n        // Reset some special arrays\r\n        this._renderTargets.reset();\r\n\r\n        this.onAfterCameraRenderObservable.notifyObservers(this.activeCamera);\r\n    }\r\n\r\n    private _processSubCameras(camera: Camera, bindFrameBuffer = true): void {\r\n        if (camera.cameraRigMode === Constants.RIG_MODE_NONE || camera._renderingMultiview) {\r\n            if (camera._renderingMultiview && !this._multiviewSceneUbo) {\r\n                this._createMultiviewUbo();\r\n            }\r\n            this._renderForCamera(camera, undefined, bindFrameBuffer);\r\n            this.onAfterRenderCameraObservable.notifyObservers(camera);\r\n            return;\r\n        }\r\n\r\n        if (camera._useMultiviewToSingleView) {\r\n            this._renderMultiviewToSingleView(camera);\r\n        } else {\r\n            // rig cameras\r\n            this.onBeforeCameraRenderObservable.notifyObservers(camera);\r\n            for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                this._renderForCamera(camera._rigCameras[index], camera);\r\n            }\r\n        }\r\n\r\n        // Use _activeCamera instead of activeCamera to avoid onActiveCameraChanged\r\n        this._activeCamera = camera;\r\n        this.updateTransformMatrix();\r\n        this.onAfterRenderCameraObservable.notifyObservers(camera);\r\n    }\r\n\r\n    private _checkIntersections(): void {\r\n        for (let index = 0; index < this._meshesForIntersections.length; index++) {\r\n            const sourceMesh = this._meshesForIntersections.data[index];\r\n\r\n            if (!sourceMesh.actionManager) {\r\n                continue;\r\n            }\r\n\r\n            for (let actionIndex = 0; sourceMesh.actionManager && actionIndex < sourceMesh.actionManager.actions.length; actionIndex++) {\r\n                const action: IAction = sourceMesh.actionManager.actions[actionIndex];\r\n\r\n                if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger || action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                    const parameters = action.getTriggerParameter();\r\n                    const otherMesh = parameters.mesh ? parameters.mesh : parameters;\r\n\r\n                    const areIntersecting = otherMesh.intersectsMesh(sourceMesh, parameters.usePreciseIntersection);\r\n                    const currentIntersectionInProgress = sourceMesh._intersectionsInProgress.indexOf(otherMesh);\r\n\r\n                    if (areIntersecting && currentIntersectionInProgress === -1) {\r\n                        if (action.trigger === Constants.ACTION_OnIntersectionEnterTrigger) {\r\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\r\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\r\n                        } else if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                            sourceMesh._intersectionsInProgress.push(otherMesh);\r\n                        }\r\n                    } else if (!areIntersecting && currentIntersectionInProgress > -1) {\r\n                        //They intersected, and now they don't.\r\n\r\n                        //is this trigger an exit trigger? execute an event.\r\n                        if (action.trigger === Constants.ACTION_OnIntersectionExitTrigger) {\r\n                            action._executeCurrent(ActionEvent.CreateNew(sourceMesh, undefined, otherMesh));\r\n                        }\r\n\r\n                        //if this is an exit trigger, or no exit trigger exists, remove the id from the intersection in progress array.\r\n                        if (\r\n                            !sourceMesh.actionManager.hasSpecificTrigger(Constants.ACTION_OnIntersectionExitTrigger, (parameter) => {\r\n                                const parameterMesh = parameter.mesh ? parameter.mesh : parameter;\r\n                                return otherMesh === parameterMesh;\r\n                            }) ||\r\n                            action.trigger === Constants.ACTION_OnIntersectionExitTrigger\r\n                        ) {\r\n                            sourceMesh._intersectionsInProgress.splice(currentIntersectionInProgress, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _advancePhysicsEngineStep(step: number) {\r\n        // Do nothing. Code will be replaced if physics engine component is referenced\r\n    }\r\n\r\n    /**\r\n     * User updatable function that will return a deterministic frame time when engine is in deterministic lock step mode\r\n     * @returns the frame time\r\n     */\r\n    public getDeterministicFrameTime: () => number = () => {\r\n        return this._engine.getTimeStep();\r\n    };\r\n\r\n    /** @internal */\r\n    public _animate(customDeltaTime?: number): void {\r\n        // Nothing to do as long as Animatable have not been imported.\r\n    }\r\n\r\n    /** Execute all animations (for a frame) */\r\n    public animate() {\r\n        if (this._engine.isDeterministicLockStep()) {\r\n            let deltaTime = Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime)) + this._timeAccumulator;\r\n\r\n            const defaultFrameTime = this._engine.getTimeStep();\r\n            const defaultFPS = 1000.0 / defaultFrameTime / 1000.0;\r\n\r\n            let stepsTaken = 0;\r\n\r\n            const maxSubSteps = this._engine.getLockstepMaxSteps();\r\n\r\n            let internalSteps = Math.floor(deltaTime / defaultFrameTime);\r\n            internalSteps = Math.min(internalSteps, maxSubSteps);\r\n\r\n            while (deltaTime > 0 && stepsTaken < internalSteps) {\r\n                this.onBeforeStepObservable.notifyObservers(this);\r\n\r\n                // Animations\r\n                this._animationRatio = defaultFrameTime * defaultFPS;\r\n                this._animate(defaultFrameTime);\r\n                this.onAfterAnimationsObservable.notifyObservers(this);\r\n\r\n                // Physics\r\n                if (this.physicsEnabled) {\r\n                    this._advancePhysicsEngineStep(defaultFrameTime);\r\n                }\r\n\r\n                this.onAfterStepObservable.notifyObservers(this);\r\n                this._currentStepId++;\r\n\r\n                stepsTaken++;\r\n                deltaTime -= defaultFrameTime;\r\n            }\r\n\r\n            this._timeAccumulator = deltaTime < 0 ? 0 : deltaTime;\r\n        } else {\r\n            // Animations\r\n            const deltaTime = this.useConstantAnimationDeltaTime ? 16 : Math.max(Scene.MinDeltaTime, Math.min(this._engine.getDeltaTime(), Scene.MaxDeltaTime));\r\n            this._animationRatio = deltaTime * (60.0 / 1000.0);\r\n            this._animate();\r\n            this.onAfterAnimationsObservable.notifyObservers(this);\r\n\r\n            // Physics\r\n            if (this.physicsEnabled) {\r\n                this._advancePhysicsEngineStep(deltaTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clear(): void {\r\n        if (this.autoClearDepthAndStencil || this.autoClear) {\r\n            this._engine.clear(this._clearColor, this.autoClear || this.forceWireframe || this.forcePointsCloud, this.autoClearDepthAndStencil, this.autoClearDepthAndStencil);\r\n        }\r\n    }\r\n\r\n    private _checkCameraRenderTarget(camera: Nullable<Camera>) {\r\n        if (camera?.outputRenderTarget && !camera?.isRigCamera) {\r\n            camera.outputRenderTarget._cleared = false;\r\n        }\r\n        if (camera?.rigCameras?.length) {\r\n            for (let i = 0; i < camera.rigCameras.length; ++i) {\r\n                const rtt = camera.rigCameras[i].outputRenderTarget;\r\n                if (rtt) {\r\n                    rtt._cleared = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache of all meshes\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     */\r\n    public resetDrawCache(passId?: number): void {\r\n        if (!this.meshes) {\r\n            return;\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            mesh.resetDrawCache(passId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If this function is defined it will take precedence over the standard render() function.\r\n     */\r\n    public customRenderFunction?: (updateCameras: boolean, ignoreAnimations: boolean) => void;\r\n\r\n    private _renderWithFrameGraph(updateCameras = true, _ignoreAnimations = false, forceUpdateWorldMatrix = false): void {\r\n        this.activeCamera = null;\r\n        this.activeCameras = null;\r\n\r\n        // Update Cameras\r\n        if (updateCameras) {\r\n            for (const camera of this.cameras) {\r\n                camera.update();\r\n                if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                    // rig cameras\r\n                    for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                        camera._rigCameras[index].update();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        // We must keep these steps because the procedural texture component relies on them.\r\n        // TODO: move the procedural texture component to the frame graph.\r\n        for (const step of this._beforeClearStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Process meshes\r\n        if (this._engine.snapshotRendering && this._engine.snapshotRenderingMode === Constants.SNAPSHOTRENDERING_FAST) {\r\n            this._activeParticleSystems.reset();\r\n            this._activeSkeletons.reset();\r\n            this._softwareSkinnedMeshes.reset();\r\n        } else {\r\n            const meshes = this.getActiveMeshCandidates();\r\n            const len = meshes.length;\r\n\r\n            if (!this._activeMeshesFrozen) {\r\n                // Meshes are not frozen\r\n                this._activeParticleSystems.reset();\r\n                this._activeSkeletons.reset();\r\n                this._softwareSkinnedMeshes.reset();\r\n\r\n                for (let i = 0; i < len; i++) {\r\n                    const mesh = meshes.data[i];\r\n\r\n                    mesh._internalAbstractMeshDataInfo._wasActiveLastFrame = false;\r\n\r\n                    if (mesh.isBlocked) {\r\n                        continue;\r\n                    }\r\n\r\n                    this._totalVertices.addCount(mesh.getTotalVertices(), false);\r\n\r\n                    if (!mesh.isReady() || !mesh.isEnabled() || mesh.scaling.hasAZeroComponent) {\r\n                        continue;\r\n                    }\r\n\r\n                    mesh.computeWorldMatrix(forceUpdateWorldMatrix);\r\n\r\n                    if (mesh.actionManager && mesh.actionManager.hasSpecificTriggers2(Constants.ACTION_OnIntersectionEnterTrigger, Constants.ACTION_OnIntersectionExitTrigger)) {\r\n                        this._meshesForIntersections.pushNoDuplicate(mesh);\r\n                    }\r\n                }\r\n\r\n                // Animate Particle systems\r\n                if (this.particlesEnabled) {\r\n                    for (let particleIndex = 0; particleIndex < this.particleSystems.length; particleIndex++) {\r\n                        const particleSystem = this.particleSystems[particleIndex];\r\n\r\n                        if (!particleSystem.isStarted() || !particleSystem.emitter) {\r\n                            continue;\r\n                        }\r\n\r\n                        const emitter = <any>particleSystem.emitter;\r\n                        if (!emitter.position || emitter.isEnabled()) {\r\n                            this._activeParticleSystems.push(particleSystem);\r\n                            particleSystem.animate();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Meshes are frozen\r\n                if (!this._skipEvaluateActiveMeshesCompletely) {\r\n                    for (let i = 0; i < len; i++) {\r\n                        const mesh = meshes.data[i];\r\n\r\n                        if (mesh._internalAbstractMeshDataInfo._wasActiveLastFrame) {\r\n                            mesh.computeWorldMatrix();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.particlesEnabled) {\r\n                    const psLength = this._activeParticleSystems.length;\r\n                    for (let i = 0; i < psLength; i++) {\r\n                        this._activeParticleSystems.data[i].animate();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Render the graph\r\n        this.frameGraph?.execute();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderRenderTarget(renderTarget: RenderTargetTexture, activeCamera: Nullable<Camera>, useCameraPostProcess = false, dumpForDebug = false) {\r\n        this._intermediateRendering = true;\r\n        if (renderTarget._shouldRender()) {\r\n            this._renderId++;\r\n\r\n            this.activeCamera = activeCamera;\r\n\r\n            if (!this.activeCamera) {\r\n                throw new Error(\"Active camera not set\");\r\n            }\r\n\r\n            // Viewport\r\n            this._engine.setViewport(this.activeCamera.viewport);\r\n\r\n            // Camera\r\n            this.updateTransformMatrix();\r\n\r\n            renderTarget.render(useCameraPostProcess, dumpForDebug);\r\n        }\r\n        this._intermediateRendering = false;\r\n    }\r\n\r\n    /**\r\n     * Render the scene\r\n     * @param updateCameras defines a boolean indicating if cameras must update according to their inputs (true by default)\r\n     * @param ignoreAnimations defines a boolean indicating if animations should not be executed (false by default)\r\n     */\r\n    public render(updateCameras = true, ignoreAnimations = false): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (this.onReadyObservable.hasObservers() && this._executeWhenReadyTimeoutId === null) {\r\n            this._checkIsReady();\r\n        }\r\n\r\n        this._frameId++;\r\n        this._defaultFrameBufferCleared = false;\r\n        this._checkCameraRenderTarget(this.activeCamera);\r\n        if (this.activeCameras?.length) {\r\n            for (const c of this.activeCameras) {\r\n                this._checkCameraRenderTarget(c);\r\n            }\r\n        }\r\n\r\n        // Register components that have been associated lately to the scene.\r\n        this._registerTransientComponents();\r\n\r\n        this._activeParticles.fetchNewFrame();\r\n        this._totalVertices.fetchNewFrame();\r\n        this._activeIndices.fetchNewFrame();\r\n        this._activeBones.fetchNewFrame();\r\n        this._meshesForIntersections.reset();\r\n        this.resetCachedMaterial();\r\n\r\n        this.onBeforeAnimationsObservable.notifyObservers(this);\r\n\r\n        // Actions\r\n        if (this.actionManager) {\r\n            this.actionManager.processTrigger(Constants.ACTION_OnEveryFrameTrigger);\r\n        }\r\n\r\n        // Animations\r\n        if (!ignoreAnimations) {\r\n            this.animate();\r\n        }\r\n\r\n        // Before camera update steps\r\n        for (const step of this._beforeCameraUpdateStage) {\r\n            step.action();\r\n        }\r\n\r\n        // Update Cameras\r\n        if (updateCameras) {\r\n            if (this.activeCameras && this.activeCameras.length > 0) {\r\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\r\n                    const camera = this.activeCameras[cameraIndex];\r\n                    camera.update();\r\n                    if (camera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                        // rig cameras\r\n                        for (let index = 0; index < camera._rigCameras.length; index++) {\r\n                            camera._rigCameras[index].update();\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.activeCamera) {\r\n                this.activeCamera.update();\r\n                if (this.activeCamera.cameraRigMode !== Constants.RIG_MODE_NONE) {\r\n                    // rig cameras\r\n                    for (let index = 0; index < this.activeCamera._rigCameras.length; index++) {\r\n                        this.activeCamera._rigCameras[index].update();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Custom render function?\r\n        if (this.customRenderFunction) {\r\n            this._renderId++;\r\n            this._engine.currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n            this.customRenderFunction(updateCameras, ignoreAnimations);\r\n        } else {\r\n            // Before render\r\n            this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n            // Customs render targets\r\n            this.onBeforeRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n            const currentActiveCamera = this.activeCameras?.length ? this.activeCameras[0] : this.activeCamera;\r\n            if (this.renderTargetsEnabled) {\r\n                Tools.StartPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\r\n                for (let customIndex = 0; customIndex < this.customRenderTargets.length; customIndex++) {\r\n                    const renderTarget = this.customRenderTargets[customIndex];\r\n                    const activeCamera = renderTarget.activeCamera || this.activeCamera;\r\n\r\n                    this._renderRenderTarget(renderTarget, activeCamera, currentActiveCamera !== activeCamera, this.dumpNextRenderTargets);\r\n                }\r\n                Tools.EndPerformanceCounter(\"Custom render targets\", this.customRenderTargets.length > 0);\r\n                this._renderId++;\r\n            }\r\n\r\n            this._engine.currentRenderPassId = currentActiveCamera?.renderPassId ?? Constants.RENDERPASS_MAIN;\r\n\r\n            // Restore back buffer\r\n            this.activeCamera = currentActiveCamera;\r\n            if (this._activeCamera && this._activeCamera.cameraRigMode !== Constants.RIG_MODE_CUSTOM && !this.prePass) {\r\n                this._bindFrameBuffer(this._activeCamera, false);\r\n            }\r\n            this.onAfterRenderTargetsRenderObservable.notifyObservers(this);\r\n\r\n            for (const step of this._beforeClearStage) {\r\n                step.action();\r\n            }\r\n\r\n            // Clear\r\n            this._clearFrameBuffer(this.activeCamera);\r\n\r\n            // Collects render targets from external components.\r\n            for (const step of this._gatherRenderTargetsStage) {\r\n                step.action(this._renderTargets);\r\n            }\r\n\r\n            // Multi-cameras?\r\n            if (this.activeCameras && this.activeCameras.length > 0) {\r\n                for (let cameraIndex = 0; cameraIndex < this.activeCameras.length; cameraIndex++) {\r\n                    this._processSubCameras(this.activeCameras[cameraIndex], cameraIndex > 0);\r\n                }\r\n            } else {\r\n                if (!this.activeCamera) {\r\n                    throw new Error(\"No camera defined\");\r\n                }\r\n\r\n                this._processSubCameras(this.activeCamera, !!this.activeCamera.outputRenderTarget);\r\n            }\r\n        }\r\n\r\n        // Intersection checks\r\n        this._checkIntersections();\r\n\r\n        // Executes the after render stage actions.\r\n        for (const step of this._afterRenderStage) {\r\n            step.action();\r\n        }\r\n\r\n        // After render\r\n        if (this.afterRender) {\r\n            this.afterRender();\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n\r\n        // Cleaning\r\n        if (this._toBeDisposed.length) {\r\n            for (let index = 0; index < this._toBeDisposed.length; index++) {\r\n                const data = this._toBeDisposed[index];\r\n                if (data) {\r\n                    data.dispose();\r\n                }\r\n            }\r\n\r\n            this._toBeDisposed.length = 0;\r\n        }\r\n\r\n        if (this.dumpNextRenderTargets) {\r\n            this.dumpNextRenderTargets = false;\r\n        }\r\n\r\n        this._activeBones.addCount(0, true);\r\n        this._activeIndices.addCount(0, true);\r\n        this._activeParticles.addCount(0, true);\r\n\r\n        this._engine.restoreDefaultFramebuffer();\r\n    }\r\n\r\n    /**\r\n     * Freeze all materials\r\n     * A frozen material will not be updatable but should be faster to render\r\n     * Note: multimaterials will not be frozen, but their submaterials will\r\n     */\r\n    public freezeMaterials(): void {\r\n        for (let i = 0; i < this.materials.length; i++) {\r\n            this.materials[i].freeze();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unfreeze all materials\r\n     * A frozen material will not be updatable but should be faster to render\r\n     */\r\n    public unfreezeMaterials(): void {\r\n        for (let i = 0; i < this.materials.length; i++) {\r\n            this.materials[i].unfreeze();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all held resources\r\n     */\r\n    public dispose(): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.beforeRender = null;\r\n        this.afterRender = null;\r\n        this.metadata = null;\r\n\r\n        this.skeletons.length = 0;\r\n        this.morphTargetManagers.length = 0;\r\n        this._transientComponents.length = 0;\r\n        this._isReadyForMeshStage.clear();\r\n        this._beforeEvaluateActiveMeshStage.clear();\r\n        this._evaluateSubMeshStage.clear();\r\n        this._preActiveMeshStage.clear();\r\n        this._cameraDrawRenderTargetStage.clear();\r\n        this._beforeCameraDrawStage.clear();\r\n        this._beforeRenderTargetDrawStage.clear();\r\n        this._beforeRenderingGroupDrawStage.clear();\r\n        this._beforeRenderingMeshStage.clear();\r\n        this._afterRenderingMeshStage.clear();\r\n        this._afterRenderingGroupDrawStage.clear();\r\n        this._afterCameraDrawStage.clear();\r\n        this._afterRenderTargetDrawStage.clear();\r\n        this._afterRenderStage.clear();\r\n        this._beforeCameraUpdateStage.clear();\r\n        this._beforeClearStage.clear();\r\n        this._gatherRenderTargetsStage.clear();\r\n        this._gatherActiveCameraRenderTargetsStage.clear();\r\n        this._pointerMoveStage.clear();\r\n        this._pointerDownStage.clear();\r\n        this._pointerUpStage.clear();\r\n\r\n        this.importedMeshesFiles = [] as string[];\r\n\r\n        if (this._activeAnimatables && this.stopAllAnimations) {\r\n            // Ensures that no animatable notifies a callback that could start a new animation group, constantly adding new animatables to the active list...\r\n            for (const animatable of this._activeAnimatables) {\r\n                animatable.onAnimationEndObservable.clear();\r\n                animatable.onAnimationEnd = null;\r\n            }\r\n            this.stopAllAnimations();\r\n        }\r\n\r\n        this.resetCachedMaterial();\r\n\r\n        // Smart arrays\r\n        if (this.activeCamera) {\r\n            this.activeCamera._activeMeshes.dispose();\r\n            this.activeCamera = null;\r\n        }\r\n        this.activeCameras = null;\r\n\r\n        this._activeMeshes.dispose();\r\n        this._renderingManager.dispose();\r\n        this._processedMaterials.dispose();\r\n        this._activeParticleSystems.dispose();\r\n        this._activeSkeletons.dispose();\r\n        this._softwareSkinnedMeshes.dispose();\r\n        this._renderTargets.dispose();\r\n        this._materialsRenderTargets.dispose();\r\n        this._registeredForLateAnimationBindings.dispose();\r\n        this._meshesForIntersections.dispose();\r\n        this._toBeDisposed.length = 0;\r\n\r\n        // Abort active requests\r\n        const activeRequests = this._activeRequests.slice();\r\n        for (const request of activeRequests) {\r\n            request.abort();\r\n        }\r\n        this._activeRequests.length = 0;\r\n\r\n        // Events\r\n        try {\r\n            this.onDisposeObservable.notifyObservers(this);\r\n        } catch (e) {\r\n            Logger.Error(\"An error occurred while calling onDisposeObservable!\", e);\r\n        }\r\n\r\n        this.detachControl();\r\n\r\n        // Detach cameras\r\n        const canvas = this._engine.getInputElement();\r\n\r\n        if (canvas) {\r\n            for (let index = 0; index < this.cameras.length; index++) {\r\n                this.cameras[index].detachControl();\r\n            }\r\n        }\r\n\r\n        // Release animation groups\r\n        this._disposeList(this.animationGroups);\r\n\r\n        // Release lights\r\n        this._disposeList(this.lights);\r\n\r\n        // Release materials\r\n        if (this._defaultMaterial) {\r\n            this._defaultMaterial.dispose();\r\n        }\r\n        this._disposeList(this.multiMaterials);\r\n        this._disposeList(this.materials);\r\n\r\n        // Release meshes\r\n        this._disposeList(this.meshes, (item) => item.dispose(true));\r\n        this._disposeList(this.transformNodes, (item) => item.dispose(true));\r\n\r\n        // Release cameras\r\n        const cameras = this.cameras;\r\n        this._disposeList(cameras);\r\n\r\n        // Release particles\r\n        this._disposeList(this.particleSystems);\r\n\r\n        // Release postProcesses\r\n        this._disposeList(this.postProcesses);\r\n\r\n        // Release textures\r\n        this._disposeList(this.textures);\r\n\r\n        // Release morph targets\r\n        this._disposeList(this.morphTargetManagers);\r\n\r\n        // Release frame graphs\r\n        this._disposeList(this.frameGraphs);\r\n\r\n        // Release UBO\r\n        this._sceneUbo.dispose();\r\n\r\n        if (this._multiviewSceneUbo) {\r\n            this._multiviewSceneUbo.dispose();\r\n        }\r\n\r\n        // Post-processes\r\n        this.postProcessManager.dispose();\r\n\r\n        // Components\r\n        this._disposeList(this._components);\r\n\r\n        // Remove from engine\r\n        let index = this._engine.scenes.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._engine.scenes.splice(index, 1);\r\n        }\r\n\r\n        if (EngineStore._LastCreatedScene === this) {\r\n            EngineStore._LastCreatedScene = null;\r\n            let engineIndex = EngineStore.Instances.length - 1;\r\n            while (engineIndex >= 0) {\r\n                const engine = EngineStore.Instances[engineIndex];\r\n                if (engine.scenes.length > 0) {\r\n                    EngineStore._LastCreatedScene = engine.scenes[this._engine.scenes.length - 1];\r\n                    break;\r\n                }\r\n                engineIndex--;\r\n            }\r\n        }\r\n\r\n        index = this._engine._virtualScenes.indexOf(this);\r\n\r\n        if (index > -1) {\r\n            this._engine._virtualScenes.splice(index, 1);\r\n        }\r\n\r\n        this._engine.wipeCaches(true);\r\n        this.onDisposeObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderTargetsRenderObservable.clear();\r\n        this.onAfterRenderTargetsRenderObservable.clear();\r\n        this.onAfterStepObservable.clear();\r\n        this.onBeforeStepObservable.clear();\r\n        this.onBeforeActiveMeshesEvaluationObservable.clear();\r\n        this.onAfterActiveMeshesEvaluationObservable.clear();\r\n        this.onBeforeParticlesRenderingObservable.clear();\r\n        this.onAfterParticlesRenderingObservable.clear();\r\n        this.onBeforeDrawPhaseObservable.clear();\r\n        this.onAfterDrawPhaseObservable.clear();\r\n        this.onBeforeAnimationsObservable.clear();\r\n        this.onAfterAnimationsObservable.clear();\r\n        this.onDataLoadedObservable.clear();\r\n        this.onBeforeRenderingGroupObservable.clear();\r\n        this.onAfterRenderingGroupObservable.clear();\r\n        this.onMeshImportedObservable.clear();\r\n        this.onBeforeCameraRenderObservable.clear();\r\n        this.onAfterCameraRenderObservable.clear();\r\n        this.onAfterRenderCameraObservable.clear();\r\n        this.onReadyObservable.clear();\r\n        this.onNewCameraAddedObservable.clear();\r\n        this.onCameraRemovedObservable.clear();\r\n        this.onNewLightAddedObservable.clear();\r\n        this.onLightRemovedObservable.clear();\r\n        this.onNewGeometryAddedObservable.clear();\r\n        this.onGeometryRemovedObservable.clear();\r\n        this.onNewTransformNodeAddedObservable.clear();\r\n        this.onTransformNodeRemovedObservable.clear();\r\n        this.onNewMeshAddedObservable.clear();\r\n        this.onMeshRemovedObservable.clear();\r\n        this.onNewSkeletonAddedObservable.clear();\r\n        this.onSkeletonRemovedObservable.clear();\r\n        this.onNewMaterialAddedObservable.clear();\r\n        this.onNewMultiMaterialAddedObservable.clear();\r\n        this.onMaterialRemovedObservable.clear();\r\n        this.onMultiMaterialRemovedObservable.clear();\r\n        this.onNewTextureAddedObservable.clear();\r\n        this.onTextureRemovedObservable.clear();\r\n        this.onNewFrameGraphAddedObservable.clear();\r\n        this.onFrameGraphRemovedObservable.clear();\r\n        this.onNewObjectRendererAddedObservable.clear();\r\n        this.onObjectRendererRemovedObservable.clear();\r\n        this.onPrePointerObservable.clear();\r\n        this.onPointerObservable.clear();\r\n        this.onPreKeyboardObservable.clear();\r\n        this.onKeyboardObservable.clear();\r\n        this.onActiveCameraChanged.clear();\r\n        this.onScenePerformancePriorityChangedObservable.clear();\r\n        this.onClearColorChangedObservable.clear();\r\n        this.onEnvironmentTextureChangedObservable.clear();\r\n        this.onMeshUnderPointerUpdatedObservable.clear();\r\n\r\n        ResetMatrixFunctions();\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    private _disposeList<T extends IDisposable>(items: T[], callback?: (item: T) => void): void {\r\n        const itemsCopy = items.slice(0);\r\n        callback = callback ?? ((item) => item.dispose());\r\n        for (const item of itemsCopy) {\r\n            callback(item);\r\n        }\r\n        items.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets if the scene is already disposed\r\n     */\r\n    public get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Call this function to reduce memory footprint of the scene.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedVertexData(): void {\r\n        for (let meshIndex = 0; meshIndex < this.meshes.length; meshIndex++) {\r\n            const mesh = this.meshes[meshIndex];\r\n            const geometry = (<Mesh>mesh).geometry;\r\n\r\n            if (geometry) {\r\n                geometry.clearCachedData();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will remove the local cached buffer data from texture.\r\n     * It will save memory but will prevent the texture from being rebuilt\r\n     */\r\n    public cleanCachedTextureBuffer(): void {\r\n        for (const baseTexture of this.textures) {\r\n            const buffer = (<Texture>baseTexture)._buffer;\r\n\r\n            if (buffer) {\r\n                (<Texture>baseTexture)._buffer = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the world extend vectors with an optional filter\r\n     *\r\n     * @param filterPredicate the predicate - which meshes should be included when calculating the world size\r\n     * @returns {{ min: Vector3; max: Vector3 }} min and max vectors\r\n     */\r\n    public getWorldExtends(filterPredicate?: (mesh: AbstractMesh) => boolean): { min: Vector3; max: Vector3 } {\r\n        const min = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        const max = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n        filterPredicate = filterPredicate || (() => true);\r\n        const meshes = this.meshes.filter(filterPredicate);\r\n        for (const mesh of meshes) {\r\n            mesh.computeWorldMatrix(true);\r\n\r\n            if (!mesh.subMeshes || mesh.subMeshes.length === 0 || mesh.infiniteDistance) {\r\n                continue;\r\n            }\r\n\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const minBox = boundingInfo.boundingBox.minimumWorld;\r\n            const maxBox = boundingInfo.boundingBox.maximumWorld;\r\n\r\n            Vector3.CheckExtends(minBox, min, max);\r\n            Vector3.CheckExtends(maxBox, min, max);\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max,\r\n        };\r\n    }\r\n\r\n    // Picking\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n     * @param camera defines the camera to use for the picking\r\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n     * @returns a Ray\r\n     */\r\n    public createPickingRay(x: number, y: number, world: Nullable<Matrix>, camera: Nullable<Camera>, cameraViewSpace = false): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param world defines the world matrix to use if you want to pick in object space (instead of world space)\r\n     * @param result defines the ray where to store the picking ray\r\n     * @param camera defines the camera to use for the picking\r\n     * @param cameraViewSpace defines if picking will be done in view space (false by default)\r\n     * @param enableDistantPicking defines if picking should handle large values for mesh position/scaling (false by default)\r\n     * @returns the current scene\r\n     */\r\n    public createPickingRayToRef(\r\n        x: number,\r\n        y: number,\r\n        world: Nullable<Matrix>,\r\n        result: Ray,\r\n        camera: Nullable<Camera>,\r\n        cameraViewSpace = false,\r\n        enableDistantPicking = false\r\n    ): Scene {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param camera defines the camera to use for the picking\r\n     * @returns a Ray\r\n     */\r\n    public createPickingRayInCameraSpace(x: number, y: number, camera?: Camera): Ray {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Creates a ray that can be used to pick in the scene\r\n     * @param x defines the x coordinate of the origin (on-screen)\r\n     * @param y defines the y coordinate of the origin (on-screen)\r\n     * @param result defines the ray where to store the picking ray\r\n     * @param camera defines the camera to use for the picking\r\n     * @returns the current scene\r\n     */\r\n    public createPickingRayInCameraSpaceToRef(x: number, y: number, result: Ray, camera?: Camera): Scene {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /** @internal */\r\n    public _registeredActions: number = 0;\r\n\r\n    /** Launch a ray to try to pick a mesh in the scene\r\n     * @param x position on screen\r\n     * @param y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns a PickingInfo\r\n     */\r\n    public pick(x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>, trianglePredicate?: TrianglePickingPredicate): PickingInfo {\r\n        const warn = _WarnImport(\"Ray\", true);\r\n        if (warn) {\r\n            Logger.Warn(warn);\r\n        }\r\n        // Dummy info if picking as not been imported\r\n        return new PickingInfo();\r\n    }\r\n\r\n    /** Launch a ray to try to pick a mesh in the scene using only bounding information of the main mesh (not using submeshes)\r\n     * @param x position on screen\r\n     * @param y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @returns a PickingInfo (Please note that some info will not be set like distance, bv, bu and everything that cannot be capture by only using bounding infos)\r\n     */\r\n    public pickWithBoundingInfo(x: number, y: number, predicate?: MeshPredicate, fastCheck?: boolean, camera?: Nullable<Camera>): Nullable<PickingInfo> {\r\n        const warn = _WarnImport(\"Ray\", true);\r\n        if (warn) {\r\n            Logger.Warn(warn);\r\n        }\r\n        // Dummy info if picking as not been imported\r\n        return new PickingInfo();\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Use the given ray to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param ray The ray to use to pick meshes\r\n     * @param predicate Predicate function used to determine eligible meshes. Can be set to null. In this case, a mesh must have isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param fastCheck defines if the first intersection will be used (and not the closest)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns a PickingInfo\r\n     */\r\n    public pickWithRay(ray: Ray, predicate?: MeshPredicate, fastCheck?: boolean, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Launch a ray to try to pick a mesh in the scene. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param x X position on screen\r\n     * @param y Y position on screen\r\n     * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param camera camera to use for computing the picking ray. Can be set to null. In this case, the scene.activeCamera will be used\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns an array of PickingInfo\r\n     */\r\n    public multiPick(x: number, y: number, predicate?: MeshPredicate, camera?: Camera, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Launch a ray to try to pick a mesh in the scene\r\n     * @param ray Ray to use\r\n     * @param predicate Predicate function used to determine eligible meshes and instances. Can be set to null. In this case, a mesh must be enabled, visible and with isPickable set to true. thinInstanceIndex is -1 when the mesh is non-instanced\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @returns an array of PickingInfo\r\n     */\r\n    public multiPickWithRay(ray: Ray, predicate?: MeshPredicate, trianglePredicate?: TrianglePickingPredicate): Nullable<PickingInfo[]> {\r\n        throw _WarnImport(\"Ray\");\r\n    }\r\n\r\n    /**\r\n     * Force the value of meshUnderPointer\r\n     * @param mesh defines the mesh to use\r\n     * @param pointerId optional pointer id when using more than one pointer\r\n     * @param pickResult optional pickingInfo data used to find mesh\r\n     */\r\n    public setPointerOverMesh(mesh: Nullable<AbstractMesh>, pointerId?: number, pickResult?: Nullable<PickingInfo>): void {\r\n        this._inputManager.setPointerOverMesh(mesh, pointerId, pickResult);\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh under the pointer\r\n     * @returns a Mesh or null if no mesh is under the pointer\r\n     */\r\n    public getPointerOverMesh(): Nullable<AbstractMesh> {\r\n        return this._inputManager.getPointerOverMesh();\r\n    }\r\n\r\n    // Misc.\r\n    /** @internal */\r\n    public _rebuildGeometries(): void {\r\n        for (const geometry of this.geometries) {\r\n            geometry._rebuild();\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            mesh._rebuild();\r\n        }\r\n\r\n        if (this.postProcessManager) {\r\n            this.postProcessManager._rebuild();\r\n        }\r\n\r\n        for (const component of this._components) {\r\n            component.rebuild();\r\n        }\r\n\r\n        for (const system of this.particleSystems) {\r\n            system.rebuild();\r\n        }\r\n\r\n        if (this.spriteManagers) {\r\n            for (const spriteMgr of this.spriteManagers) {\r\n                spriteMgr.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuildTextures(): void {\r\n        for (const texture of this.textures) {\r\n            texture._rebuild(true);\r\n        }\r\n\r\n        this.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Get from a list of objects by tags\r\n     * @param list the list of objects to use\r\n     * @param tagsQuery the query to use\r\n     * @param filter a predicate to filter for tags\r\n     * @returns\r\n     */\r\n    private _getByTags<T>(list: T[], tagsQuery: string, filter?: (item: T) => boolean): T[] {\r\n        if (tagsQuery === undefined) {\r\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\r\n            return list;\r\n        }\r\n\r\n        const listByTags = [];\r\n\r\n        for (const i in list) {\r\n            const item = list[i];\r\n            if (Tags && Tags.MatchesQuery(item, tagsQuery) && (!filter || filter(item))) {\r\n                listByTags.push(item);\r\n            }\r\n        }\r\n\r\n        return listByTags;\r\n    }\r\n\r\n    /**\r\n     * Get a list of meshes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Mesh\r\n     */\r\n    public getMeshesByTags(tagsQuery: string, filter?: (mesh: AbstractMesh) => boolean): AbstractMesh[] {\r\n        return this._getByTags(this.meshes, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of cameras by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Camera\r\n     */\r\n    public getCamerasByTags(tagsQuery: string, filter?: (camera: Camera) => boolean): Camera[] {\r\n        return this._getByTags(this.cameras, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of lights by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Light\r\n     */\r\n    public getLightsByTags(tagsQuery: string, filter?: (light: Light) => boolean): Light[] {\r\n        return this._getByTags(this.lights, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of materials by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Material\r\n     */\r\n    public getMaterialByTags(tagsQuery: string, filter?: (material: Material) => boolean): Material[] {\r\n        return this._getByTags(this.materials, tagsQuery, filter).concat(this._getByTags(this.multiMaterials, tagsQuery, filter));\r\n    }\r\n\r\n    /**\r\n     * Get a list of transform nodes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getTransformNodesByTags(tagsQuery: string, filter?: (transform: TransformNode) => boolean): TransformNode[] {\r\n        return this._getByTags(this.transformNodes, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Overrides the default sort function applied in the rendering group to prepare the meshes.\r\n     * This allowed control for front to back rendering or reversly depending of the special needs.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param opaqueSortCompareFn The opaque queue comparison function use to sort.\r\n     * @param alphaTestSortCompareFn The alpha test queue comparison function use to sort.\r\n     * @param transparentSortCompareFn The transparent queue comparison function use to sort.\r\n     */\r\n    public setRenderingOrder(\r\n        renderingGroupId: number,\r\n        opaqueSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        alphaTestSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null,\r\n        transparentSortCompareFn: Nullable<(a: SubMesh, b: SubMesh) => number> = null\r\n    ): void {\r\n        this._renderingManager.setRenderingOrder(renderingGroupId, opaqueSortCompareFn, alphaTestSortCompareFn, transparentSortCompareFn);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the stencil and depth buffer are cleared between two rendering groups.\r\n     *\r\n     * @param renderingGroupId The rendering group id corresponding to its index\r\n     * @param autoClearDepthStencil Automatically clears depth and stencil between groups if true.\r\n     * @param depth Automatically clears depth between groups if true and autoClear is true.\r\n     * @param stencil Automatically clears stencil between groups if true and autoClear is true.\r\n     */\r\n    public setRenderingAutoClearDepthStencil(renderingGroupId: number, autoClearDepthStencil: boolean, depth = true, stencil = true): void {\r\n        this._renderingManager.setRenderingAutoClearDepthStencil(renderingGroupId, autoClearDepthStencil, depth, stencil);\r\n    }\r\n\r\n    /**\r\n     * Gets the current auto clear configuration for one rendering group of the rendering\r\n     * manager.\r\n     * @param index the rendering group index to get the information for\r\n     * @returns The auto clear setup for the requested rendering group\r\n     */\r\n    public getAutoClearDepthStencilSetup(index: number): IRenderingManagerAutoClearSetup {\r\n        return this._renderingManager.getAutoClearDepthStencilSetup(index);\r\n    }\r\n\r\n    private _blockMaterialDirtyMechanism = false;\r\n\r\n    /** @internal */\r\n    public _forceBlockMaterialDirtyMechanism(value: boolean) {\r\n        this._blockMaterialDirtyMechanism = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean blocking all the calls to markAllMaterialsAsDirty (ie. the materials won't be updated if they are out of sync) */\r\n    public get blockMaterialDirtyMechanism(): boolean {\r\n        return this._blockMaterialDirtyMechanism;\r\n    }\r\n\r\n    public set blockMaterialDirtyMechanism(value: boolean) {\r\n        if (this._blockMaterialDirtyMechanism === value) {\r\n            return;\r\n        }\r\n\r\n        this._blockMaterialDirtyMechanism = value;\r\n\r\n        if (!value) {\r\n            // Do a complete update\r\n            this.markAllMaterialsAsDirty(Constants.MATERIAL_AllDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials as dirty to trigger new shader compilation\r\n     * @param flag defines the flag used to specify which material part must be marked as dirty\r\n     * @param predicate If not null, it will be used to specify if a material has to be marked as dirty\r\n     */\r\n    public markAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        if (this._blockMaterialDirtyMechanism) {\r\n            return;\r\n        }\r\n\r\n        for (const material of this.materials) {\r\n            if (predicate && !predicate(material)) {\r\n                continue;\r\n            }\r\n            material.markAsDirty(flag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer, responseURL?: string) => void,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = LoadFile(fileOrUrl, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    public async _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: false,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string>;\r\n\r\n    public async _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: true,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<ArrayBuffer>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _loadFileAsync(\r\n        fileOrUrl: File | string,\r\n        onProgress?: (data: any) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string | ArrayBuffer> {\r\n        return await new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                fileOrUrl,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useOfflineSupport,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(exception);\r\n                },\r\n                onOpened\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _requestFile(\r\n        url: string,\r\n        onSuccess: (data: string | ArrayBuffer, request?: WebRequest) => void,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (error: RequestFileError) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = RequestFile(url, onSuccess, onProgress, useOfflineSupport ? this.offlineProvider : undefined, useArrayBuffer, onError, onOpened);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _requestFileAsync(\r\n        url: string,\r\n        onProgress?: (ev: ProgressEvent) => void,\r\n        useOfflineSupport?: boolean,\r\n        useArrayBuffer?: boolean,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): Promise<string | ArrayBuffer> {\r\n        return await new Promise((resolve, reject) => {\r\n            this._requestFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useOfflineSupport,\r\n                useArrayBuffer,\r\n                (error) => {\r\n                    reject(error);\r\n                },\r\n                onOpened\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readFile(\r\n        file: File,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        onProgress?: (ev: ProgressEvent) => any,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (error: ReadFileError) => void\r\n    ): IFileRequest {\r\n        const request = ReadFile(file, onSuccess, onProgress, useArrayBuffer, onError);\r\n        this._activeRequests.push(request);\r\n        request.onCompleteObservable.add((request) => {\r\n            this._activeRequests.splice(this._activeRequests.indexOf(request), 1);\r\n        });\r\n        return request;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async _readFileAsync(file: File, onProgress?: (ev: ProgressEvent) => any, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return await new Promise((resolve, reject) => {\r\n            this._readFile(\r\n                file,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                onProgress,\r\n                useArrayBuffer,\r\n                (error) => {\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Internal perfCollector instance used for sharing between inspector and playground.\r\n     * Marked as protected to allow sharing between prototype extensions, but disallow access at toplevel.\r\n     */\r\n    protected _perfCollector: Nullable<PerformanceViewerCollector> = null;\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * This method gets the performance collector belonging to the scene, which is generally shared with the inspector.\r\n     * @returns the perf collector belonging to the scene.\r\n     */\r\n    public getPerfCollector(): PerformanceViewerCollector {\r\n        throw _WarnImport(\"performanceViewerSceneExtension\");\r\n    }\r\n\r\n    // deprecated\r\n\r\n    /**\r\n     * Sets the active camera of the scene using its Id\r\n     * @param id defines the camera's Id\r\n     * @returns the new active camera or null if none found.\r\n     * @deprecated Please use setActiveCameraById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    setActiveCameraByID(id: string): Nullable<Camera> {\r\n        return this.setActiveCameraById(id);\r\n    }\r\n    /**\r\n     * Get a material using its id\r\n     * @param id defines the material's Id\r\n     * @returns the material or null if none found.\r\n     * @deprecated Please use getMaterialById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getMaterialByID(id: string): Nullable<Material> {\r\n        return this.getMaterialById(id);\r\n    }\r\n    /**\r\n     * Gets a the last added material using a given id\r\n     * @param id defines the material's Id\r\n     * @returns the last material with the given id or null if none found.\r\n     * @deprecated Please use getLastMaterialById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLastMaterialByID(id: string): Nullable<Material> {\r\n        return this.getLastMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Get a texture using its unique id\r\n     * @param uniqueId defines the texture's unique id\r\n     * @returns the texture or null if none found.\r\n     * @deprecated Please use getTextureByUniqueId instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getTextureByUniqueID(uniqueId: number): Nullable<BaseTexture> {\r\n        return this.getTextureByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a camera using its Id\r\n     * @param id defines the Id to look for\r\n     * @returns the camera or null if not found\r\n     * @deprecated Please use getCameraById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getCameraByID(id: string): Nullable<Camera> {\r\n        return this.getCameraById(id);\r\n    }\r\n    /**\r\n     * Gets a camera using its unique Id\r\n     * @param uniqueId defines the unique Id to look for\r\n     * @returns the camera or null if not found\r\n     * @deprecated Please use getCameraByUniqueId instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getCameraByUniqueID(uniqueId: number): Nullable<Camera> {\r\n        return this.getCameraByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a bone using its Id\r\n     * @param id defines the bone's Id\r\n     * @returns the bone or null if not found\r\n     * @deprecated Please use getBoneById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getBoneByID(id: string): Nullable<Bone> {\r\n        return this.getBoneById(id);\r\n    }\r\n    /**\r\n     * Gets a light node using its Id\r\n     * @param id defines the light's Id\r\n     * @returns the light or null if none found.\r\n     * @deprecated Please use getLightById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLightByID(id: string): Nullable<Light> {\r\n        return this.getLightById(id);\r\n    }\r\n    /**\r\n     * Gets a light node using its scene-generated unique Id\r\n     * @param uniqueId defines the light's unique Id\r\n     * @returns the light or null if none found.\r\n     * @deprecated Please use getLightByUniqueId instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLightByUniqueID(uniqueId: number): Nullable<Light> {\r\n        return this.getLightByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a particle system by Id\r\n     * @param id defines the particle system Id\r\n     * @returns the corresponding system or null if none found\r\n     * @deprecated Please use getParticleSystemById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getParticleSystemByID(id: string): Nullable<IParticleSystem> {\r\n        return this.getParticleSystemById(id);\r\n    }\r\n    /**\r\n     * Gets a geometry using its Id\r\n     * @param id defines the geometry's Id\r\n     * @returns the geometry or null if none found.\r\n     * @deprecated Please use getGeometryById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getGeometryByID(id: string): Nullable<Geometry> {\r\n        return this.getGeometryById(id);\r\n    }\r\n    /**\r\n     * Gets the first added mesh found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the mesh found or null if not found at all\r\n     * @deprecated Please use getMeshById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getMeshByID(id: string): Nullable<AbstractMesh> {\r\n        return this.getMeshById(id);\r\n    }\r\n    /**\r\n     * Gets a mesh with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     * @deprecated Please use getMeshByUniqueId instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getMeshByUniqueID(uniqueId: number): Nullable<AbstractMesh> {\r\n        return this.getMeshByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a the last added mesh using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found mesh or null if not found at all.\r\n     * @deprecated Please use getLastMeshById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLastMeshByID(id: string): Nullable<AbstractMesh> {\r\n        return this.getLastMeshById(id);\r\n    }\r\n    /**\r\n     * Gets a list of meshes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of meshes\r\n     * @deprecated Please use getMeshesById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getMeshesByID(id: string): Array<AbstractMesh> {\r\n        return this.getMeshesById(id);\r\n    }\r\n    /**\r\n     * Gets the first added transform node found of a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     * @deprecated Please use getTransformNodeById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getTransformNodeByID(id: string): Nullable<TransformNode> {\r\n        return this.getTransformNodeById(id);\r\n    }\r\n    /**\r\n     * Gets a transform node with its auto-generated unique Id\r\n     * @param uniqueId defines the unique Id to search for\r\n     * @returns the found transform node or null if not found at all.\r\n     * @deprecated Please use getTransformNodeByUniqueId instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getTransformNodeByUniqueID(uniqueId: number): Nullable<TransformNode> {\r\n        return this.getTransformNodeByUniqueId(uniqueId);\r\n    }\r\n    /**\r\n     * Gets a list of transform nodes using their Id\r\n     * @param id defines the Id to search for\r\n     * @returns a list of transform nodes\r\n     * @deprecated Please use getTransformNodesById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getTransformNodesByID(id: string): Array<TransformNode> {\r\n        return this.getTransformNodesById(id);\r\n    }\r\n    /**\r\n     * Gets a node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     * @deprecated Please use getNodeById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getNodeByID(id: string): Nullable<Node> {\r\n        return this.getNodeById(id);\r\n    }\r\n    /**\r\n     * Gets a the last added node (Mesh, Camera, Light) using a given Id\r\n     * @param id defines the Id to search for\r\n     * @returns the found node or null if not found at all\r\n     * @deprecated Please use getLastEntryById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLastEntryByID(id: string): Nullable<Node> {\r\n        return this.getLastEntryById(id);\r\n    }\r\n    /**\r\n     * Gets a skeleton using a given Id (if many are found, this function will pick the last one)\r\n     * @param id defines the Id to search for\r\n     * @returns the found skeleton or null if not found at all.\r\n     * @deprecated Please use getLastSkeletonById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    getLastSkeletonByID(id: string): Nullable<Skeleton> {\r\n        return this.getLastSkeletonById(id);\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.Scene\", Scene);\r\n"],
  "mappings": "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",
  "names": ["DeviceType", "PointerInput", "NativePointerInput", "DualShockInput", "DualSenseInput", "XboxInput", "SwitchInput", "DeviceInputEventType", "deviceEvent", "engine", "i", "engine", "scene", "camera", "DepthTextureType", "shadowMap", "pickResult", "pi", "ScenePerformancePriority", "len", "index", "request"]
}
