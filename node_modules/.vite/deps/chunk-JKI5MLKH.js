// node_modules/@babylonjs/core/Maths/math.constants.js
var ToGammaSpace = 1 / 2.2;
var ToLinearSpace = 2.2;
var PHI = (1 + Math.sqrt(5)) / 2;
var Epsilon = 1e-3;

// node_modules/@babylonjs/core/Misc/arrayTools.js
function BuildArray(size, itemBuilder) {
  const a = [];
  for (let i = 0; i < size; ++i) {
    a.push(itemBuilder());
  }
  return a;
}
function BuildTuple(size, itemBuilder) {
  return BuildArray(size, itemBuilder);
}
function ObserveArrayFunction(object, functionName, callback) {
  const oldFunction = object[functionName];
  if (typeof oldFunction !== "function") {
    return null;
  }
  const newFunction = function() {
    const previousLength = object.length;
    const returnValue = newFunction.previous.apply(object, arguments);
    callback(functionName, previousLength);
    return returnValue;
  };
  oldFunction.next = newFunction;
  newFunction.previous = oldFunction;
  object[functionName] = newFunction;
  return () => {
    const previous = newFunction.previous;
    if (!previous) {
      return;
    }
    const next = newFunction.next;
    if (next) {
      previous.next = next;
      next.previous = previous;
    } else {
      previous.next = void 0;
      object[functionName] = previous;
    }
    newFunction.next = void 0;
    newFunction.previous = void 0;
  };
}
var observedArrayFunctions = ["push", "splice", "pop", "shift", "unshift"];
function _ObserveArray(array, callback) {
  const unObserveFunctions = observedArrayFunctions.map((name) => {
    return ObserveArrayFunction(array, name, callback);
  });
  return () => {
    for (const unObserveFunction of unObserveFunctions) {
      unObserveFunction?.();
    }
  };
}

export {
  ToGammaSpace,
  ToLinearSpace,
  PHI,
  Epsilon,
  BuildArray,
  BuildTuple,
  _ObserveArray
};
//# sourceMappingURL=chunk-JKI5MLKH.js.map
