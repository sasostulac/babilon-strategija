{
  "version": 3,
  "sources": ["../../../dev/loaders/src/OBJ/mtlFileLoader.ts", "../../../dev/loaders/src/OBJ/solidParser.ts", "../../../dev/loaders/src/OBJ/objFileLoader.metadata.ts", "../../../dev/loaders/src/OBJ/objFileLoader.ts"],
  "sourcesContent": ["import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n/**\r\n * Class reading and parsing the MTL file bundled with the obj file.\r\n */\r\nexport class MTLFileLoader {\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static INVERT_TEXTURE_Y = true;\r\n\r\n    /**\r\n     * All material loaded from the mtl will be set here\r\n     */\r\n    public materials: StandardMaterial[] = [];\r\n\r\n    /**\r\n     * This function will read the mtl file and create each material described inside\r\n     * This function could be improve by adding :\r\n     * -some component missing (Ni, Tf...)\r\n     * -including the specific options available\r\n     *\r\n     * @param scene defines the scene the material will be created in\r\n     * @param data defines the mtl data to parse\r\n     * @param rootUrl defines the rooturl to use in order to load relative dependencies\r\n     * @param assetContainer defines the asset container to store the material in (can be null)\r\n     */\r\n    public parseMTL(scene: Scene, data: string | ArrayBuffer, rootUrl: string, assetContainer: Nullable<AssetContainer>): void {\r\n        if (data instanceof ArrayBuffer) {\r\n            return;\r\n        }\r\n\r\n        //Split the lines from the file\r\n        const lines = data.split(\"\\n\");\r\n        // whitespace char ie: [ \\t\\r\\n\\f]\r\n        const delimiterPattern = /\\s+/;\r\n        //Array with RGB colors\r\n        let color: number[];\r\n        //New material\r\n        let material: Nullable<StandardMaterial> = null;\r\n\r\n        //Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim();\r\n\r\n            // Blank line or comment\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            }\r\n\r\n            //Get the first parameter (keyword)\r\n            const pos = line.indexOf(\" \");\r\n            let key = pos >= 0 ? line.substring(0, pos) : line;\r\n            key = key.toLowerCase();\r\n\r\n            //Get the data following the key\r\n            const value: string = pos >= 0 ? line.substring(pos + 1).trim() : \"\";\r\n\r\n            //This mtl keyword will create the new material\r\n            if (key === \"newmtl\") {\r\n                //Check if it is the first material.\r\n                // Materials specifications are described after this keyword.\r\n                if (material) {\r\n                    //Add the previous material in the material array.\r\n                    this.materials.push(material);\r\n                }\r\n                //Create a new material.\r\n                // value is the name of the material read in the mtl file\r\n\r\n                scene._blockEntityCollection = !!assetContainer;\r\n                material = new StandardMaterial(value, scene);\r\n                material._parentContainer = assetContainer;\r\n                scene._blockEntityCollection = false;\r\n            } else if (key === \"kd\" && material) {\r\n                // Diffuse color (color under white light) using RGB values\r\n\r\n                //value  = \"r g b\"\r\n                color = value.split(delimiterPattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.diffuseColor = Color3.FromArray(color);\r\n            } else if (key === \"ka\" && material) {\r\n                // Ambient color (color under shadow) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = value.split(delimiterPattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set tghe color into the material\r\n                material.ambientColor = Color3.FromArray(color);\r\n            } else if (key === \"ks\" && material) {\r\n                // Specular color (color when light is reflected from shiny surface) using RGB values\r\n\r\n                //value = \"r g b\"\r\n                color = value.split(delimiterPattern, 3).map(parseFloat);\r\n                //color = [r,g,b]\r\n                //Set the color into the material\r\n                material.specularColor = Color3.FromArray(color);\r\n            } else if (key === \"ke\" && material) {\r\n                // Emissive color using RGB values\r\n                color = value.split(delimiterPattern, 3).map(parseFloat);\r\n                material.emissiveColor = Color3.FromArray(color);\r\n            } else if (key === \"ns\" && material) {\r\n                //value = \"Integer\"\r\n                material.specularPower = parseFloat(value);\r\n            } else if (key === \"d\" && material) {\r\n                //d is dissolve for current material. It mean alpha for BABYLON\r\n                material.alpha = parseFloat(value);\r\n\r\n                //Texture\r\n                //This part can be improved by adding the possible options of texture\r\n            } else if (key === \"map_ka\" && material) {\r\n                // ambient texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.ambientTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_kd\" && material) {\r\n                // Diffuse texture map with a loaded image\r\n                material.diffuseTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ks\" && material) {\r\n                // Specular texture map with a loaded image\r\n                //We must first get the folder of the image\r\n                material.specularTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n            } else if (key === \"map_ns\") {\r\n                //Specular\r\n                //Specular highlight component\r\n                //We must first get the folder of the image\r\n                //\r\n                //Not supported by BABYLON\r\n                //\r\n                //    continue;\r\n            } else if (key === \"map_bump\" && material) {\r\n                //The bump texture\r\n                const values = value.split(delimiterPattern);\r\n                const bumpMultiplierIndex = values.indexOf(\"-bm\");\r\n                let bumpMultiplier: Nullable<string> = null;\r\n\r\n                if (bumpMultiplierIndex >= 0) {\r\n                    bumpMultiplier = values[bumpMultiplierIndex + 1];\r\n                    values.splice(bumpMultiplierIndex, 2); // remove\r\n                }\r\n\r\n                material.bumpTexture = MTLFileLoader._GetTexture(rootUrl, values.join(\" \"), scene);\r\n                if (material.bumpTexture && bumpMultiplier !== null) {\r\n                    material.bumpTexture.level = parseFloat(bumpMultiplier);\r\n                }\r\n            } else if (key === \"map_d\" && material) {\r\n                // The dissolve of the material\r\n                material.opacityTexture = MTLFileLoader._GetTexture(rootUrl, value, scene);\r\n\r\n                //Options for illumination\r\n            } else if (key === \"illum\") {\r\n                //Illumination\r\n                if (value === \"0\") {\r\n                    //That mean Kd == Kd\r\n                } else if (value === \"1\") {\r\n                    //Color on and Ambient on\r\n                } else if (value === \"2\") {\r\n                    //Highlight on\r\n                } else if (value === \"3\") {\r\n                    //Reflection on and Ray trace on\r\n                } else if (value === \"4\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace on\r\n                } else if (value === \"5\") {\r\n                    //Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"6\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel off and Ray trace on\r\n                } else if (value === \"7\") {\r\n                    //Transparency: Refraction on, Reflection: Fresnel on and Ray trace on\r\n                } else if (value === \"8\") {\r\n                    //Reflection on and Ray trace off\r\n                } else if (value === \"9\") {\r\n                    //Transparency: Glass on, Reflection: Ray trace off\r\n                } else if (value === \"10\") {\r\n                    //Casts shadows onto invisible surfaces\r\n                }\r\n            } else {\r\n                // console.log(\"Unhandled expression at line : \" + i +'\\n' + \"with value : \" + line);\r\n            }\r\n        }\r\n        //At the end of the file, add the last material\r\n        if (material) {\r\n            this.materials.push(material);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture for the material.\r\n     *\r\n     * If the material is imported from input file,\r\n     * We sanitize the url to ensure it takes the texture from aside the material.\r\n     *\r\n     * @param rootUrl The root url to load from\r\n     * @param value The value stored in the mtl\r\n     * @param scene\r\n     * @returns The Texture\r\n     */\r\n    private static _GetTexture(rootUrl: string, value: string, scene: Scene): Nullable<Texture> {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n\r\n        let url = rootUrl;\r\n        // Load from input file.\r\n        if (rootUrl === \"file:\") {\r\n            let lastDelimiter = value.lastIndexOf(\"\\\\\");\r\n            if (lastDelimiter === -1) {\r\n                lastDelimiter = value.lastIndexOf(\"/\");\r\n            }\r\n\r\n            if (lastDelimiter > -1) {\r\n                url += value.substring(lastDelimiter + 1);\r\n            } else {\r\n                url += value;\r\n            }\r\n        }\r\n        // Not from input file.\r\n        else {\r\n            url += value;\r\n        }\r\n\r\n        return new Texture(url, scene, false, MTLFileLoader.INVERT_TEXTURE_Y);\r\n    }\r\n}\r\n", "import type { AssetContainer } from \"core/assetContainer\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { Color3, Color4 } from \"core/Maths/math.color\";\r\nimport { Vector2, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ntype MeshObject = {\r\n    name: string;\r\n    indices: Nullable<Array<number>>;\r\n    positions: Nullable<Array<number>>;\r\n    normals: Nullable<Array<number>>;\r\n    colors: Nullable<Array<number>>;\r\n    uvs: Nullable<Array<number>>;\r\n    materialName: string;\r\n    directMaterial?: Nullable<Material>;\r\n    isObject: boolean; // If the entity is defined as an object (\"o\"), or group (\"g\")\r\n    _babylonMesh?: AbstractMesh; // The corresponding Babylon mesh\r\n    hasLines?: boolean; // If the mesh has lines\r\n};\r\n\r\n/**\r\n * Class used to load mesh data from OBJ content\r\n */\r\nexport class SolidParser {\r\n    // Descriptor\r\n    /** Object descriptor */\r\n    public static ObjectDescriptor = /^o/;\r\n    /** Group descriptor */\r\n    public static GroupDescriptor = /^g/;\r\n    /** Material lib descriptor */\r\n    public static MtlLibGroupDescriptor = /^mtllib /;\r\n    /** Use a material descriptor */\r\n    public static UseMtlDescriptor = /^usemtl /;\r\n    /** Smooth descriptor */\r\n    public static SmoothDescriptor = /^s /;\r\n\r\n    // Patterns\r\n    /** Pattern used to detect a vertex */\r\n    public static VertexPattern = /^v(\\s+[\\d|.|+|\\-|e|E]+){3,7}/;\r\n    /** Pattern used to detect a normal */\r\n    public static NormalPattern = /^vn(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a UV set */\r\n    public static UVPattern = /^vt(\\s+[\\d|.|+|\\-|e|E]+)( +[\\d|.|+|\\-|e|E]+)/;\r\n    /** Pattern used to detect a first kind of face (f vertex vertex vertex) */\r\n    public static FacePattern1 = /^f\\s+(([\\d]{1,}[\\s]?){3,})+/;\r\n    /** Pattern used to detect a second kind of face (f vertex/uvs vertex/uvs vertex/uvs) */\r\n    public static FacePattern2 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a third kind of face (f vertex/uvs/normal vertex/uvs/normal vertex/uvs/normal) */\r\n    public static FacePattern3 = /^f\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fourth kind of face (f vertex//normal vertex//normal vertex//normal)*/\r\n    public static FacePattern4 = /^f\\s+((([\\d]{1,}\\/\\/[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a fifth kind of face (f -vertex/-uvs/-normal -vertex/-uvs/-normal -vertex/-uvs/-normal) */\r\n    public static FacePattern5 = /^f\\s+(((-[\\d]{1,}\\/-[\\d]{1,}\\/-[\\d]{1,}[\\s]?){3,})+)/;\r\n    /** Pattern used to detect a line(l vertex vertex) */\r\n    public static LinePattern1 = /^l\\s+(([\\d]{1,}[\\s]?){2,})+/;\r\n    /** Pattern used to detect a second kind of line (l vertex/uvs vertex/uvs) */\r\n    public static LinePattern2 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n    /** Pattern used to detect a third kind of line (l vertex/uvs/normal vertex/uvs/normal) */\r\n    public static LinePattern3 = /^l\\s+((([\\d]{1,}\\/[\\d]{1,}\\/[\\d]{1,}[\\s]?){2,})+)/;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n    private _positions: Array<Vector3> = []; //values for the positions of vertices\r\n    private _normals: Array<Vector3> = []; //Values for the normals\r\n    private _uvs: Array<Vector2> = []; //Values for the textures\r\n    private _colors: Array<Color4> = [];\r\n    private _extColors: Array<Color4> = []; //Extension color\r\n    private _meshesFromObj: Array<MeshObject> = []; //[mesh] Contains all the obj meshes\r\n    private _handledMesh: MeshObject; //The current mesh of meshes array\r\n    private _indicesForBabylon: Array<number> = []; //The list of indices for VertexData\r\n    private _wrappedPositionForBabylon: Array<Vector3> = []; //The list of position in vectors\r\n    private _wrappedUvsForBabylon: Array<Vector2> = []; //Array with all value of uvs to match with the indices\r\n    private _wrappedColorsForBabylon: Array<Color4> = []; // Array with all color values to match with the indices\r\n    private _wrappedNormalsForBabylon: Array<Vector3> = []; //Array with all value of normals to match with the indices\r\n    private _tuplePosNorm: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }> = []; //Create a tuple with indice of Position, Normal, UV  [pos, norm, uvs]\r\n    private _curPositionInIndices = 0;\r\n    private _hasMeshes: boolean = false; //Meshes are defined in the file\r\n    private _unwrappedPositionsForBabylon: Array<number> = []; //Value of positionForBabylon w/o Vector3() [x,y,z]\r\n    private _unwrappedColorsForBabylon: Array<number> = []; // Value of colorForBabylon w/o Color4() [r,g,b,a]\r\n    private _unwrappedNormalsForBabylon: Array<number> = []; //Value of normalsForBabylon w/o Vector3()  [x,y,z]\r\n    private _unwrappedUVForBabylon: Array<number> = []; //Value of uvsForBabylon w/o Vector3()      [x,y,z]\r\n    private _triangles: Array<string> = []; //Indices from new triangles coming from polygons\r\n    private _materialNameFromObj: string = \"\"; //The name of the current material\r\n    private _objMeshName: string = \"\"; //The name of the current obj mesh\r\n    private _increment: number = 1; //Id for meshes created by the multimaterial\r\n    private _isFirstMaterial: boolean = true;\r\n    private _grayColor = new Color4(0.5, 0.5, 0.5, 1);\r\n    private _materialToUse: string[];\r\n    private _babylonMeshesArray: Array<Mesh>;\r\n    private _pushTriangle: (faces: Array<string>, faceIndex: number) => void;\r\n    private _handednessSign: number;\r\n    private _hasLineData: boolean = false; //If this mesh has line segment(l) data\r\n\r\n    /**\r\n     * Creates a new SolidParser\r\n     * @param materialToUse defines the array to fill with the list of materials to use (it will be filled by the parse function)\r\n     * @param babylonMeshesArray defines the array to fill with the list of loaded meshes (it will be filled by the parse function)\r\n     * @param loadingOptions defines the loading options to use\r\n     */\r\n    public constructor(materialToUse: string[], babylonMeshesArray: Array<Mesh>, loadingOptions: OBJLoadingOptions) {\r\n        this._materialToUse = materialToUse;\r\n        this._babylonMeshesArray = babylonMeshesArray;\r\n        this._loadingOptions = loadingOptions;\r\n    }\r\n\r\n    /**\r\n     * Search for obj in the given array.\r\n     * This function is called to check if a couple of data already exists in an array.\r\n     *\r\n     * If found, returns the index of the founded tuple index. Returns -1 if not found\r\n     * @param arr Array<{ normals: Array<number>, idx: Array<number> }>\r\n     * @param obj Array<number>\r\n     * @returns {boolean}\r\n     */\r\n    private _isInArray(arr: Array<{ normals: Array<number>; idx: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        return idx === -1 ? -1 : arr[obj[0]].idx[idx];\r\n    }\r\n\r\n    private _isInArrayUV(arr: Array<{ normals: Array<number>; idx: Array<number>; uv: Array<number> }>, obj: Array<number>) {\r\n        if (!arr[obj[0]]) {\r\n            arr[obj[0]] = { normals: [], idx: [], uv: [] };\r\n        }\r\n        const idx = arr[obj[0]].normals.indexOf(obj[1]);\r\n\r\n        if (idx != 1 && obj[2] === arr[obj[0]].uv[idx]) {\r\n            return arr[obj[0]].idx[idx];\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * This function set the data for each triangle.\r\n     * Data are position, normals and uvs\r\n     * If a tuple of (position, normal) is not set, add the data into the corresponding array\r\n     * If the tuple already exist, add only their indice\r\n     *\r\n     * @param data The vertex's data\r\n     * * indicesPositionFromObj: The index in positions array\r\n     * * indicesUvsFromObj: The index in uvs array\r\n     * * indicesNormalFromObj: The index in normals array\r\n     * * positionVectorFromOBJ: The value of position at index objIndice\r\n     * * textureVectorFromOBJ: The value of uvs\r\n     * * normalsVectorFromOBJ: The value of normals at index objNormale\r\n     * * positionColorsFromOBJ: The value of color at index objIndice\r\n     */\r\n    private _setData(data: {\r\n        indicePositionFromObj: number;\r\n        indiceUvsFromObj?: number;\r\n        indiceNormalFromObj?: number;\r\n        positionVectorFromOBJ: Vector3;\r\n        textureVectorFromOBJ?: Vector2;\r\n        normalsVectorFromOBJ?: Vector3;\r\n        positionColorsFromOBJ?: Color4;\r\n    }) {\r\n        //Use default values if undefined\r\n        data.indiceUvsFromObj ??= -1;\r\n        data.indiceNormalFromObj ??= -1;\r\n\r\n        //Check if this tuple already exists in the list of tuples\r\n        let _index: number;\r\n        if (this._loadingOptions.optimizeWithUV) {\r\n            _index = this._isInArrayUV(this._tuplePosNorm, [data.indicePositionFromObj, data.indiceNormalFromObj, data.indiceUvsFromObj]);\r\n        } else {\r\n            _index = this._isInArray(this._tuplePosNorm, [data.indicePositionFromObj, data.indiceNormalFromObj]);\r\n        }\r\n\r\n        //If it not exists\r\n        if (_index === -1) {\r\n            //Add an new indice.\r\n            //The array of indices is only an array with his length equal to the number of triangles - 1.\r\n            //We add vertices data in this order\r\n            this._indicesForBabylon.push(this._wrappedPositionForBabylon.length);\r\n            //Push the position of vertice for Babylon\r\n            //Each element is a Vector3(x,y,z)\r\n            this._wrappedPositionForBabylon.push(data.positionVectorFromOBJ);\r\n\r\n            if (data.textureVectorFromOBJ !== undefined) {\r\n                //Push the uvs for Babylon\r\n                //Each element is a Vector2(u,v)\r\n                this._wrappedUvsForBabylon.push(data.textureVectorFromOBJ);\r\n            }\r\n            if (data.normalsVectorFromOBJ !== undefined) {\r\n                //Push the normals for Babylon\r\n                //Each element is a Vector3(x,y,z)\r\n                this._wrappedNormalsForBabylon.push(data.normalsVectorFromOBJ);\r\n            }\r\n            if (data.positionColorsFromOBJ !== undefined) {\r\n                //Push the colors for Babylon\r\n                //Each element is a BABYLON.Color4(r,g,b,a)\r\n                this._wrappedColorsForBabylon.push(data.positionColorsFromOBJ);\r\n            }\r\n\r\n            //Add the tuple in the comparison list\r\n            this._tuplePosNorm[data.indicePositionFromObj].normals.push(data.indiceNormalFromObj);\r\n            this._tuplePosNorm[data.indicePositionFromObj].idx.push(this._curPositionInIndices++);\r\n            if (this._loadingOptions.optimizeWithUV) {\r\n                this._tuplePosNorm[data.indicePositionFromObj].uv.push(data.indiceUvsFromObj);\r\n            }\r\n        } else {\r\n            //The tuple already exists\r\n            //Add the index of the already existing tuple\r\n            //At this index we can get the value of position, normal, color and uvs of vertex\r\n            this._indicesForBabylon.push(_index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform Vector() and BABYLON.Color() objects into numbers in an array\r\n     */\r\n    private _unwrapData() {\r\n        try {\r\n            //Every array has the same length\r\n            for (let l = 0; l < this._wrappedPositionForBabylon.length; l++) {\r\n                //Push the x, y, z values of each element in the unwrapped array\r\n                this._unwrappedPositionsForBabylon.push(\r\n                    this._wrappedPositionForBabylon[l].x * this._handednessSign,\r\n                    this._wrappedPositionForBabylon[l].y,\r\n                    this._wrappedPositionForBabylon[l].z\r\n                );\r\n                if (this._wrappedNormalsForBabylon.length) {\r\n                    this._unwrappedNormalsForBabylon.push(\r\n                        this._wrappedNormalsForBabylon[l].x * this._handednessSign,\r\n                        this._wrappedNormalsForBabylon[l].y,\r\n                        this._wrappedNormalsForBabylon[l].z\r\n                    );\r\n                }\r\n                if (this._wrappedUvsForBabylon.length) {\r\n                    this._unwrappedUVForBabylon.push(this._wrappedUvsForBabylon[l].x, this._wrappedUvsForBabylon[l].y); //z is an optional value not supported by BABYLON\r\n                }\r\n                if (this._unwrappedColorsForBabylon.length) {\r\n                    //Push the r, g, b, a values of each element in the unwrapped array\r\n                    this._unwrappedColorsForBabylon.push(\r\n                        this._wrappedColorsForBabylon[l].r,\r\n                        this._wrappedColorsForBabylon[l].g,\r\n                        this._wrappedColorsForBabylon[l].b,\r\n                        this._wrappedColorsForBabylon[l].a\r\n                    );\r\n                }\r\n            }\r\n            // Reset arrays for the next new meshes\r\n            this._wrappedPositionForBabylon.length = 0;\r\n            this._wrappedNormalsForBabylon.length = 0;\r\n            this._wrappedUvsForBabylon.length = 0;\r\n            this._wrappedColorsForBabylon.length = 0;\r\n            this._tuplePosNorm.length = 0;\r\n            this._curPositionInIndices = 0;\r\n        } catch (e) {\r\n            throw new Error(\"Unable to unwrap data while parsing OBJ data.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create triangles from polygons\r\n     * It is important to notice that a triangle is a polygon\r\n     * We get 5 patterns of face defined in OBJ File :\r\n     * facePattern1 = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]\r\n     * facePattern2 = [\"1/1\",\"2/2\",\"3/3\",\"4/4\",\"5/5\",\"6/6\"]\r\n     * facePattern3 = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"4/4/4\",\"5/5/5\",\"6/6/6\"]\r\n     * facePattern4 = [\"1//1\",\"2//2\",\"3//3\",\"4//4\",\"5//5\",\"6//6\"]\r\n     * facePattern5 = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-4/-4/-4\",\"-5/-5/-5\",\"-6/-6/-6\"]\r\n     * Each pattern is divided by the same method\r\n     * @param faces Array[String] The indices of elements\r\n     * @param v Integer The variable to increment\r\n     */\r\n    private _getTriangles(faces: Array<string>, v: number) {\r\n        //Work for each element of the array\r\n        for (let faceIndex = v; faceIndex < faces.length - 1; faceIndex++) {\r\n            //Add on the triangle variable the indexes to obtain triangles\r\n            this._pushTriangle(faces, faceIndex);\r\n        }\r\n\r\n        //Result obtained after 2 iterations:\r\n        //Pattern1 => triangle = [\"1\",\"2\",\"3\",\"1\",\"3\",\"4\"];\r\n        //Pattern2 => triangle = [\"1/1\",\"2/2\",\"3/3\",\"1/1\",\"3/3\",\"4/4\"];\r\n        //Pattern3 => triangle = [\"1/1/1\",\"2/2/2\",\"3/3/3\",\"1/1/1\",\"3/3/3\",\"4/4/4\"];\r\n        //Pattern4 => triangle = [\"1//1\",\"2//2\",\"3//3\",\"1//1\",\"3//3\",\"4//4\"];\r\n        //Pattern5 => triangle = [\"-1/-1/-1\",\"-2/-2/-2\",\"-3/-3/-3\",\"-1/-1/-1\",\"-3/-3/-3\",\"-4/-4/-4\"];\r\n    }\r\n\r\n    /**\r\n     * To get color between color and extension color\r\n     * @param index Integer The index of the element in the array\r\n     * @returns value of target color\r\n     */\r\n    private _getColor(index: number) {\r\n        if (this._loadingOptions.importVertexColors) {\r\n            return this._extColors[index] ?? this._colors[index];\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 1\r\n     * In this pattern we get vertice positions\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern1(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        //For each element in the triangles array.\r\n        //This var could contains 1 to an infinity of triangles\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(this._triangles[k]) - 1;\r\n\r\n            this._setData({\r\n                indicePositionFromObj,\r\n                positionVectorFromOBJ: this._positions[indicePositionFromObj],\r\n                positionColorsFromOBJ: this._getColor(indicePositionFromObj),\r\n            });\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 2\r\n     * In this pattern we get vertice positions and uvs\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern2(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1\"\r\n            //Split the data for getting position and uv\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\"]\r\n            //Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            //Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData({\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                positionVectorFromOBJ: this._positions[indicePositionFromObj],\r\n                textureVectorFromOBJ: this._uvs[indiceUvsFromObj],\r\n                positionColorsFromOBJ: this._getColor(indicePositionFromObj),\r\n            });\r\n        }\r\n\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern3(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1/1/1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"1\", \"1\", \"1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            // Set uv indice\r\n            const indiceUvsFromObj = parseInt(point[1]) - 1;\r\n            // Set normal indice\r\n            const indiceNormalFromObj = parseInt(point[2]) - 1;\r\n\r\n            this._setData({\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                positionVectorFromOBJ: this._positions[indicePositionFromObj],\r\n                textureVectorFromOBJ: this._uvs[indiceUvsFromObj],\r\n                normalsVectorFromOBJ: this._normals[indiceNormalFromObj],\r\n            });\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Create triangles and push the data for each polygon for the pattern 4\r\n     * In this pattern we get vertice positions and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern4(face: Array<string>, v: number) {\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"1//1\"\r\n            //Split the data for getting position and normals\r\n            const point = this._triangles[k].split(\"//\"); // [\"1\", \"1\"]\r\n            // We check indices, and normals\r\n            const indicePositionFromObj = parseInt(point[0]) - 1;\r\n            const indiceNormalFromObj = parseInt(point[1]) - 1;\r\n\r\n            this._setData({\r\n                indicePositionFromObj,\r\n                indiceNormalFromObj,\r\n                positionVectorFromOBJ: this._positions[indicePositionFromObj],\r\n                normalsVectorFromOBJ: this._normals[indiceNormalFromObj],\r\n                positionColorsFromOBJ: this._getColor(indicePositionFromObj),\r\n            });\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    /*\r\n     * Create triangles and push the data for each polygon for the pattern 3\r\n     * In this pattern we get vertice positions, uvs and normals\r\n     * @param face\r\n     * @param v\r\n     */\r\n    private _setDataForCurrentFaceWithPattern5(face: Array<string>, v: number) {\r\n        //Get the indices of triangles for each polygon\r\n        this._getTriangles(face, v);\r\n\r\n        for (let k = 0; k < this._triangles.length; k++) {\r\n            //triangle[k] = \"-1/-1/-1\"\r\n            //Split the data for getting position, uv, and normals\r\n            const point = this._triangles[k].split(\"/\"); // [\"-1\", \"-1\", \"-1\"]\r\n            // Set position indice\r\n            const indicePositionFromObj = this._positions.length + parseInt(point[0]);\r\n            // Set uv indice\r\n            const indiceUvsFromObj = this._uvs.length + parseInt(point[1]);\r\n            // Set normal indice\r\n            const indiceNormalFromObj = this._normals.length + parseInt(point[2]);\r\n\r\n            this._setData({\r\n                indicePositionFromObj,\r\n                indiceUvsFromObj,\r\n                indiceNormalFromObj,\r\n                positionVectorFromOBJ: this._positions[indicePositionFromObj],\r\n                textureVectorFromOBJ: this._uvs[indiceUvsFromObj],\r\n                normalsVectorFromOBJ: this._normals[indiceNormalFromObj],\r\n                positionColorsFromOBJ: this._getColor(indicePositionFromObj),\r\n            });\r\n        }\r\n        //Reset variable for the next line\r\n        this._triangles.length = 0;\r\n    }\r\n\r\n    private _addPreviousObjMesh() {\r\n        //Check if it is not the first mesh. Otherwise we don't have data.\r\n        if (this._meshesFromObj.length > 0) {\r\n            //Get the previous mesh for applying the data about the faces\r\n            //=> in obj file, faces definition append after the name of the mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            //Set the data into Array for the mesh\r\n            this._unwrapData();\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                // Reverse tab. Otherwise face are displayed in the wrong sens\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Set the information for the mesh\r\n            //Slice the array to avoid rewriting because of the fact this is the same var which be rewrited\r\n            this._handledMesh.indices = this._indicesForBabylon.slice();\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon.slice();\r\n            if (this._unwrappedNormalsForBabylon.length) {\r\n                this._handledMesh.normals = this._unwrappedNormalsForBabylon.slice();\r\n            }\r\n            if (this._unwrappedUVForBabylon.length) {\r\n                this._handledMesh.uvs = this._unwrappedUVForBabylon.slice();\r\n            }\r\n            if (this._unwrappedColorsForBabylon.length) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon.slice();\r\n            }\r\n            this._handledMesh.hasLines = this._hasLineData;\r\n\r\n            //Reset the array for the next mesh\r\n            this._indicesForBabylon.length = 0;\r\n            this._unwrappedPositionsForBabylon.length = 0;\r\n            this._unwrappedColorsForBabylon.length = 0;\r\n            this._unwrappedNormalsForBabylon.length = 0;\r\n            this._unwrappedUVForBabylon.length = 0;\r\n            this._hasLineData = false;\r\n        }\r\n    }\r\n\r\n    private _optimizeNormals(mesh: AbstractMesh): void {\r\n        const positions = mesh.getVerticesData(VertexBuffer.PositionKind);\r\n        const normals = mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const mapVertices: { [key: string]: number[] } = {};\r\n\r\n        if (!positions || !normals) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < positions.length / 3; i++) {\r\n            const x = positions[i * 3 + 0];\r\n            const y = positions[i * 3 + 1];\r\n            const z = positions[i * 3 + 2];\r\n            const key = x + \"_\" + y + \"_\" + z;\r\n\r\n            let lst = mapVertices[key];\r\n            if (!lst) {\r\n                lst = [];\r\n                mapVertices[key] = lst;\r\n            }\r\n            lst.push(i);\r\n        }\r\n\r\n        const normal = new Vector3();\r\n        for (const key in mapVertices) {\r\n            const lst = mapVertices[key];\r\n            if (lst.length < 2) {\r\n                continue;\r\n            }\r\n\r\n            const v0Idx = lst[0];\r\n            for (let i = 1; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[v0Idx * 3 + 0] += normals[vIdx * 3 + 0];\r\n                normals[v0Idx * 3 + 1] += normals[vIdx * 3 + 1];\r\n                normals[v0Idx * 3 + 2] += normals[vIdx * 3 + 2];\r\n            }\r\n\r\n            normal.copyFromFloats(normals[v0Idx * 3 + 0], normals[v0Idx * 3 + 1], normals[v0Idx * 3 + 2]);\r\n            normal.normalize();\r\n\r\n            for (let i = 0; i < lst.length; ++i) {\r\n                const vIdx = lst[i];\r\n                normals[vIdx * 3 + 0] = normal.x;\r\n                normals[vIdx * 3 + 1] = normal.y;\r\n                normals[vIdx * 3 + 2] = normal.z;\r\n            }\r\n        }\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n    }\r\n\r\n    private static _IsLineElement(line: string) {\r\n        return line.startsWith(\"l\");\r\n    }\r\n\r\n    private static _IsObjectElement(line: string) {\r\n        return line.startsWith(\"o\");\r\n    }\r\n\r\n    private static _IsGroupElement(line: string) {\r\n        return line.startsWith(\"g\");\r\n    }\r\n\r\n    private static _GetZbrushMRGB(line: string, notParse: boolean) {\r\n        if (!line.startsWith(\"mrgb\")) {\r\n            return null;\r\n        }\r\n        line = line.replace(\"mrgb\", \"\").trim();\r\n        // if include vertex color , not load mrgb anymore\r\n        if (notParse) {\r\n            return [];\r\n        }\r\n        const regex = /[a-z0-9]/g;\r\n        const regArray = line.match(regex);\r\n        if (!regArray || regArray.length % 8 !== 0) {\r\n            return [];\r\n        }\r\n        const array: Color4[] = [];\r\n        for (let regIndex = 0; regIndex < regArray.length / 8; regIndex++) {\r\n            //each item is MMRRGGBB, m is material index\r\n            // const m = regArray[regIndex * 8 + 0] + regArray[regIndex * 8 + 1];\r\n            const r = regArray[regIndex * 8 + 2] + regArray[regIndex * 8 + 3];\r\n            const g = regArray[regIndex * 8 + 4] + regArray[regIndex * 8 + 5];\r\n            const b = regArray[regIndex * 8 + 6] + regArray[regIndex * 8 + 7];\r\n            array.push(new Color4(parseInt(r, 16) / 255, parseInt(g, 16) / 255, parseInt(b, 16) / 255, 1));\r\n        }\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Function used to parse an OBJ string\r\n     * @param meshesNames defines the list of meshes to load (all if not defined)\r\n     * @param data defines the OBJ string\r\n     * @param scene defines the hosting scene\r\n     * @param assetContainer defines the asset container to load data in\r\n     * @param onFileToLoadFound defines a callback that will be called if a MTL file is found\r\n     */\r\n    public parse(meshesNames: any, data: string, scene: Scene, assetContainer: Nullable<AssetContainer>, onFileToLoadFound: (fileToLoad: string) => void): void {\r\n        //Move Santitize here to forbid delete zbrush data\r\n        // Sanitize data\r\n        data = data.replace(/#MRGB/g, \"mrgb\");\r\n        data = data.replace(/#.*$/gm, \"\").trim();\r\n        if (this._loadingOptions.useLegacyBehavior) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = 1;\r\n        } else if (scene.useRightHandedSystem) {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex + 1], faces[faceIndex]);\r\n            this._handednessSign = 1;\r\n        } else {\r\n            this._pushTriangle = (faces, faceIndex) => this._triangles.push(faces[0], faces[faceIndex], faces[faceIndex + 1]);\r\n            this._handednessSign = -1;\r\n        }\r\n\r\n        // Split the file into lines\r\n        // Preprocess line data\r\n        const linesOBJ = data.split(\"\\n\");\r\n        const lineLines: string[][] = [];\r\n        let currentGroup: string[] = [];\r\n\r\n        lineLines.push(currentGroup);\r\n\r\n        for (let i = 0; i < linesOBJ.length; i++) {\r\n            const line = linesOBJ[i].trim().replace(/\\s\\s/g, \" \");\r\n\r\n            // Comment or newLine\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            }\r\n\r\n            if (SolidParser._IsGroupElement(line) || SolidParser._IsObjectElement(line)) {\r\n                currentGroup = [];\r\n                lineLines.push(currentGroup);\r\n            }\r\n\r\n            if (SolidParser._IsLineElement(line)) {\r\n                const lineValues = line.split(\" \");\r\n                // create line elements with two vertices only\r\n                for (let i = 1; i < lineValues.length - 1; i++) {\r\n                    currentGroup.push(`l ${lineValues[i]} ${lineValues[i + 1]}`);\r\n                }\r\n            } else {\r\n                currentGroup.push(line);\r\n            }\r\n        }\r\n\r\n        const lines = lineLines.flat();\r\n        // Look at each line\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = lines[i].trim().replace(/\\s\\s/g, \" \");\r\n            let result;\r\n            // Comment or newLine\r\n            if (line.length === 0 || line.charAt(0) === \"#\") {\r\n                continue;\r\n            } else if (SolidParser.VertexPattern.test(line)) {\r\n                //Get information about one position possible for the vertices\r\n                result = line.match(/[^ ]+/g)!; // match will return non-null due to passing regex pattern\r\n\r\n                // Value of result with line: \"v 1.0 2.0 3.0\"\r\n                // [\"v\", \"1.0\", \"2.0\", \"3.0\"]\r\n                // Create a Vector3 with the position x, y, z\r\n                this._positions.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n\r\n                if (this._loadingOptions.importVertexColors) {\r\n                    if (result.length >= 7) {\r\n                        const r = parseFloat(result[4]);\r\n                        const g = parseFloat(result[5]);\r\n                        const b = parseFloat(result[6]);\r\n\r\n                        this._colors.push(\r\n                            new Color4(r > 1 ? r / 255 : r, g > 1 ? g / 255 : g, b > 1 ? b / 255 : b, result.length === 7 || result[7] === undefined ? 1 : parseFloat(result[7]))\r\n                        );\r\n                    } else {\r\n                        // TODO: maybe push NULL and if all are NULL to skip (and remove grayColor var).\r\n                        this._colors.push(this._grayColor);\r\n                    }\r\n                }\r\n            } else if ((result = SolidParser.NormalPattern.exec(line)) !== null) {\r\n                //Create a Vector3 with the normals x, y, z\r\n                //Value of result\r\n                // [\"vn 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\r\n                //Add the Vector in the list of normals\r\n                this._normals.push(new Vector3(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3])));\r\n            } else if ((result = SolidParser.UVPattern.exec(line)) !== null) {\r\n                //Create a Vector2 with the normals u, v\r\n                //Value of result\r\n                // [\"vt 0.1 0.2 0.3\", \"0.1\", \"0.2\"]\r\n                //Add the Vector in the list of uvs\r\n                this._uvs.push(new Vector2(parseFloat(result[1]) * this._loadingOptions.UVScaling.x, parseFloat(result[2]) * this._loadingOptions.UVScaling.y));\r\n\r\n                //Identify patterns of faces\r\n                //Face could be defined in different type of pattern\r\n            } else if ((result = SolidParser.FacePattern3.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1/1 2/2/2 3/3/3\", \"1/1/1 2/2/2 3/3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\", \"3/3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern4.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1//1 2//2 3//3\", \"1//1 2//2 3//3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern4(\r\n                    result[1].trim().split(\" \"), // [\"1//1\", \"2//2\", \"3//3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern5.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f -1/-1/-1 -2/-2/-2 -3/-3/-3\", \"-1/-1/-1 -2/-2/-2 -3/-3/-3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern5(\r\n                    result[1].trim().split(\" \"), // [\"-1/-1/-1\", \"-2/-2/-2\", \"-3/-3/-3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern2.exec(line)) !== null) {\r\n                //Value of result:\r\n                //[\"f 1/1 2/2 3/3\", \"1/1 2/2 3/3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\", \"3/3\"]\r\n                    1\r\n                );\r\n            } else if ((result = SolidParser.FacePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"f 1 2 3\", \"1 2 3\"...]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\", \"3\"]\r\n                    1\r\n                );\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern1.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1 2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern1(\r\n                    result[1].trim().split(\" \"), // [\"1\", \"2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser.LinePattern2.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1 2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern2(\r\n                    result[1].trim().split(\" \"), // [\"1/1\", \"2/2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if ((result = SolidParser._GetZbrushMRGB(line, !this._loadingOptions.importVertexColors))) {\r\n                for (const element of result) {\r\n                    this._extColors.push(element);\r\n                }\r\n            } else if ((result = SolidParser.LinePattern3.exec(line)) !== null) {\r\n                //Value of result\r\n                //[\"l 1/1/1 2/2/2\"]\r\n\r\n                //Set the data for this face\r\n                this._setDataForCurrentFaceWithPattern3(\r\n                    result[1].trim().split(\" \"), // [\"1/1/1\", \"2/2/2\"]\r\n                    0\r\n                );\r\n                this._hasLineData = true;\r\n\r\n                // Define a mesh or an object\r\n                // Each time this keyword is analyzed, create a new Object with all data for creating a babylonMesh\r\n            } else if (SolidParser.GroupDescriptor.test(line) || SolidParser.ObjectDescriptor.test(line)) {\r\n                // Create a new mesh corresponding to the name of the group.\r\n                // Definition of the mesh\r\n                const objMesh: MeshObject = {\r\n                    name: line.substring(2).trim(), //Set the name of the current obj mesh\r\n                    indices: null,\r\n                    positions: null,\r\n                    normals: null,\r\n                    uvs: null,\r\n                    colors: null,\r\n                    materialName: this._materialNameFromObj,\r\n                    isObject: SolidParser.ObjectDescriptor.test(line),\r\n                };\r\n                this._addPreviousObjMesh();\r\n\r\n                //Push the last mesh created with only the name\r\n                this._meshesFromObj.push(objMesh);\r\n\r\n                //Set this variable to indicate that now meshesFromObj has objects defined inside\r\n                this._hasMeshes = true;\r\n                this._isFirstMaterial = true;\r\n                this._increment = 1;\r\n                //Keyword for applying a material\r\n            } else if (SolidParser.UseMtlDescriptor.test(line)) {\r\n                //Get the name of the material\r\n                this._materialNameFromObj = line.substring(7).trim();\r\n\r\n                //If this new material is in the same mesh\r\n\r\n                if (!this._isFirstMaterial || !this._hasMeshes) {\r\n                    //Set the data for the previous mesh\r\n                    this._addPreviousObjMesh();\r\n                    //Create a new mesh\r\n                    const objMesh: MeshObject =\r\n                        //Set the name of the current obj mesh\r\n                        {\r\n                            name: (this._objMeshName || \"mesh\") + \"_mm\" + this._increment.toString(), //Set the name of the current obj mesh\r\n                            indices: null,\r\n                            positions: null,\r\n                            normals: null,\r\n                            uvs: null,\r\n                            colors: null,\r\n                            materialName: this._materialNameFromObj,\r\n                            isObject: false,\r\n                        };\r\n                    this._increment++;\r\n                    //If meshes are already defined\r\n                    this._meshesFromObj.push(objMesh);\r\n                    this._hasMeshes = true;\r\n                }\r\n                //Set the material name if the previous line define a mesh\r\n\r\n                if (this._hasMeshes && this._isFirstMaterial) {\r\n                    //Set the material name to the previous mesh (1 material per mesh)\r\n                    this._meshesFromObj[this._meshesFromObj.length - 1].materialName = this._materialNameFromObj;\r\n                    this._isFirstMaterial = false;\r\n                }\r\n                // Keyword for loading the mtl file\r\n            } else if (SolidParser.MtlLibGroupDescriptor.test(line)) {\r\n                // Get the name of mtl file\r\n                onFileToLoadFound(line.substring(7).trim());\r\n\r\n                // Apply smoothing\r\n            } else if (SolidParser.SmoothDescriptor.test(line)) {\r\n                // smooth shading => apply smoothing\r\n                // Today I don't know it work with babylon and with obj.\r\n                // With the obj file  an integer is set\r\n            } else {\r\n                //If there is another possibility\r\n                Logger.Log(\"Unhandled expression at line : \" + line);\r\n            }\r\n        }\r\n        // At the end of the file, add the last mesh into the meshesFromObj array\r\n        if (this._hasMeshes) {\r\n            // Set the data for the last mesh\r\n            this._handledMesh = this._meshesFromObj[this._meshesFromObj.length - 1];\r\n\r\n            if (this._loadingOptions.useLegacyBehavior) {\r\n                //Reverse indices for displaying faces in the good sense\r\n                this._indicesForBabylon.reverse();\r\n            }\r\n\r\n            //Get the good array\r\n            this._unwrapData();\r\n            //Set array\r\n            this._handledMesh.indices = this._indicesForBabylon;\r\n            this._handledMesh.positions = this._unwrappedPositionsForBabylon;\r\n            if (this._unwrappedNormalsForBabylon.length) {\r\n                this._handledMesh.normals = this._unwrappedNormalsForBabylon;\r\n            }\r\n            if (this._unwrappedUVForBabylon.length) {\r\n                this._handledMesh.uvs = this._unwrappedUVForBabylon;\r\n            }\r\n            if (this._unwrappedColorsForBabylon.length) {\r\n                this._handledMesh.colors = this._unwrappedColorsForBabylon;\r\n            }\r\n            this._handledMesh.hasLines = this._hasLineData;\r\n        }\r\n\r\n        // If any o or g keyword not found, create a mesh with a random id\r\n        if (!this._hasMeshes) {\r\n            let newMaterial: Nullable<StandardMaterial> = null;\r\n            if (this._indicesForBabylon.length) {\r\n                if (this._loadingOptions.useLegacyBehavior) {\r\n                    // reverse tab of indices\r\n                    this._indicesForBabylon.reverse();\r\n                }\r\n\r\n                //Get positions normals uvs\r\n                this._unwrapData();\r\n            } else {\r\n                // There is no indices in the file. We will have to switch to point cloud rendering\r\n                for (const pos of this._positions) {\r\n                    this._unwrappedPositionsForBabylon.push(pos.x, pos.y, pos.z);\r\n                }\r\n\r\n                if (this._normals.length) {\r\n                    for (const normal of this._normals) {\r\n                        this._unwrappedNormalsForBabylon.push(normal.x, normal.y, normal.z);\r\n                    }\r\n                }\r\n\r\n                if (this._uvs.length) {\r\n                    for (const uv of this._uvs) {\r\n                        this._unwrappedUVForBabylon.push(uv.x, uv.y);\r\n                    }\r\n                }\r\n\r\n                if (this._extColors.length) {\r\n                    for (const color of this._extColors) {\r\n                        this._unwrappedColorsForBabylon.push(color.r, color.g, color.b, color.a);\r\n                    }\r\n                } else {\r\n                    if (this._colors.length) {\r\n                        for (const color of this._colors) {\r\n                            this._unwrappedColorsForBabylon.push(color.r, color.g, color.b, color.a);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!this._materialNameFromObj) {\r\n                    // Create a material with point cloud on\r\n                    newMaterial = new StandardMaterial(Geometry.RandomId(), scene);\r\n\r\n                    newMaterial.pointsCloud = true;\r\n\r\n                    this._materialNameFromObj = newMaterial.name;\r\n\r\n                    if (!this._normals.length) {\r\n                        newMaterial.disableLighting = true;\r\n                        newMaterial.emissiveColor = Color3.White();\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Set data for one mesh\r\n            this._meshesFromObj.push({\r\n                name: Geometry.RandomId(),\r\n                indices: this._indicesForBabylon,\r\n                positions: this._unwrappedPositionsForBabylon,\r\n                colors: this._unwrappedColorsForBabylon,\r\n                normals: this._unwrappedNormalsForBabylon,\r\n                uvs: this._unwrappedUVForBabylon,\r\n                materialName: this._materialNameFromObj,\r\n                directMaterial: newMaterial,\r\n                isObject: true,\r\n                hasLines: this._hasLineData,\r\n            });\r\n        }\r\n\r\n        //Set data for each mesh\r\n        for (let j = 0; j < this._meshesFromObj.length; j++) {\r\n            //check meshesNames (stlFileLoader)\r\n            if (meshesNames && this._meshesFromObj[j].name) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (meshesNames.indexOf(this._meshesFromObj[j].name) === -1) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (this._meshesFromObj[j].name !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Get the current mesh\r\n            //Set the data with VertexBuffer for each mesh\r\n            this._handledMesh = this._meshesFromObj[j];\r\n            //Create a Mesh with the name of the obj mesh\r\n\r\n            scene._blockEntityCollection = !!assetContainer;\r\n            const babylonMesh = new Mesh(this._meshesFromObj[j].name, scene);\r\n            babylonMesh._parentContainer = assetContainer;\r\n            scene._blockEntityCollection = false;\r\n            this._handledMesh._babylonMesh = babylonMesh;\r\n            // If this is a group mesh, it should have an object mesh as a parent. So look for the first object mesh that appears before it.\r\n            if (!this._handledMesh.isObject) {\r\n                for (let k = j - 1; k >= 0; --k) {\r\n                    if (this._meshesFromObj[k].isObject && this._meshesFromObj[k]._babylonMesh) {\r\n                        babylonMesh.parent = this._meshesFromObj[k]._babylonMesh!;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Push the name of the material to an array\r\n            //This is indispensable for the importMesh function\r\n            this._materialToUse.push(this._meshesFromObj[j].materialName);\r\n            //If the mesh is a line mesh\r\n            if (this._handledMesh.hasLines) {\r\n                babylonMesh._internalMetadata ??= {};\r\n                babylonMesh._internalMetadata[\"_isLine\"] = true; //this is a line mesh\r\n            }\r\n\r\n            if (this._handledMesh.positions?.length === 0) {\r\n                //Push the mesh into an array\r\n                this._babylonMeshesArray.push(babylonMesh);\r\n                continue;\r\n            }\r\n\r\n            const vertexData: VertexData = new VertexData(); //The container for the values\r\n            //Set the data for the babylonMesh\r\n            vertexData.indices = this._handledMesh.indices;\r\n            vertexData.positions = this._handledMesh.positions;\r\n            if (this._loadingOptions.computeNormals || !this._handledMesh.normals) {\r\n                // Compute normals if requested or if normals are not defined\r\n                const normals: Array<number> = new Array<number>();\r\n                VertexData.ComputeNormals(this._handledMesh.positions, this._handledMesh.indices, normals);\r\n                vertexData.normals = normals;\r\n            } else {\r\n                vertexData.normals = this._handledMesh.normals;\r\n            }\r\n            if (this._handledMesh.uvs) {\r\n                vertexData.uvs = this._handledMesh.uvs;\r\n            }\r\n            if (this._handledMesh.colors) {\r\n                vertexData.colors = this._handledMesh.colors;\r\n            }\r\n            //Set the data from the VertexBuffer to the current Mesh\r\n            vertexData.applyToMesh(babylonMesh);\r\n            if (this._loadingOptions.invertY) {\r\n                babylonMesh.scaling.y *= -1;\r\n            }\r\n            if (this._loadingOptions.optimizeNormals) {\r\n                this._optimizeNormals(babylonMesh);\r\n            }\r\n\r\n            //Push the mesh into an array\r\n            this._babylonMeshesArray.push(babylonMesh);\r\n\r\n            if (this._handledMesh.directMaterial) {\r\n                babylonMesh.material = this._handledMesh.directMaterial;\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import type { ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const OBJFileLoaderMetadata = {\r\n    name: \"obj\",\r\n    extensions: \".obj\",\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n", "/* eslint-disable @typescript-eslint/promise-function-async */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector2 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginAsync, ISceneLoaderPluginFactory, ISceneLoaderPlugin, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport { OBJFileLoaderMetadata } from \"./objFileLoader.metadata\";\r\nimport { MTLFileLoader } from \"./mtlFileLoader\";\r\nimport type { OBJLoadingOptions } from \"./objLoadingOptions\";\r\nimport { SolidParser } from \"./solidParser\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the obj loader.\r\n         */\r\n        [OBJFileLoaderMetadata.name]: Partial<OBJLoadingOptions>;\r\n    }\r\n}\r\n\r\n/**\r\n * OBJ file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class OBJFileLoader implements ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /**\r\n     * Defines if UVs are optimized by default during load.\r\n     */\r\n    public static OPTIMIZE_WITH_UV = true;\r\n    /**\r\n     * Invert model on y-axis (does a model scaling inversion)\r\n     */\r\n    public static INVERT_Y = false;\r\n    /**\r\n     * Invert Y-Axis of referenced textures on load\r\n     */\r\n    public static get INVERT_TEXTURE_Y() {\r\n        return MTLFileLoader.INVERT_TEXTURE_Y;\r\n    }\r\n\r\n    public static set INVERT_TEXTURE_Y(value: boolean) {\r\n        MTLFileLoader.INVERT_TEXTURE_Y = value;\r\n    }\r\n\r\n    /**\r\n     * Include in meshes the vertex colors available in some OBJ files.  This is not part of OBJ standard.\r\n     */\r\n    public static IMPORT_VERTEX_COLORS = false;\r\n    /**\r\n     * Compute the normals for the model, even if normals are present in the file.\r\n     */\r\n    public static COMPUTE_NORMALS = false;\r\n    /**\r\n     * Optimize the normals for the model. Lighting can be uneven if you use OptimizeWithUV = true because new vertices can be created for the same location if they pertain to different faces.\r\n     * Using OptimizehNormals = true will help smoothing the lighting by averaging the normals of those vertices.\r\n     */\r\n    public static OPTIMIZE_NORMALS = false;\r\n    /**\r\n     * Defines custom scaling of UV coordinates of loaded meshes.\r\n     */\r\n    public static UV_SCALING = new Vector2(1, 1);\r\n    /**\r\n     * Skip loading the materials even if defined in the OBJ file (materials are ignored).\r\n     */\r\n    public static SKIP_MATERIALS = false;\r\n\r\n    /**\r\n     * When a material fails to load OBJ loader will silently fail and onSuccess() callback will be triggered.\r\n     *\r\n     * Defaults to true for backwards compatibility.\r\n     */\r\n    public static MATERIAL_LOADING_FAILS_SILENTLY = true;\r\n\r\n    /**\r\n     * Loads assets without handedness conversions. This flag is for compatibility. Use it only if absolutely required. Defaults to false.\r\n     */\r\n    public static USE_LEGACY_BEHAVIOR = false;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public readonly name = OBJFileLoaderMetadata.name;\r\n    /**\r\n     * Defines the extension the plugin is able to load.\r\n     */\r\n    public readonly extensions = OBJFileLoaderMetadata.extensions;\r\n\r\n    private _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    private _loadingOptions: OBJLoadingOptions;\r\n\r\n    /**\r\n     * Creates loader for .OBJ files\r\n     *\r\n     * @param loadingOptions options for loading and parsing OBJ/MTL files.\r\n     */\r\n    constructor(loadingOptions?: Partial<Readonly<OBJLoadingOptions>>) {\r\n        this._loadingOptions = { ...OBJFileLoader._DefaultLoadingOptions, ...(loadingOptions ?? {}) };\r\n    }\r\n\r\n    private static get _DefaultLoadingOptions(): OBJLoadingOptions {\r\n        return {\r\n            computeNormals: OBJFileLoader.COMPUTE_NORMALS,\r\n            optimizeNormals: OBJFileLoader.OPTIMIZE_NORMALS,\r\n            importVertexColors: OBJFileLoader.IMPORT_VERTEX_COLORS,\r\n            invertY: OBJFileLoader.INVERT_Y,\r\n            invertTextureY: OBJFileLoader.INVERT_TEXTURE_Y,\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            UVScaling: OBJFileLoader.UV_SCALING,\r\n            materialLoadingFailsSilently: OBJFileLoader.MATERIAL_LOADING_FAILS_SILENTLY,\r\n            optimizeWithUV: OBJFileLoader.OPTIMIZE_WITH_UV,\r\n            skipMaterials: OBJFileLoader.SKIP_MATERIALS,\r\n            useLegacyBehavior: OBJFileLoader.USE_LEGACY_BEHAVIOR,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Calls synchronously the MTL file attached to this obj.\r\n     * Load function or importMesh function don't enable to load 2 files in the same time asynchronously.\r\n     * Without this function materials are not displayed in the first frame (but displayed after).\r\n     * In consequence it is impossible to get material information in your HTML file\r\n     *\r\n     * @param url The URL of the MTL file\r\n     * @param rootUrl defines where to load data from\r\n     * @param onSuccess Callback function to be called when the MTL file is loaded\r\n     * @param onFailure\r\n     */\r\n    private _loadMTL(\r\n        url: string,\r\n        rootUrl: string,\r\n        onSuccess: (response: string | ArrayBuffer, responseUrl?: string) => any,\r\n        onFailure: (pathOfFile: string, exception?: any) => void\r\n    ) {\r\n        //The complete path to the mtl file\r\n        const pathOfFile = rootUrl + url;\r\n\r\n        // Loads through the babylon tools to allow fileInput search.\r\n        Tools.LoadFile(pathOfFile, onSuccess, undefined, undefined, false, (request?: WebRequest, exception?: any) => {\r\n            onFailure(pathOfFile, exception);\r\n        });\r\n    }\r\n\r\n    /** @internal */\r\n    createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync | ISceneLoaderPlugin {\r\n        return new OBJFileLoader(options[OBJFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * If the data string can be loaded directly.\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    public canDirectLoad(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from the loaded OBJ data and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise containing the loaded meshes, particles, skeletons and animations\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public importMeshAsync(meshesNames: any, scene: Scene, data: any, rootUrl: string): Promise<ISceneLoaderAsyncResult> {\r\n        //get the meshes from OBJ file\r\n        // eslint-disable-next-line github/no-then\r\n        return this._parseSolidAsync(meshesNames, scene, data, rootUrl).then((meshes) => {\r\n            return {\r\n                meshes: meshes,\r\n                particleSystems: [],\r\n                skeletons: [],\r\n                animationGroups: [],\r\n                transformNodes: [],\r\n                geometries: [],\r\n                lights: [],\r\n                spriteManagers: [],\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from the loaded OBJ data and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data the OBJ data to load\r\n     * @param rootUrl root url to load from\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadAsync(scene: Scene, data: string, rootUrl: string): Promise<void> {\r\n        //Get the 3D model\r\n        // eslint-disable-next-line github/no-then\r\n        return this.importMeshAsync(null, scene, data, rootUrl).then(() => {\r\n            // return void\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public loadAssetContainerAsync(scene: Scene, data: string, rootUrl: string): Promise<AssetContainer> {\r\n        const container = new AssetContainer(scene);\r\n        this._assetContainer = container;\r\n\r\n        return (\r\n            this.importMeshAsync(null, scene, data, rootUrl)\r\n                // eslint-disable-next-line github/no-then\r\n                .then((result) => {\r\n                    result.meshes.forEach((mesh) => container.meshes.push(mesh));\r\n                    result.meshes.forEach((mesh) => {\r\n                        const material = mesh.material;\r\n                        if (material) {\r\n                            // Materials\r\n                            if (container.materials.indexOf(material) == -1) {\r\n                                container.materials.push(material);\r\n\r\n                                // Textures\r\n                                const textures = material.getActiveTextures();\r\n                                textures.forEach((t) => {\r\n                                    if (container.textures.indexOf(t) == -1) {\r\n                                        container.textures.push(t);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                    this._assetContainer = null;\r\n                    return container;\r\n                })\r\n                // eslint-disable-next-line github/no-then\r\n                .catch((ex) => {\r\n                    this._assetContainer = null;\r\n                    throw ex;\r\n                })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Read the OBJ file and create an Array of meshes.\r\n     * Each mesh contains all information given by the OBJ and the MTL file.\r\n     * i.e. vertices positions and indices, optional normals values, optional UV values, optional material\r\n     * @param meshesNames defines a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene defines the scene where are displayed the data\r\n     * @param data defines the content of the obj file\r\n     * @param rootUrl defines the path to the folder\r\n     * @returns the list of loaded meshes\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _parseSolidAsync(meshesNames: any, scene: Scene, data: string, rootUrl: string): Promise<Array<AbstractMesh>> {\r\n        let fileToLoad: string = \"\"; //The name of the mtlFile to load\r\n        const materialsFromMTLFile: MTLFileLoader = new MTLFileLoader();\r\n        const materialToUse: string[] = [];\r\n        const babylonMeshesArray: Array<Mesh> = []; //The mesh for babylon\r\n\r\n        // Sanitize data\r\n        data = data.replace(/#.*$/gm, \"\").trim();\r\n\r\n        // Main function\r\n        const solidParser = new SolidParser(materialToUse, babylonMeshesArray, this._loadingOptions);\r\n\r\n        solidParser.parse(meshesNames, data, scene, this._assetContainer, (fileName: string) => {\r\n            fileToLoad = fileName;\r\n        });\r\n\r\n        // load the materials\r\n        const mtlPromises: Array<Promise<void>> = [];\r\n        // Check if we have a file to load\r\n        if (fileToLoad !== \"\" && !this._loadingOptions.skipMaterials) {\r\n            //Load the file synchronously\r\n            mtlPromises.push(\r\n                new Promise((resolve, reject) => {\r\n                    this._loadMTL(\r\n                        fileToLoad,\r\n                        rootUrl,\r\n                        (dataLoaded) => {\r\n                            try {\r\n                                //Create materials thanks MTLLoader function\r\n                                materialsFromMTLFile.parseMTL(scene, dataLoaded, rootUrl, this._assetContainer);\r\n                                //Look at each material loaded in the mtl file\r\n                                for (let n = 0; n < materialsFromMTLFile.materials.length; n++) {\r\n                                    //Three variables to get all meshes with the same material\r\n                                    let startIndex = 0;\r\n                                    const _indices = [];\r\n                                    let _index;\r\n\r\n                                    //The material from MTL file is used in the meshes loaded\r\n                                    //Push the indice in an array\r\n                                    //Check if the material is not used for another mesh\r\n                                    while ((_index = materialToUse.indexOf(materialsFromMTLFile.materials[n].name, startIndex)) > -1) {\r\n                                        _indices.push(_index);\r\n                                        startIndex = _index + 1;\r\n                                    }\r\n                                    //If the material is not used dispose it\r\n                                    if (_index === -1 && _indices.length === 0) {\r\n                                        //If the material is not needed, remove it\r\n                                        materialsFromMTLFile.materials[n].dispose();\r\n                                    } else {\r\n                                        for (let o = 0; o < _indices.length; o++) {\r\n                                            //Apply the material to the Mesh for each mesh with the material\r\n                                            const mesh = babylonMeshesArray[_indices[o]];\r\n                                            const material = materialsFromMTLFile.materials[n];\r\n                                            mesh.material = material;\r\n\r\n                                            if (!mesh.getTotalIndices()) {\r\n                                                // No indices, we need to turn on point cloud\r\n                                                material.pointsCloud = true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                resolve();\r\n                            } catch (e) {\r\n                                Tools.Warn(`Error processing MTL file: '${fileToLoad}'`);\r\n                                if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                    resolve();\r\n                                } else {\r\n                                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                                    reject(e);\r\n                                }\r\n                            }\r\n                        },\r\n                        (pathOfFile: string, exception?: any) => {\r\n                            Tools.Warn(`Error downloading MTL file: '${fileToLoad}'`);\r\n                            if (this._loadingOptions.materialLoadingFailsSilently) {\r\n                                resolve();\r\n                            } else {\r\n                                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                                reject(exception);\r\n                            }\r\n                        }\r\n                    );\r\n                })\r\n            );\r\n        }\r\n        //Return an array with all Mesh\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(mtlPromises).then(() => {\r\n            const isLine = (mesh: AbstractMesh) => Boolean(mesh._internalMetadata?.[\"_isLine\"] ?? false);\r\n\r\n            // Iterate over the mesh, determine if it is a line mesh, clone or modify the material to line rendering.\r\n            babylonMeshesArray.forEach((mesh) => {\r\n                if (isLine(mesh)) {\r\n                    let mat = mesh.material ?? new StandardMaterial(mesh.name + \"_line\", scene);\r\n                    // If another mesh is using this material and it is not a line then we need to clone it.\r\n                    const needClone = mat.getBindedMeshes().filter((e) => !isLine(e)).length > 0;\r\n                    if (needClone) {\r\n                        mat = mat.clone(mat.name + \"_line\") ?? mat;\r\n                    }\r\n                    mat.wireframe = true;\r\n                    mesh.material = mat;\r\n                    if (mesh._internalMetadata) {\r\n                        mesh._internalMetadata[\"_isLine\"] = undefined;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return babylonMeshesArray;\r\n        });\r\n    }\r\n}\r\n\r\n//Add this loader into the register plugin\r\nRegisterSceneLoaderPlugin(new OBJFileLoader());\r\n"],
  "mappings": "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",
  "names": ["i"]
}
