{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/tools.functions.ts"],
  "sourcesContent": ["import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Function indicating if a number is an exponent of 2\r\n * @param value defines the value to test\r\n * @returns true if the value is an exponent of 2\r\n */\r\nexport function IsExponentOfTwo(value: number): boolean {\r\n    let count = 1;\r\n\r\n    do {\r\n        count *= 2;\r\n    } while (count < value);\r\n\r\n    return count === value;\r\n}\r\n\r\n/**\r\n * Interpolates between a and b via alpha\r\n * @param a The lower value (returned when alpha = 0)\r\n * @param b The upper value (returned when alpha = 1)\r\n * @param alpha The interpolation-factor\r\n * @returns The mixed value\r\n */\r\nexport function Mix(a: number, b: number, alpha: number): number {\r\n    return a * (1 - alpha) + b * alpha;\r\n}\r\n\r\n/**\r\n * Find the nearest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next nearest power of two.\r\n */\r\nexport function NearestPOT(x: number): number {\r\n    const c = CeilingPOT(x);\r\n    const f = FloorPOT(x);\r\n    return c - x > x - f ? f : c;\r\n}\r\n\r\n/**\r\n * Find the next highest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next highest power of two.\r\n */\r\nexport function CeilingPOT(x: number): number {\r\n    x--;\r\n    x |= x >> 1;\r\n    x |= x >> 2;\r\n    x |= x >> 4;\r\n    x |= x >> 8;\r\n    x |= x >> 16;\r\n    x++;\r\n    return x;\r\n}\r\n\r\n/**\r\n * Find the next lowest power of two.\r\n * @param x Number to start search from.\r\n * @returns Next lowest power of two.\r\n */\r\nexport function FloorPOT(x: number): number {\r\n    x = x | (x >> 1);\r\n    x = x | (x >> 2);\r\n    x = x | (x >> 4);\r\n    x = x | (x >> 8);\r\n    x = x | (x >> 16);\r\n    return x - (x >> 1);\r\n}\r\n\r\n/**\r\n * Get the closest exponent of two\r\n * @param value defines the value to approximate\r\n * @param max defines the maximum value to return\r\n * @param mode defines how to define the closest value\r\n * @returns closest exponent of two of the given value\r\n */\r\nexport function GetExponentOfTwo(value: number, max: number, mode = Constants.SCALEMODE_NEAREST): number {\r\n    let pot;\r\n\r\n    switch (mode) {\r\n        case Constants.SCALEMODE_FLOOR:\r\n            pot = FloorPOT(value);\r\n            break;\r\n        case Constants.SCALEMODE_NEAREST:\r\n            pot = NearestPOT(value);\r\n            break;\r\n        case Constants.SCALEMODE_CEILING:\r\n        default:\r\n            pot = CeilingPOT(value);\r\n            break;\r\n    }\r\n\r\n    return Math.min(pot, max);\r\n}\r\n"],
  "mappings": ";AAOM,SAAU,gBAAgB,OAAa;AACzC,MAAI,QAAQ;AAEZ,KAAG;AACC,aAAS;EACb,SAAS,QAAQ;AAEjB,SAAO,UAAU;AACrB;AASM,SAAU,IAAI,GAAW,GAAW,OAAa;AACnD,SAAO,KAAK,IAAI,SAAS,IAAI;AACjC;AAOM,SAAU,WAAW,GAAS;AAChC,QAAM,IAAI,WAAW,CAAC;AACtB,QAAM,IAAI,SAAS,CAAC;AACpB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC/B;AAOM,SAAU,WAAW,GAAS;AAChC;AACA,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV,OAAK,KAAK;AACV;AACA,SAAO;AACX;AAOM,SAAU,SAAS,GAAS;AAC9B,MAAI,IAAK,KAAK;AACd,MAAI,IAAK,KAAK;AACd,MAAI,IAAK,KAAK;AACd,MAAI,IAAK,KAAK;AACd,MAAI,IAAK,KAAK;AACd,SAAO,KAAK,KAAK;AACrB;AASM,SAAU,iBAAiB,OAAe,KAAa,OAAO,GAAA;AAChE,MAAI;AAEJ,UAAQ,MAAM;IACV,KAAK;AACD,YAAM,SAAS,KAAK;AACpB;IACJ,KAAK;AACD,YAAM,WAAW,KAAK;AACtB;IACJ,KAAK;IACL;AACI,YAAM,WAAW,KAAK;AACtB;EACR;AAEA,SAAO,KAAK,IAAI,KAAK,GAAG;AAC5B;",
  "names": []
}
