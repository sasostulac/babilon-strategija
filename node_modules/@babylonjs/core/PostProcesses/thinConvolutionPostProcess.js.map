{"version":3,"file":"thinConvolutionPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/thinConvolutionPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable, AbstractEngine, EffectWrapperCreationOptions } from \"core/index\";\r\nimport { EffectWrapper } from \"../Materials/effectRenderer\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\n/**\r\n * Post process used to apply a convolution effect\r\n */\r\nexport class ThinConvolutionPostProcess extends EffectWrapper {\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\r\n\r\n    /**\r\n     * The fragment shader url\r\n     */\r\n    public static readonly FragmentUrl = \"convolution\";\r\n\r\n    /**\r\n     * The list of uniforms used by the effect\r\n     */\r\n    public static readonly Uniforms = [\"kernel\", \"screenSize\"];\r\n\r\n    protected override _gatherImports(useWebGPU: boolean, list: Promise<any>[]) {\r\n        if (useWebGPU) {\r\n            this._webGPUReady = true;\r\n            list.push(import(\"../ShadersWGSL/convolution.fragment\"));\r\n        } else {\r\n            list.push(import(\"../Shaders/convolution.fragment\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructs a new convolution post process\r\n     * @param name Name of the effect\r\n     * @param engine Engine to use to render the effect. If not provided, the last created engine will be used\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     * @param options Options to configure the effect\r\n     */\r\n    constructor(name: string, engine: Nullable<AbstractEngine> = null, kernel: number[], options?: EffectWrapperCreationOptions) {\r\n        super({\r\n            ...options,\r\n            name,\r\n            engine: engine || Engine.LastCreatedEngine!,\r\n            useShaderStore: true,\r\n            useAsPostProcess: true,\r\n            fragmentShader: ThinConvolutionPostProcess.FragmentUrl,\r\n            uniforms: ThinConvolutionPostProcess.Uniforms,\r\n        });\r\n\r\n        this.kernel = kernel;\r\n    }\r\n\r\n    /** Array of 9 values corresponding to the 3x3 kernel to be applied */\r\n    public kernel: number[];\r\n\r\n    /**\r\n     * The width of the source texture\r\n     */\r\n    public textureWidth: number = 0;\r\n\r\n    /**\r\n     * The height of the source texture\r\n     */\r\n    public textureHeight: number = 0;\r\n\r\n    public override bind(noDefaultBindings = false) {\r\n        super.bind(noDefaultBindings);\r\n\r\n        const effect = this._drawWrapper.effect!;\r\n\r\n        effect.setFloat2(\"screenSize\", this.textureWidth, this.textureHeight);\r\n        effect.setArray(\"kernel\", this.kernel);\r\n    }\r\n}\r\n"]}