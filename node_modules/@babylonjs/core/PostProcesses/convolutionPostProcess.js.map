{"version":3,"file":"convolutionPostProcess.js","sourceRoot":"","sources":["../../../../dev/core/src/PostProcesses/convolutionPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\n\r\nimport type { Scene } from \"../scene\";\r\nimport { ThinConvolutionPostProcess } from \"./thinConvolutionPostProcess\";\r\n\r\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class ConvolutionPostProcess extends PostProcess {\r\n    /** Array of 9 values corresponding to the 3x3 kernel to be applied */\r\n    @serialize()\r\n    public get kernel() {\r\n        return this._effectWrapper.kernel;\r\n    }\r\n\r\n    public set kernel(value: number[]) {\r\n        this._effectWrapper.kernel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ConvolutionPostProcess\" string\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ConvolutionPostProcess\";\r\n    }\r\n\r\n    protected override _effectWrapper: ThinConvolutionPostProcess;\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        kernel: number[],\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: AbstractEngine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n    ) {\r\n        const localOptions = {\r\n            uniforms: ThinConvolutionPostProcess.Uniforms,\r\n            size: typeof options === \"number\" ? options : undefined,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            textureType,\r\n            ...(options as PostProcessOptions),\r\n        };\r\n\r\n        super(name, ThinConvolutionPostProcess.FragmentUrl, {\r\n            effectWrapper: typeof options === \"number\" || !options.effectWrapper ? new ThinConvolutionPostProcess(name, engine, kernel, localOptions) : undefined,\r\n            ...localOptions,\r\n        });\r\n\r\n        this.onApply = (_effect: Effect) => {\r\n            this._effectWrapper.textureWidth = this.width;\r\n            this._effectWrapper.textureHeight = this.height;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static override _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ConvolutionPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ConvolutionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = ThinConvolutionPostProcess.EdgeDetect0Kernel;\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = ThinConvolutionPostProcess.EdgeDetect1Kernel;\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = ThinConvolutionPostProcess.EdgeDetect2Kernel;\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = ThinConvolutionPostProcess.SharpenKernel;\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = ThinConvolutionPostProcess.EmbossKernel;\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = ThinConvolutionPostProcess.GaussianKernel;\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);\r\n"]}