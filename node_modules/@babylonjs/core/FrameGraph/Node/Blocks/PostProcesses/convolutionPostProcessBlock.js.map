{"version":3,"file":"convolutionPostProcessBlock.js","sourceRoot":"","sources":["../../../../../../../dev/core/src/FrameGraph/Node/Blocks/PostProcesses/convolutionPostProcessBlock.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Scene, FrameGraph } from \"core/index\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../../../Decorators/nodeDecorator\";\r\nimport { FrameGraphConvolutionTask } from \"../../../Tasks/PostProcesses/convolutionTask\";\r\nimport { NodeRenderGraphBasePostProcessBlock } from \"./basePostProcessBlock\";\r\nimport { ThinConvolutionPostProcess } from \"../../../../PostProcesses/thinConvolutionPostProcess\";\r\n\r\n/**\r\n * Block that implements the convolution post process\r\n */\r\nexport class NodeRenderGraphConvolutionPostProcessBlock extends NodeRenderGraphBasePostProcessBlock {\r\n    protected override _frameGraphTask: FrameGraphConvolutionTask;\r\n\r\n    public override _additionalConstructionParameters: [number[]];\r\n\r\n    /**\r\n     * Gets the frame graph task associated with this block\r\n     */\r\n    public override get task() {\r\n        return this._frameGraphTask;\r\n    }\r\n\r\n    /**\r\n     * Create a new NodeRenderGraphConvolutionPostProcessBlock\r\n     * @param name defines the block name\r\n     * @param frameGraph defines the hosting frame graph\r\n     * @param scene defines the hosting scene\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     */\r\n    public constructor(name: string, frameGraph: FrameGraph, scene: Scene, kernel: number[] = ThinConvolutionPostProcess.EmbossKernel) {\r\n        super(name, frameGraph, scene);\r\n\r\n        this._additionalConstructionParameters = [kernel];\r\n\r\n        this._finalizeInputOutputRegistering();\r\n\r\n        this._frameGraphTask = new FrameGraphConvolutionTask(this.name, frameGraph, new ThinConvolutionPostProcess(name, frameGraph.engine, kernel));\r\n    }\r\n\r\n    private _createTask(kernelIndex: number) {\r\n        const sourceSamplingMode = this._frameGraphTask.sourceSamplingMode;\r\n\r\n        this._frameGraphTask.dispose();\r\n\r\n        let kernel = ThinConvolutionPostProcess.EmbossKernel;\r\n        switch (kernelIndex) {\r\n            case 0:\r\n                kernel = ThinConvolutionPostProcess.EdgeDetect0Kernel;\r\n                break;\r\n            case 1:\r\n                kernel = ThinConvolutionPostProcess.EdgeDetect1Kernel;\r\n                break;\r\n            case 2:\r\n                kernel = ThinConvolutionPostProcess.EdgeDetect2Kernel;\r\n                break;\r\n            case 3:\r\n                kernel = ThinConvolutionPostProcess.SharpenKernel;\r\n                break;\r\n            case 4:\r\n                kernel = ThinConvolutionPostProcess.EmbossKernel;\r\n                break;\r\n            case 5:\r\n                kernel = ThinConvolutionPostProcess.GaussianKernel;\r\n                break;\r\n        }\r\n\r\n        this._frameGraphTask = new FrameGraphConvolutionTask(this.name, this._frameGraph, new ThinConvolutionPostProcess(this.name, this._frameGraph.engine, kernel));\r\n        this._frameGraphTask.sourceSamplingMode = sourceSamplingMode;\r\n\r\n        this._additionalConstructionParameters = [kernel];\r\n    }\r\n\r\n    /** The quality of the blur effect */\r\n    @editableInPropertyPage(\"Kernel\", PropertyTypeForEdition.List, \"PROPERTIES\", {\r\n        options: [\r\n            { label: \"EdgeDetect0\", value: 0 },\r\n            { label: \"EdgeDetect1\", value: 1 },\r\n            { label: \"EdgeDetect2\", value: 2 },\r\n            { label: \"Sharpen\", value: 3 },\r\n            { label: \"Emboss\", value: 4 },\r\n            { label: \"Gaussian\", value: 5 },\r\n        ],\r\n    })\r\n    public get kernel(): number {\r\n        const kernel = this._frameGraphTask.postProcess.kernel;\r\n\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.EdgeDetect0Kernel[index])) {\r\n            return 0;\r\n        }\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.EdgeDetect1Kernel[index])) {\r\n            return 1;\r\n        }\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.EdgeDetect2Kernel[index])) {\r\n            return 2;\r\n        }\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.SharpenKernel[index])) {\r\n            return 3;\r\n        }\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.EmbossKernel[index])) {\r\n            return 4;\r\n        }\r\n        if (kernel.every((value, index) => value === ThinConvolutionPostProcess.GaussianKernel[index])) {\r\n            return 5;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set kernel(value: number) {\r\n        this._createTask(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public override getClassName() {\r\n        return \"NodeRenderGraphConvolutionPostProcessBlock\";\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.NodeRenderGraphConvolutionPostProcessBlock\", NodeRenderGraphConvolutionPostProcessBlock);\r\n"]}