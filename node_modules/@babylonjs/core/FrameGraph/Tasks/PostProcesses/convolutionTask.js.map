{"version":3,"file":"convolutionTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/PostProcesses/convolutionTask.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAC9D,OAAO,EAAE,0BAA0B,EAAE,6DAAsD;AAE3F;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,yBAAyB;IAGpE;;;;;OAKG;IACH,YAAY,IAAY,EAAE,UAAsB,EAAE,eAA4C;QAC1F,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,eAAe,IAAI,IAAI,0BAA0B,CAAC,IAAI,EAAE,UAAU,CAAC,MAAM,EAAE,0BAA0B,CAAC,YAAY,CAAC,CAAC,CAAC;IACjJ,CAAC;IAEe,MAAM,CAClB,4BAA4B,GAAG,KAAK,EACpC,iBAA8D,EAC9D,kBAA+D;QAE/D,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,4BAA4B,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;QAE/F,IAAI,CAAC,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QAClD,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAEpD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import type { FrameGraph, FrameGraphRenderContext, FrameGraphRenderPass } from \"core/index\";\r\nimport { FrameGraphPostProcessTask } from \"./postProcessTask\";\r\nimport { ThinConvolutionPostProcess } from \"core/PostProcesses/thinConvolutionPostProcess\";\r\n\r\n/**\r\n * Task which applies a convolution post process.\r\n */\r\nexport class FrameGraphConvolutionTask extends FrameGraphPostProcessTask {\r\n    public override readonly postProcess: ThinConvolutionPostProcess;\r\n\r\n    /**\r\n     * Constructs a new convolution task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task belongs to.\r\n     * @param thinPostProcess The thin post process to use for the task. If not provided, a new one will be created.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, thinPostProcess?: ThinConvolutionPostProcess) {\r\n        super(name, frameGraph, thinPostProcess || new ThinConvolutionPostProcess(name, frameGraph.engine, ThinConvolutionPostProcess.EmbossKernel));\r\n    }\r\n\r\n    public override record(\r\n        skipCreationOfDisabledPasses = false,\r\n        additionalExecute?: (context: FrameGraphRenderContext) => void,\r\n        additionalBindings?: (context: FrameGraphRenderContext) => void\r\n    ): FrameGraphRenderPass {\r\n        const pass = super.record(skipCreationOfDisabledPasses, additionalExecute, additionalBindings);\r\n\r\n        this.postProcess.textureWidth = this._sourceWidth;\r\n        this.postProcess.textureHeight = this._sourceHeight;\r\n\r\n        return pass;\r\n    }\r\n}\r\n"]}