{"version":3,"file":"ssao2RenderingPipelineTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/PostProcesses/ssao2RenderingPipelineTask.ts"],"names":[],"mappings":"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","sourcesContent":["import type { FrameGraph, FrameGraphTextureHandle, Camera, FrameGraphTextureCreationOptions } from \"core/index\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { FrameGraphTask } from \"../../frameGraphTask\";\r\nimport { ThinSSAO2RenderingPipeline } from \"core/PostProcesses/RenderPipeline/Pipelines/thinSSAO2RenderingPipeline\";\r\nimport { FrameGraphSSAO2Task } from \"./ssao2Task\";\r\nimport { FrameGraphSSAO2BlurTask } from \"./ssao2BlurTask\";\r\nimport { FrameGraphPostProcessTask } from \"./postProcessTask\";\r\n\r\n/**\r\n * Task which applies a SSAO2 post process.\r\n */\r\nexport class FrameGraphSSAO2RenderingPipelineTask extends FrameGraphTask {\r\n    /**\r\n     * The source texture to apply the SSAO2 effect on.\r\n     */\r\n    public sourceTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The sampling mode to use for the source texture.\r\n     */\r\n    public sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n\r\n    /**\r\n     * The depth texture used by the SSAO2 effect (Z coordinate in camera view space).\r\n     */\r\n    public depthTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The normal texture used by the SSAO2 effect (normal vector in camera view space).\r\n     */\r\n    public normalTexture: FrameGraphTextureHandle;\r\n\r\n    private _camera: Camera;\r\n\r\n    /**\r\n     * The camera used to render the scene.\r\n     */\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: Camera) {\r\n        if (camera === this._camera) {\r\n            return;\r\n        }\r\n\r\n        this._camera = camera;\r\n\r\n        this.ssao.camera = camera;\r\n    }\r\n\r\n    /**\r\n     * The target texture to render the SSAO2 effect to.\r\n     */\r\n    public targetTexture?: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The output texture of the SSAO2 effect.\r\n     */\r\n    public readonly outputTexture: FrameGraphTextureHandle;\r\n\r\n    /**\r\n     * The SSAO2 Rendering pipeline.\r\n     */\r\n    public readonly ssao: ThinSSAO2RenderingPipeline;\r\n\r\n    /**\r\n     * The name of the task.\r\n     */\r\n    public override get name() {\r\n        return this._name;\r\n    }\r\n\r\n    public override set name(name: string) {\r\n        this._name = name;\r\n        if (this._ssao) {\r\n            this._ssao.name = `${name} SSAO2 main`;\r\n        }\r\n        if (this._ssaoBlurX) {\r\n            this._ssaoBlurX.name = `${name} SSAO2 Blur X`;\r\n        }\r\n        if (this._ssaoBlurY) {\r\n            this._ssaoBlurY.name = `${name} SSAO2 Blur Y`;\r\n        }\r\n        if (this._ssaoCombine) {\r\n            this._ssaoCombine.name = `${name} SSAO2 Combine`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The ratio between the SSAO texture size and the source texture size\r\n     */\r\n    public readonly ratioSSAO: number;\r\n\r\n    /**\r\n     * The ratio between the SSAO blur texture size and the source texture size\r\n     */\r\n    public readonly ratioBlur: number;\r\n\r\n    /**\r\n     * The texture type used by the different post processes created by SSAO2.\r\n     * It's a read-only property. If you want to change it, you must recreate the task and pass the appropriate texture type to the constructor.\r\n     */\r\n    public readonly textureType: number;\r\n\r\n    private readonly _ssao: FrameGraphSSAO2Task;\r\n    private readonly _ssaoBlurX: FrameGraphSSAO2BlurTask;\r\n    private readonly _ssaoBlurY: FrameGraphSSAO2BlurTask;\r\n    private readonly _ssaoCombine: FrameGraphPostProcessTask;\r\n\r\n    /**\r\n     * Constructs a SSAO2 rendering pipeline task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task belongs to.\r\n     * @param ratioSSAO The ratio between the SSAO texture size and the source texture size\r\n     * @param ratioBlur The ratio between the SSAO blur texture size and the source texture size\r\n     * @param textureType The texture type used by the different post processes created by SSAO2 (default: Constants.TEXTURETYPE_UNSIGNED_BYTE)\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, ratioSSAO: number, ratioBlur: number, textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE) {\r\n        super(name, frameGraph);\r\n\r\n        this.ratioSSAO = ratioSSAO;\r\n        this.ratioBlur = ratioBlur;\r\n        this.textureType = textureType;\r\n\r\n        this.ssao = new ThinSSAO2RenderingPipeline(name, frameGraph.scene);\r\n\r\n        this._ssao = new FrameGraphSSAO2Task(`${name} SSAO2 main`, this._frameGraph, this.ssao._ssaoPostProcess);\r\n        this._ssaoBlurX = new FrameGraphSSAO2BlurTask(`${name} SSAO2 Blur X`, this._frameGraph, true, this.ssao._ssaoBlurXPostProcess);\r\n        this._ssaoBlurY = new FrameGraphSSAO2BlurTask(`${name} SSAO2 Blur Y`, this._frameGraph, false, this.ssao._ssaoBlurYPostProcess);\r\n        this._ssaoCombine = new FrameGraphPostProcessTask(`${name} SSAO2 Combine`, this._frameGraph, this.ssao._ssaoCombinePostProcess);\r\n\r\n        this.outputTexture = this._frameGraph.textureManager.createDanglingHandle();\r\n    }\r\n\r\n    public override isReady() {\r\n        return this.ssao.isReady();\r\n    }\r\n\r\n    public record(): void {\r\n        if (this.sourceTexture === undefined || this.depthTexture === undefined || this.normalTexture === undefined || this.camera === undefined) {\r\n            throw new Error(`FrameGraphSSAO2RenderingPipelineTask \"${this.name}\": sourceTexture, depthTexture, normalTexture and camera are required`);\r\n        }\r\n\r\n        const sourceTextureDescription = this._frameGraph.textureManager.getTextureDescription(this.sourceTexture);\r\n\r\n        this._ssao.sourceTexture = this.sourceTexture;\r\n        this._ssao.sourceSamplingMode = this.sourceSamplingMode;\r\n        this._ssao.camera = this.camera;\r\n        this._ssao.depthTexture = this.depthTexture;\r\n        this._ssao.normalTexture = this.normalTexture;\r\n\r\n        const textureSize = {\r\n            width: Math.floor(sourceTextureDescription.size.width * this.ratioSSAO) || 1,\r\n            height: Math.floor(sourceTextureDescription.size.height * this.ratioSSAO) || 1,\r\n        };\r\n        const textureCreationOptions: FrameGraphTextureCreationOptions = {\r\n            size: textureSize,\r\n            options: {\r\n                createMipMaps: false,\r\n                types: [this.textureType],\r\n                formats: [Constants.TEXTUREFORMAT_RGBA],\r\n                samples: 1,\r\n                useSRGBBuffers: [false],\r\n                labels: [\"\"],\r\n            },\r\n            sizeIsPercentage: false,\r\n        };\r\n\r\n        const ssaoTextureHandle = this._frameGraph.textureManager.createRenderTargetTexture(this._ssao.name, textureCreationOptions);\r\n\r\n        // SSAO main post process\r\n        this._ssao.targetTexture = ssaoTextureHandle;\r\n        this._ssao.record(true);\r\n\r\n        // SSAO Blur X & Y\r\n        textureSize.width = Math.floor(sourceTextureDescription.size.width * this.ratioBlur) || 1;\r\n        textureSize.height = Math.floor(sourceTextureDescription.size.height * this.ratioBlur) || 1;\r\n\r\n        const sourceTextureCreationOptions = this._frameGraph.textureManager.getTextureCreationOptions(this.sourceTexture);\r\n\r\n        this._frameGraph.textureManager.resolveDanglingHandle(this.outputTexture, this.targetTexture, this.name + \" Output\", sourceTextureCreationOptions);\r\n\r\n        const blurXTextureHandle = this._frameGraph.textureManager.createRenderTargetTexture(this._ssaoBlurX.name, textureCreationOptions);\r\n\r\n        this._ssaoBlurX.sourceTexture = ssaoTextureHandle!;\r\n        this._ssaoBlurX.depthTexture = this.depthTexture;\r\n        this._ssaoBlurX.sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n        this._ssaoBlurX.targetTexture = blurXTextureHandle;\r\n        this._ssaoBlurX.record(true);\r\n\r\n        const blurYTextureHandle = this._frameGraph.textureManager.createRenderTargetTexture(this._ssaoBlurY.name, textureCreationOptions);\r\n\r\n        this._ssaoBlurY.sourceTexture = blurXTextureHandle;\r\n        this._ssaoBlurY.depthTexture = this.depthTexture;\r\n        this._ssaoBlurY.sourceSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n        this._ssaoBlurY.targetTexture = blurYTextureHandle;\r\n        this._ssaoBlurY.record(true);\r\n\r\n        // SSAO Combine\r\n        this._ssaoCombine.sourceTexture = this.sourceTexture;\r\n        this._ssaoCombine.sourceSamplingMode = this.sourceSamplingMode;\r\n        this._ssaoCombine.targetTexture = this.outputTexture;\r\n        const combinerPass = this._ssaoCombine.record(\r\n            true,\r\n            (context) => {\r\n                context.setTextureSamplingMode(this.sourceTexture, this.sourceSamplingMode);\r\n                context.setTextureSamplingMode(blurYTextureHandle, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n            },\r\n            (context) => {\r\n                context.bindTextureHandle(this._ssaoCombine.drawWrapper.effect!, \"textureSampler\", blurYTextureHandle);\r\n                context.bindTextureHandle(this._ssaoCombine.drawWrapper.effect!, \"originalColor\", this.sourceTexture);\r\n            }\r\n        );\r\n\r\n        combinerPass.addDependencies(blurYTextureHandle);\r\n\r\n        const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.addDependencies(this.sourceTexture);\r\n\r\n        passDisabled.setRenderTarget(this.outputTexture);\r\n        passDisabled.setExecuteFunc((context) => {\r\n            context.copyTexture(this.sourceTexture);\r\n        });\r\n    }\r\n\r\n    public override dispose(): void {\r\n        this._ssao.dispose();\r\n        this._ssaoBlurX.dispose();\r\n        this._ssaoBlurY.dispose();\r\n        this._ssaoCombine.dispose();\r\n        this.ssao.dispose();\r\n        super.dispose();\r\n    }\r\n}\r\n"]}