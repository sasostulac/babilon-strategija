{"version":3,"file":"taaTask.js","sourceRoot":"","sources":["../../../../../../dev/core/src/FrameGraph/Tasks/PostProcesses/taaTask.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\r\n    FrameGraph,\r\n    FrameGraphRenderPass,\r\n    FrameGraphObjectRendererTask,\r\n    FrameGraphTextureCreationOptions,\r\n    Observer,\r\n    ObjectRenderer,\r\n    FrameGraphTextureHandle,\r\n    Scene,\r\n} from \"core/index\";\r\nimport { ThinTAAPostProcess } from \"core/PostProcesses/thinTAAPostProcess\";\r\nimport { FrameGraphPostProcessTask } from \"./postProcessTask\";\r\nimport { Constants } from \"core/Engines/constants\";\r\n\r\n/**\r\n * Task which applies a Temporal Anti-Aliasing post process.\r\n */\r\nexport class FrameGraphTAATask extends FrameGraphPostProcessTask {\r\n    public override readonly postProcess: ThinTAAPostProcess;\r\n\r\n    /**\r\n     * The object renderer task used to render the scene objects.\r\n     */\r\n    public objectRendererTask: FrameGraphObjectRendererTask;\r\n\r\n    /**\r\n     * The handle to the velocity texture. Only needed if postProcess.reprojectHistory is enabled.\r\n     * Note that you must use the linear velocity texture!\r\n     */\r\n    public velocityTexture: FrameGraphTextureHandle;\r\n\r\n    protected _onBeforeRenderSceneObserver: Observer<Scene>;\r\n    protected _initRenderingObserver: Observer<ObjectRenderer>;\r\n\r\n    /**\r\n     * Constructs a new Temporal Anti-Aliasing task.\r\n     * @param name The name of the task.\r\n     * @param frameGraph The frame graph this task is associated with.\r\n     * @param thinPostProcess The thin post process to use for the Temporal Anti-Aliasing effect. If not provided, a new one will be created.\r\n     */\r\n    constructor(name: string, frameGraph: FrameGraph, thinPostProcess?: ThinTAAPostProcess) {\r\n        super(name, frameGraph, thinPostProcess || new ThinTAAPostProcess(name, frameGraph.scene));\r\n    }\r\n\r\n    public override record(): FrameGraphRenderPass {\r\n        if (this.sourceTexture === undefined || this.objectRendererTask === undefined) {\r\n            throw new Error(`FrameGraphPostProcessTask \"${this.name}\": sourceTexture and objectRendererTask are required`);\r\n        }\r\n\r\n        this._frameGraph.scene.onBeforeRenderObservable.remove(this._onBeforeRenderSceneObserver);\r\n        this._onBeforeRenderSceneObserver = this._frameGraph.scene.onBeforeRenderObservable.add(() => {\r\n            if (this.postProcess.reprojectHistory && !this.disabled) {\r\n                this.postProcess._updateJitter();\r\n            }\r\n        });\r\n\r\n        const objectRenderer = this.objectRendererTask.objectRenderer;\r\n\r\n        objectRenderer.onInitRenderingObservable.remove(this._initRenderingObserver);\r\n        this._initRenderingObserver = objectRenderer.onInitRenderingObservable.add(() => {\r\n            if (!this.postProcess.reprojectHistory && !this.disabled) {\r\n                this.postProcess._updateJitter();\r\n\r\n                // We pass false to this.camera.getProjectionMatrix() when TAA is enabled to avoid overwriting the projection matrix calculated by the call to this.postProcess.updateJitter()\r\n                const camera = objectRenderer.activeCamera!;\r\n                this._frameGraph.scene.setTransformMatrix(camera.getViewMatrix(), camera.getProjectionMatrix(this.postProcess.disabled));\r\n            }\r\n        });\r\n\r\n        const textureManager = this._frameGraph.textureManager;\r\n        const sourceSize = textureManager.getTextureAbsoluteDimensions(this.sourceTexture);\r\n\r\n        this._sourceWidth = this._outputWidth = sourceSize.width;\r\n        this._sourceHeight = this._outputHeight = sourceSize.height;\r\n\r\n        const renderTextureSize = textureManager.getTextureAbsoluteDimensions(this.objectRendererTask.outputTexture);\r\n\r\n        this.postProcess.textureWidth = renderTextureSize.width;\r\n        this.postProcess.textureHeight = renderTextureSize.height;\r\n\r\n        const pingPongTextureCreationOptions: FrameGraphTextureCreationOptions = {\r\n            size: sourceSize,\r\n            options: {\r\n                createMipMaps: false,\r\n                types: [Constants.TEXTURETYPE_HALF_FLOAT],\r\n                formats: [Constants.TEXTUREFORMAT_RGBA],\r\n                samples: 1,\r\n                useSRGBBuffers: [false],\r\n                creationFlags: [0],\r\n                labels: [\"\"],\r\n            },\r\n            sizeIsPercentage: false,\r\n            isHistoryTexture: true,\r\n        };\r\n\r\n        const pingPongHandle = textureManager.createRenderTargetTexture(`${this.name} history`, pingPongTextureCreationOptions);\r\n\r\n        textureManager.resolveDanglingHandle(this.outputTexture, pingPongHandle);\r\n\r\n        const pass = this._frameGraph.addRenderPass(this.name);\r\n\r\n        pass.depthReadOnly = this.depthReadOnly;\r\n        pass.stencilReadOnly = this.stencilReadOnly;\r\n\r\n        pass.addDependencies(this.sourceTexture);\r\n\r\n        pass.setRenderTarget(this.outputTexture);\r\n        pass.setRenderTargetDepth(this.depthAttachmentTexture);\r\n        pass.setExecuteFunc((context) => {\r\n            objectRenderer.dontSetTransformationMatrix = !this.postProcess.reprojectHistory;\r\n            this.postProcess.camera = objectRenderer.activeCamera;\r\n\r\n            if (this.sourceTexture !== undefined) {\r\n                context.setTextureSamplingMode(this.sourceTexture, this.sourceSamplingMode);\r\n            }\r\n            if (this.velocityTexture !== undefined) {\r\n                context.setTextureSamplingMode(this.velocityTexture, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n            }\r\n\r\n            context.setTextureSamplingMode(pingPongHandle, Constants.TEXTURE_BILINEAR_SAMPLINGMODE);\r\n\r\n            context.applyFullScreenEffect(\r\n                this._postProcessDrawWrapper,\r\n                () => {\r\n                    context.bindTextureHandle(this._postProcessDrawWrapper.effect!, \"textureSampler\", this.sourceTexture!);\r\n                    context.bindTextureHandle(this._postProcessDrawWrapper.effect!, \"historySampler\", pingPongHandle);\r\n                    if (this.postProcess.reprojectHistory && this.velocityTexture !== undefined) {\r\n                        context.bindTextureHandle(this._postProcessDrawWrapper.effect!, \"velocitySampler\", this.velocityTexture);\r\n                    }\r\n                    this.postProcess.bind();\r\n                },\r\n                this.stencilState,\r\n                this.disableColorWrite,\r\n                this.drawBackFace,\r\n                this.depthTest\r\n            );\r\n        });\r\n\r\n        const passDisabled = this._frameGraph.addRenderPass(this.name + \"_disabled\", true);\r\n\r\n        passDisabled.depthReadOnly = this.depthReadOnly;\r\n        passDisabled.stencilReadOnly = this.stencilReadOnly;\r\n\r\n        passDisabled.addDependencies(this.sourceTexture);\r\n\r\n        passDisabled.setRenderTarget(this.outputTexture);\r\n        passDisabled.setRenderTargetDepth(this.depthAttachmentTexture);\r\n        passDisabled.setExecuteFunc((context) => {\r\n            context.copyTexture(this.sourceTexture!);\r\n        });\r\n\r\n        return pass;\r\n    }\r\n\r\n    public override dispose() {\r\n        this.objectRendererTask?.objectRenderer.onInitRenderingObservable.remove(this._initRenderingObserver);\r\n        this._frameGraph.scene.onBeforeRenderObservable.remove(this._onBeforeRenderSceneObserver);\r\n        super.dispose();\r\n    }\r\n}\r\n"]}