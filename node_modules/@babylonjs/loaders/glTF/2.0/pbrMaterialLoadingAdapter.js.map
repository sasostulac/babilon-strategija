{"version":3,"file":"pbrMaterialLoadingAdapter.js","sourceRoot":"","sources":["../../../../../dev/loaders/src/glTF/2.0/pbrMaterialLoadingAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { IMaterialLoadingAdapter } from \"./materialLoadingAdapter\";\r\n\r\n/**\r\n * Material Loading Adapter for PBR materials that provides a unified OpenPBR-like interface.\r\n */\r\nexport class PBRMaterialLoadingAdapter implements IMaterialLoadingAdapter {\r\n    private _material: PBRMaterial;\r\n\r\n    /**\r\n     * Creates a new instance of the PBRMaterialLoadingAdapter.\r\n     * @param material - The PBR material to adapt.\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material as PBRMaterial;\r\n        this._material.enableSpecularAntiAliasing = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying material\r\n     */\r\n    public get material(): PBRMaterial {\r\n        return this._material;\r\n    }\r\n\r\n    /**\r\n     * Whether the material should be treated as unlit\r\n     */\r\n    public get isUnlit(): boolean {\r\n        return this._material.unlit;\r\n    }\r\n\r\n    /**\r\n     * Sets whether the material should be treated as unlit\r\n     */\r\n    public set isUnlit(value: boolean) {\r\n        this._material.unlit = value;\r\n    }\r\n\r\n    // ========================================\r\n    // CULLING PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets whether back face culling is enabled.\r\n     * @param value True to enable back face culling\r\n     */\r\n    public set backFaceCulling(value: boolean) {\r\n        this._material.backFaceCulling = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether back face culling is enabled.\r\n     * @returns True if back face culling is enabled\r\n     */\r\n    public get backFaceCulling(): boolean {\r\n        return this._material.backFaceCulling;\r\n    }\r\n\r\n    /**\r\n     * Sets whether two-sided lighting is enabled.\r\n     * @param value True to enable two-sided lighting\r\n     */\r\n    public set twoSidedLighting(value: boolean) {\r\n        this._material.twoSidedLighting = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether two-sided lighting is enabled.\r\n     * @returns True if two-sided lighting is enabled\r\n     */\r\n    public get twoSidedLighting(): boolean {\r\n        return this._material.twoSidedLighting;\r\n    }\r\n\r\n    // ========================================\r\n    // ALPHA PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the alpha cutoff value for alpha testing.\r\n     * @param value The alpha cutoff threshold (0-1)\r\n     */\r\n    public set alphaCutOff(value: number) {\r\n        this._material.alphaCutOff = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha cutoff value.\r\n     * @returns The alpha cutoff threshold (0-1)\r\n     */\r\n    public get alphaCutOff(): number {\r\n        return this._material.alphaCutOff;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use alpha from the albedo texture.\r\n     * @param value True to use alpha from albedo texture\r\n     */\r\n    public set useAlphaFromBaseColorTexture(value: boolean) {\r\n        this._material.useAlphaFromAlbedoTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether alpha is used from the albedo texture.\r\n     * @returns True if using alpha from albedo texture\r\n     */\r\n    public get useAlphaFromBaseColorTexture(): boolean {\r\n        return this._material.useAlphaFromAlbedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the transparency is treated as alpha coverage.\r\n     */\r\n    public get transparencyAsAlphaCoverage(): boolean {\r\n        return this._material.useRadianceOverAlpha || this._material.useSpecularOverAlpha;\r\n    }\r\n\r\n    /**\r\n     * Sets/Gets whether the transparency is treated as alpha coverage\r\n     */\r\n    public set transparencyAsAlphaCoverage(value: boolean) {\r\n        this._material.useRadianceOverAlpha = !value;\r\n        this._material.useSpecularOverAlpha = !value;\r\n    }\r\n\r\n    // ========================================\r\n    // BASE PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the base color of the material (mapped to PBR albedoColor).\r\n     * @param value The base color as a Color3\r\n     */\r\n    public set baseColor(value: Color3) {\r\n        this._material.albedoColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base color of the material.\r\n     * @returns The base color as a Color3\r\n     */\r\n    public get baseColor(): Color3 {\r\n        return this._material.albedoColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the base color texture of the material (mapped to PBR albedoTexture).\r\n     * @param value The base color texture or null\r\n     */\r\n    public set baseColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.albedoTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base color texture of the material.\r\n     * @returns The base color texture or null\r\n     */\r\n    public get baseColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the base diffuse roughness of the material.\r\n     * @param value The diffuse roughness value (0-1)\r\n     */\r\n    public set baseDiffuseRoughness(value: number) {\r\n        this._material.baseDiffuseRoughness = value;\r\n        if (value > 0) {\r\n            this._material.brdf.baseDiffuseModel = Constants.MATERIAL_DIFFUSE_MODEL_E_OREN_NAYAR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the base diffuse roughness of the material.\r\n     * @returns The diffuse roughness value (0-1), defaults to 0 if not set\r\n     */\r\n    public get baseDiffuseRoughness(): number {\r\n        return this._material.baseDiffuseRoughness ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the base diffuse roughness texture of the material.\r\n     * @param value The diffuse roughness texture or null\r\n     */\r\n    public set baseDiffuseRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.baseDiffuseRoughnessTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base diffuse roughness texture of the material.\r\n     * @returns The diffuse roughness texture or null\r\n     */\r\n    public get baseDiffuseRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.baseDiffuseRoughnessTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the base metalness value of the material (mapped to PBR metallic).\r\n     * @param value The metalness value (0-1)\r\n     */\r\n    public set baseMetalness(value: number) {\r\n        this._material.metallic = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base metalness value of the material.\r\n     * @returns The metalness value (0-1), defaults to 1 if not set\r\n     */\r\n    public get baseMetalness(): number {\r\n        return this._material.metallic ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the base metalness texture of the material (mapped to PBR metallicTexture).\r\n     * @param value The metalness texture or null\r\n     */\r\n    public set baseMetalnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.metallicTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the base metalness texture of the material.\r\n     * @returns The metalness texture or null\r\n     */\r\n    public get baseMetalnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use roughness from the metallic texture's green channel.\r\n     * Also disables using roughness from the alpha channel when enabled.\r\n     * @param value True to use green channel for roughness\r\n     */\r\n    public set useRoughnessFromMetallicTextureGreen(value: boolean) {\r\n        this._material.useRoughnessFromMetallicTextureGreen = value;\r\n        this._material.useRoughnessFromMetallicTextureAlpha = !value;\r\n    }\r\n\r\n    /**\r\n     * Sets whether to use metalness from the metallic texture's blue channel.\r\n     * @param value True to use blue channel for metalness\r\n     */\r\n    public set useMetallicFromMetallicTextureBlue(value: boolean) {\r\n        this._material.useMetallnessFromMetallicTextureBlue = value;\r\n    }\r\n\r\n    // ========================================\r\n    // SPECULAR PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures specular properties and optionally enables OpenPBR BRDF model for edge color support.\r\n     * @param enableEdgeColor Whether to enable OpenPBR BRDF models for edge color support\r\n     */\r\n    public enableSpecularEdgeColor(enableEdgeColor: boolean = false): void {\r\n        if (enableEdgeColor) {\r\n            this._material.brdf.dielectricSpecularModel = Constants.MATERIAL_DIELECTRIC_SPECULAR_MODEL_OPENPBR;\r\n            this._material.brdf.conductorSpecularModel = Constants.MATERIAL_CONDUCTOR_SPECULAR_MODEL_OPENPBR;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the specular weight (mapped to PBR metallicF0Factor).\r\n     * @param value The specular weight value\r\n     */\r\n    public set specularWeight(value: number) {\r\n        this._material.metallicF0Factor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular weight.\r\n     * @returns The specular weight value, defaults to 1 if not set\r\n     */\r\n    public get specularWeight(): number {\r\n        return this._material.metallicF0Factor ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular weight texture (mapped to PBR metallicReflectanceTexture).\r\n     * Configures the material to use only metalness from this texture when set.\r\n     * @param value The specular weight texture or null\r\n     */\r\n    public set specularWeightTexture(value: Nullable<BaseTexture>) {\r\n        if (value) {\r\n            this._material.metallicReflectanceTexture = value;\r\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n        } else {\r\n            this._material.metallicReflectanceTexture = null;\r\n            this._material.useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the specular weight texture.\r\n     * @returns The specular weight texture or null\r\n     */\r\n    public get specularWeightTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicReflectanceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular color (mapped to PBR metallicReflectanceColor).\r\n     * @param value The specular color as a Color3\r\n     */\r\n    public set specularColor(value: Color3) {\r\n        this._material.metallicReflectanceColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular color.\r\n     * @returns The specular color as a Color3\r\n     */\r\n    public get specularColor(): Color3 {\r\n        return this._material.metallicReflectanceColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular color texture (mapped to PBR reflectanceTexture).\r\n     * @param value The specular color texture or null\r\n     */\r\n    public set specularColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.reflectanceTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular color texture.\r\n     * @returns The specular color texture or null\r\n     */\r\n    public get specularColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.reflectanceTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular roughness (mapped to PBR roughness).\r\n     * @param value The roughness value (0-1)\r\n     */\r\n    public set specularRoughness(value: number) {\r\n        this._material.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness.\r\n     * @returns The roughness value (0-1), defaults to 1 if not set\r\n     */\r\n    public get specularRoughness(): number {\r\n        return this._material.roughness ?? 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular roughness texture.\r\n     * Note: PBR uses the same texture for both metallic and roughness,\r\n     * so this only sets the texture if no base metalness texture exists.\r\n     * @param value The roughness texture or null\r\n     */\r\n    public set specularRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        // PBR uses the same texture for both metallic and roughness\r\n        if (!this.baseMetalnessTexture) {\r\n            this._material.metallicTexture = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness texture.\r\n     * @returns The roughness texture (same as metallic texture for PBR) or null\r\n     */\r\n    public get specularRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.metallicTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the specular index of refraction (mapped to PBR indexOfRefraction).\r\n     * @param value The IOR value\r\n     */\r\n    public set specularIor(value: number) {\r\n        this._material.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular index of refraction.\r\n     * @returns The IOR value\r\n     */\r\n    public get specularIor(): number {\r\n        return this._material.indexOfRefraction;\r\n    }\r\n\r\n    // ========================================\r\n    // EMISSION PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the emission color (mapped to PBR emissiveColor).\r\n     * @param value The emission color as a Color3\r\n     */\r\n    public set emissionColor(value: Color3) {\r\n        this._material.emissiveColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission color.\r\n     * @returns The emission color as a Color3\r\n     */\r\n    public get emissionColor(): Color3 {\r\n        return this._material.emissiveColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the emission luminance/intensity (mapped to PBR emissiveIntensity).\r\n     * @param value The emission intensity value\r\n     */\r\n    public set emissionLuminance(value: number) {\r\n        this._material.emissiveIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission luminance/intensity.\r\n     * @returns The emission intensity value\r\n     */\r\n    public get emissionLuminance(): number {\r\n        return this._material.emissiveIntensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the emission color texture (mapped to PBR emissiveTexture).\r\n     * @param value The emission texture or null\r\n     */\r\n    public set emissionColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.emissiveTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the emission color texture.\r\n     * @returns The emission texture or null\r\n     */\r\n    public get emissionColorTexture(): Nullable<BaseTexture> {\r\n        return this._material.emissiveTexture;\r\n    }\r\n\r\n    // ========================================\r\n    // AMBIENT OCCLUSION\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the ambient occlusion texture (mapped to PBR ambientTexture).\r\n     * Automatically enables grayscale mode when set.\r\n     * @param value The ambient occlusion texture or null\r\n     */\r\n    public set ambientOcclusionTexture(value: Nullable<BaseTexture>) {\r\n        this._material.ambientTexture = value;\r\n        if (value) {\r\n            this._material.useAmbientInGrayScale = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion texture.\r\n     * @returns The ambient occlusion texture or null\r\n     */\r\n    public get ambientOcclusionTexture(): Nullable<BaseTexture> {\r\n        return this._material.ambientTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the ambient occlusion texture strength.\r\n     * @param value The strength value (typically 0-1)\r\n     */\r\n    public set ambientOcclusionTextureStrength(value: number) {\r\n        this._material.ambientTextureStrength = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion texture strength.\r\n     * @returns The strength value, defaults to 1.0 if not set\r\n     */\r\n    public get ambientOcclusionTextureStrength(): number {\r\n        return this._material.ambientTextureStrength ?? 1.0;\r\n    }\r\n\r\n    // ========================================\r\n    // COAT PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures clear coat for PBR material.\r\n     * Enables clear coat and sets up proper configuration.\r\n     */\r\n    public configureCoat(): void {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\r\n        this._material.clearCoat.remapF0OnInterfaceChange = false;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat weight (mapped to PBR clearCoat.intensity).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat weight value (0-1)\r\n     */\r\n    public set coatWeight(value: number) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat weight.\r\n     * @returns The coat weight value\r\n     */\r\n    public get coatWeight(): number {\r\n        return this._material.clearCoat.intensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat weight texture (mapped to PBR clearCoat.texture).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat weight texture or null\r\n     */\r\n    public set coatWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat weight texture.\r\n     * @returns The coat weight texture or null\r\n     */\r\n    public get coatWeightTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.texture;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat color (mapped to PBR clearCoat.tintColor).\r\n     * @param value The coat tint color as a Color3\r\n     */\r\n    public set coatColor(value: Color3) {\r\n        this._material.clearCoat.isTintEnabled = value != Color3.White();\r\n        this._material.clearCoat.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat color texture (mapped to PBR clearCoat.tintTexture).\r\n     * @param value The coat color texture or null\r\n     */\r\n    public set coatColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.tintTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness (mapped to PBR clearCoat.roughness).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat roughness value (0-1)\r\n     */\r\n    public set coatRoughness(value: number) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness.\r\n     * @returns The coat roughness value, defaults to 0 if not set\r\n     */\r\n    public get coatRoughness(): number {\r\n        return this._material.clearCoat.roughness ?? 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness texture (mapped to PBR clearCoat.textureRoughness).\r\n     * Automatically enables clear coat and disables using roughness from main texture.\r\n     * @param value The coat roughness texture or null\r\n     */\r\n    public set coatRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.useRoughnessFromMainTexture = false;\r\n        this._material.clearCoat.textureRoughness = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness texture.\r\n     * @returns The coat roughness texture or null\r\n     */\r\n    public get coatRoughnessTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.textureRoughness;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat index of refraction (IOR).\r\n     */\r\n    public set coatIor(value: number) {\r\n        this._material.clearCoat.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat darkening value.\r\n     * Note: PBR doesn't have a direct coat darkening property, so this is a no-op.\r\n     * @param value The coat darkening value (ignored for PBR)\r\n     */\r\n    public set coatDarkening(value: number) {\r\n        // PBR doesn't have a coat darkening property\r\n    }\r\n\r\n    /**\r\n     * Sets the coat darkening texture\r\n     * @param value The coat darkening texture or null\r\n     */\r\n    public set coatDarkeningTexture(value: Nullable<BaseTexture>) {\r\n        // PBR doesn't have a coat darkening property\r\n    }\r\n\r\n    /**\r\n     * Sets the coat roughness anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\r\n     * @param value The coat anisotropy intensity value (currently ignored)\r\n     */\r\n    public set coatRoughnessAnisotropy(value: number) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropy = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat roughness anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this returns 0.\r\n     * @returns Currently returns 0 as clearCoat anisotropy is not yet available\r\n     */\r\n    public get coatRoughnessAnisotropy(): number {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // return this._material.clearCoat.anisotropy ?? 0;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat tangent angle for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy yet, so this is a placeholder.\r\n     * @param value The coat anisotropy rotation angle in radians (currently ignored)\r\n     */\r\n    public set geometryCoatTangentAngle(value: number) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropyAngle = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the coat tangent texture for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this is a placeholder.\r\n     * @param value The coat anisotropy texture (currently ignored)\r\n     */\r\n    public set geometryCoatTangentTexture(value: Nullable<BaseTexture>) {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // this._material.clearCoat.anisotropyTangentTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the coat tangent texture for anisotropy.\r\n     * Note: PBR clearCoat doesn't support anisotropy textures yet, so this returns null.\r\n     * @returns Currently returns null as clearCoat anisotropy is not yet available\r\n     */\r\n    public get geometryCoatTangentTexture(): Nullable<BaseTexture> {\r\n        // TODO: Implement when PBR clearCoat anisotropy becomes available\r\n        // return this._material.clearCoat.anisotropyTangentTexture;\r\n        return null;\r\n    }\r\n\r\n    // ========================================\r\n    // TRANSMISSION LAYER\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the transmission weight (mapped to PBR subSurface.refractionIntensity).\r\n     * Enables refraction when value \\> 0.\r\n     * @param value The transmission weight value (0-1)\r\n     */\r\n    public set transmissionWeight(value: number) {\r\n        this._material.subSurface.isRefractionEnabled = value > 0;\r\n        this._material.subSurface.refractionIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transmission weight.\r\n     * @returns The transmission weight value\r\n     */\r\n    public get transmissionWeight(): number {\r\n        return this._material.subSurface.refractionIntensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the transmission weight texture (mapped to PBR subSurface.refractionIntensityTexture).\r\n     * Automatically enables refraction and glTF-style textures.\r\n     * @param value The transmission weight texture or null\r\n     */\r\n    public set transmissionWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.isRefractionEnabled = true;\r\n        this._material.subSurface.refractionIntensityTexture = value;\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the attenuation distance for volume scattering.\r\n     * @param value The attenuation distance value\r\n     */\r\n    public set transmissionDepth(value: number) {\r\n        this._material.subSurface.tintColorAtDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the attenuation color (mapped to PBR subSurface.tintColor).\r\n     * @param value The attenuation color as a Color3\r\n     */\r\n    public set transmissionColor(value: Color3) {\r\n        this._material.subSurface.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the transmission dispersion Abbe number.\r\n     * @param value The Abbe number value\r\n     */\r\n    public set transmissionDispersionAbbeNumber(value: number) {\r\n        if (value > 0) {\r\n            this._material.subSurface.isDispersionEnabled = true;\r\n            this._material.subSurface.dispersion = 20.0 / value;\r\n        } else {\r\n            this._material.subSurface.isDispersionEnabled = false;\r\n            this._material.subSurface.dispersion = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Configures transmission for thin-surface transmission (KHR_materials_transmission).\r\n     * Sets up the material for proper thin-surface transmission behavior.\r\n     */\r\n    public configureTransmission(): void {\r\n        // Since this extension models thin-surface transmission only, we must make IOR = 1.0\r\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\r\n        // Albedo colour will tint transmission.\r\n        this._material.subSurface.useAlbedoToTintRefraction = true;\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = 0.0;\r\n    }\r\n\r\n    // ========================================\r\n    // VOLUME PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the thickness texture (mapped to PBR subSurface.thicknessTexture).\r\n     * Automatically enables refraction.\r\n     * @param value The thickness texture or null\r\n     */\r\n    public set volumeThicknessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.thicknessTexture = value;\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the thickness factor (mapped to PBR subSurface.maximumThickness).\r\n     * Automatically enables refraction.\r\n     * @param value The thickness value\r\n     */\r\n    public set volumeThickness(value: number) {\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = value;\r\n        this._material.subSurface.useThicknessAsDepth = true;\r\n        if (value > 0) {\r\n            this._material.subSurface.volumeIndexOfRefraction = this._material.indexOfRefraction;\r\n        }\r\n    }\r\n\r\n    // ========================================\r\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures subsurface properties for PBR material\r\n     */\r\n    public configureSubsurface(): void {\r\n        this._material.subSurface.useGltfStyleTextures = true;\r\n\r\n        // Since this extension models thin-surface transmission only, we must make the\r\n        // internal IOR == 1.0 and set the thickness to 0.\r\n        this._material.subSurface.volumeIndexOfRefraction = 1.0;\r\n        this._material.subSurface.minimumThickness = 0.0;\r\n        this._material.subSurface.maximumThickness = 0.0;\r\n\r\n        // Tint color will be used for transmission.\r\n        this._material.subSurface.useAlbedoToTintTranslucency = false;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface weight\r\n     */\r\n    public set subsurfaceWeight(value: number) {\r\n        this._material.subSurface.isTranslucencyEnabled = value > 0;\r\n        this._material.subSurface.translucencyIntensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the subsurface weight\r\n     * @returns The subsurface weight value\r\n     */\r\n    public get subsurfaceWeight(): number {\r\n        return this._material.subSurface.isTranslucencyEnabled ? this._material.subSurface.translucencyIntensity : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface weight texture\r\n     */\r\n    public set subsurfaceWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.translucencyIntensityTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface color.\r\n     * @param value The subsurface tint color as a Color3\r\n     */\r\n    public set subsurfaceColor(value: Color3) {\r\n        this._material.subSurface.tintColor = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the subsurface color texture.\r\n     * @param value The subsurface tint texture or null\r\n     */\r\n    public set subsurfaceColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.subSurface.translucencyColorTexture = value;\r\n    }\r\n\r\n    // ========================================\r\n    // FUZZ LAYER (Sheen)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures sheen for PBR material.\r\n     * Enables sheen and sets up proper configuration.\r\n     */\r\n    public configureFuzz(): void {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.useRoughnessFromMainTexture = false;\r\n        this._material.sheen.albedoScaling = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen weight (mapped to PBR sheen.intensity).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen weight value\r\n     */\r\n    public set fuzzWeight(value: number) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen color (mapped to PBR sheen.color).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen color as a Color3\r\n     */\r\n    public set fuzzColor(value: Color3) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.color = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen color texture (mapped to PBR sheen.texture).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen color texture or null\r\n     */\r\n    public set fuzzColorTexture(value: Nullable<BaseTexture>) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen roughness (mapped to PBR sheen.roughness).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen roughness value (0-1)\r\n     */\r\n    public set fuzzRoughness(value: number) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.roughness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the sheen roughness texture (mapped to PBR sheen.textureRoughness).\r\n     * Automatically enables sheen.\r\n     * @param value The sheen roughness texture or null\r\n     */\r\n    public set fuzzRoughnessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.sheen.isEnabled = true;\r\n        this._material.sheen.textureRoughness = value;\r\n    }\r\n\r\n    // ========================================\r\n    // ANISOTROPY\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the specular roughness anisotropy (mapped to PBR anisotropy.intensity).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy intensity value\r\n     */\r\n    public set specularRoughnessAnisotropy(value: number) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the specular roughness anisotropy.\r\n     * @returns The anisotropy intensity value\r\n     */\r\n    public get specularRoughnessAnisotropy(): number {\r\n        return this._material.anisotropy.intensity;\r\n    }\r\n\r\n    /**\r\n     * Sets the anisotropy rotation (mapped to PBR anisotropy.angle).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy rotation angle in radians\r\n     */\r\n    public set geometryTangentAngle(value: number) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.angle = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry tangent texture (mapped to PBR anisotropy.texture).\r\n     * Automatically enables anisotropy.\r\n     * @param value The anisotropy texture or null\r\n     */\r\n    public set geometryTangentTexture(value: Nullable<BaseTexture>) {\r\n        this._material.anisotropy.isEnabled = true;\r\n        this._material.anisotropy.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry tangent texture.\r\n     * @returns The anisotropy texture or null\r\n     */\r\n    public get geometryTangentTexture(): Nullable<BaseTexture> {\r\n        return this._material.anisotropy.texture;\r\n    }\r\n\r\n    /**\r\n     * Configures glTF-style anisotropy for the material.\r\n     * Note: PBR materials don't need this configuration, so this is a no-op.\r\n     * @param useGltfStyle Whether to use glTF-style anisotropy (ignored for PBR)\r\n     */\r\n    public configureGltfStyleAnisotropy(useGltfStyle: boolean = true): void {\r\n        // PBR materials don't need this configuration\r\n    }\r\n\r\n    // ========================================\r\n    // THIN FILM IRIDESCENCE\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the iridescence weight (mapped to PBR iridescence.intensity).\r\n     * Automatically enables iridescence.\r\n     * @param value The iridescence intensity value\r\n     */\r\n    public set thinFilmWeight(value: number) {\r\n        this._material.iridescence.isEnabled = value > 0;\r\n        this._material.iridescence.intensity = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence IOR (mapped to PBR iridescence.indexOfRefraction).\r\n     * @param value The iridescence IOR value\r\n     */\r\n    public set thinFilmIor(value: number) {\r\n        this._material.iridescence.indexOfRefraction = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness minimum (mapped to PBR iridescence.minimumThickness).\r\n     * @param value The minimum thickness value in nanometers\r\n     */\r\n    public set thinFilmThicknessMinimum(value: number) {\r\n        this._material.iridescence.minimumThickness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness maximum (mapped to PBR iridescence.maximumThickness).\r\n     * @param value The maximum thickness value in nanometers\r\n     */\r\n    public set thinFilmThicknessMaximum(value: number) {\r\n        this._material.iridescence.maximumThickness = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the thin film weight texture (mapped to PBR iridescence.texture).\r\n     * @param value The thin film weight texture or null\r\n     */\r\n    public set thinFilmWeightTexture(value: Nullable<BaseTexture>) {\r\n        this._material.iridescence.texture = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the iridescence thickness texture (mapped to PBR iridescence.thicknessTexture).\r\n     * @param value The iridescence thickness texture or null\r\n     */\r\n    public set thinFilmThicknessTexture(value: Nullable<BaseTexture>) {\r\n        this._material.iridescence.thicknessTexture = value;\r\n    }\r\n\r\n    // ========================================\r\n    // DISPERSION\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the transmission dispersion value.\r\n     * Note: PBR doesn't have direct dispersion support, so this stores it as metadata.\r\n     * @param value The dispersion value (stored as metadata)\r\n     */\r\n    public set transmissionDispersion(value: number) {\r\n        // PBR doesn't have a direct dispersion property, this would need custom shader modification\r\n        // For now, we'll store it as metadata\r\n        (this._material as any)._dispersion = value;\r\n    }\r\n\r\n    // ========================================\r\n    // UNLIT MATERIALS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets whether the material is unlit.\r\n     * @param value True to make the material unlit\r\n     */\r\n    public set unlit(value: boolean) {\r\n        this._material.unlit = value;\r\n    }\r\n\r\n    // ========================================\r\n    // GEOMETRY PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the geometry opacity (mapped to PBR alpha).\r\n     * @param value The opacity value (0-1)\r\n     */\r\n    public set geometryOpacity(value: number) {\r\n        this._material.alpha = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry opacity.\r\n     * @returns The opacity value (0-1)\r\n     */\r\n    public get geometryOpacity(): number {\r\n        return this._material.alpha;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry normal texture (mapped to PBR bumpTexture).\r\n     * Also forces irradiance computation in fragment shader for better lighting.\r\n     * @param value The normal texture or null\r\n     */\r\n    public set geometryNormalTexture(value: Nullable<BaseTexture>) {\r\n        this._material.bumpTexture = value;\r\n        this._material.forceIrradianceInFragment = true;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry normal texture.\r\n     * @returns The normal texture or null\r\n     */\r\n    public get geometryNormalTexture(): Nullable<BaseTexture> {\r\n        return this._material.bumpTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the normal map inversions for the material.\r\n     * @param invertX Whether to invert the normal map on the X axis\r\n     * @param invertY Whether to invert the normal map on the Y axis\r\n     */\r\n    public setNormalMapInversions(invertX: boolean, invertY: boolean): void {\r\n        this._material.invertNormalMapX = invertX;\r\n        this._material.invertNormalMapY = invertY;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry coat normal texture (mapped to PBR clearCoat.bumpTexture).\r\n     * Automatically enables clear coat.\r\n     * @param value The coat normal texture or null\r\n     */\r\n    public set geometryCoatNormalTexture(value: Nullable<BaseTexture>) {\r\n        this._material.clearCoat.isEnabled = true;\r\n        this._material.clearCoat.bumpTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the geometry coat normal texture.\r\n     * @returns The coat normal texture or null\r\n     */\r\n    public get geometryCoatNormalTexture(): Nullable<BaseTexture> {\r\n        return this._material.clearCoat.bumpTexture;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry coat normal texture scale.\r\n     * @param value The scale value for the coat normal texture\r\n     */\r\n    public set geometryCoatNormalTextureScale(value: number) {\r\n        if (this._material.clearCoat.bumpTexture) {\r\n            this._material.clearCoat.bumpTexture.level = value;\r\n        }\r\n    }\r\n}\r\n"]}