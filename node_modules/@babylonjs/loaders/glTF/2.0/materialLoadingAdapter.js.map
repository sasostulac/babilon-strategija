{"version":3,"file":"materialLoadingAdapter.js","sourceRoot":"","sources":["../../../../../dev/loaders/src/glTF/2.0/materialLoadingAdapter.ts"],"names":[],"mappings":"","sourcesContent":["import type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Color3 } from \"core/Maths/math.color\";\r\n\r\n/**\r\n * Interface for material loading adapters that provides a unified OpenPBR-like interface\r\n * for both OpenPBR and PBR materials, eliminating conditional branches in extensions.\r\n */\r\nexport interface IMaterialLoadingAdapter {\r\n    /**\r\n     * Gets the underlying material\r\n     */\r\n    readonly material: Material;\r\n\r\n    /**\r\n     * Whether the material should be treated as unlit\r\n     */\r\n    isUnlit: boolean;\r\n\r\n    // ========================================\r\n    // CULLING PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the back face culling\r\n     */\r\n    backFaceCulling: boolean;\r\n\r\n    /**\r\n     * Sets/gets the two sided lighting\r\n     */\r\n    twoSidedLighting: boolean;\r\n\r\n    // ========================================\r\n    // ALPHA PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the alpha cutoff value (used for alpha test mode)\r\n     */\r\n    alphaCutOff: number;\r\n\r\n    /**\r\n     * Sets/gets whether to use alpha from albedo/base color texture\r\n     */\r\n    useAlphaFromBaseColorTexture: boolean;\r\n\r\n    /**\r\n     * Sets/Gets whether the transparency is treated as alpha coverage\r\n     */\r\n    transparencyAsAlphaCoverage: boolean;\r\n\r\n    // ========================================\r\n    // BASE PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the base color (OpenPBR: baseColor, PBR: albedoColor)\r\n     */\r\n    baseColor: Color3;\r\n\r\n    /**\r\n     * Sets/gets the base color texture (OpenPBR: baseColorTexture, PBR: albedoTexture)\r\n     */\r\n    baseColorTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the base diffuse roughness (OpenPBR: baseDiffuseRoughness, PBR: baseDiffuseRoughness)\r\n     */\r\n    baseDiffuseRoughness: number;\r\n\r\n    /**\r\n     * Sets/gets the base diffuse roughness texture (OpenPBR: baseDiffuseRoughnessTexture, PBR: baseDiffuseRoughnessTexture)\r\n     */\r\n    baseDiffuseRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the base metalness (OpenPBR: baseMetalness, PBR: metallic)\r\n     */\r\n    baseMetalness: number;\r\n\r\n    /**\r\n     * Sets/gets the base metalness texture (OpenPBR: baseMetalnessTexture, PBR: metallicTexture)\r\n     */\r\n    baseMetalnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets whether to use roughness from metallic texture green channel\r\n     */\r\n    useRoughnessFromMetallicTextureGreen: boolean;\r\n\r\n    /**\r\n     * Sets whether to use metallic from metallic texture blue channel\r\n     */\r\n    useMetallicFromMetallicTextureBlue: boolean;\r\n\r\n    // ========================================\r\n    // SPECULAR PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures specular properties and enables OpenPBR BRDF model for edge color support\r\n     * @param enableEdgeColor - Whether to enable edge color support\r\n     */\r\n    enableSpecularEdgeColor(enableEdgeColor?: boolean): void;\r\n\r\n    /**\r\n     * Sets/gets the specular weight (OpenPBR: specularWeight, PBR: metallicF0Factor)\r\n     */\r\n    specularWeight: number;\r\n\r\n    /**\r\n     * Sets/gets the specular weight texture (OpenPBR: specularWeightTexture, PBR: metallicReflectanceTexture)\r\n     */\r\n    specularWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the specular color (OpenPBR: specularColor, PBR: reflectance)\r\n     */\r\n    specularColor: Color3;\r\n\r\n    /**\r\n     * Sets/gets the specular color texture (OpenPBR: specularColorTexture, PBR: reflectanceTexture)\r\n     */\r\n    specularColorTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the specular roughness (OpenPBR: specularRoughness, PBR: roughness)\r\n     */\r\n    specularRoughness: number;\r\n\r\n    /**\r\n     * Sets/gets the specular roughness texture\r\n     */\r\n    specularRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the specular IOR (OpenPBR: specularIor, PBR: indexOfRefraction)\r\n     */\r\n    specularIor: number;\r\n\r\n    // ========================================\r\n    // EMISSION PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the emissive color (OpenPBR: emissionColor, PBR: emissiveColor)\r\n     */\r\n    emissionColor: Color3;\r\n\r\n    /**\r\n     * Sets/gets the emissive luminance (OpenPBR: emissionLuminance, PBR: emissiveIntensity)\r\n     */\r\n    emissionLuminance: number;\r\n\r\n    /**\r\n     * Sets/gets the emissive texture\r\n     */\r\n    emissionColorTexture: Nullable<BaseTexture>;\r\n\r\n    // ========================================\r\n    // AMBIENT OCCLUSION\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the ambient occlusion texture (OpenPBR: ambientOcclusionTexture, PBR: ambientTexture)\r\n     */\r\n    ambientOcclusionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the ambient occlusion texture strength/level\r\n     */\r\n    ambientOcclusionTextureStrength: number;\r\n\r\n    // ========================================\r\n    // COAT PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures clear coat for PBR material\r\n     */\r\n    configureCoat(): void;\r\n\r\n    /**\r\n     * Sets/gets the coat weight (OpenPBR: coatWeight, PBR: clearCoat.intensity)\r\n     */\r\n    coatWeight: number;\r\n\r\n    /**\r\n     * Sets/gets the coat weight texture (OpenPBR: coatWeightTexture, PBR: clearCoat.texture)\r\n     */\r\n    coatWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the coat color (OpenPBR: coatColor, no PBR equivalent)\r\n     */\r\n    coatColor: Color3;\r\n\r\n    /**\r\n     * Sets the coat color texture (OpenPBR: coatColorTexture, no PBR equivalent)\r\n     */\r\n    coatColorTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the coat roughness (OpenPBR: coatRoughness, PBR: clearCoat.roughness)\r\n     */\r\n    coatRoughness: number;\r\n\r\n    /**\r\n     * Sets/gets the coat roughness texture (OpenPBR: coatRoughnessTexture, PBR: clearCoat.textureRoughness)\r\n     */\r\n    coatRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the coat index of refraction (IOR)\r\n     */\r\n    coatIor: number;\r\n\r\n    /**\r\n     * Sets the coat darkening (OpenPBR: coatDarkening, no PBR equivalent)\r\n     */\r\n    coatDarkening: number;\r\n\r\n    /**\r\n     * Sets the coat darkening texture (OpenPBR: coatDarkeningTexture, no PBR equivalent)\r\n     */\r\n    coatDarkeningTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the coat roughness anisotropy (OpenPBR: coatRoughnessAnisotropy, PBR: clearCoat.anisotropy.intensity)\r\n     */\r\n    coatRoughnessAnisotropy: number;\r\n\r\n    /**\r\n     * Sets the coat tangent angle for anisotropy (OpenPBR: geometryCoatTangentAngle, PBR: clearCoat.anisotropy.angle)\r\n     */\r\n    geometryCoatTangentAngle: number;\r\n\r\n    /**\r\n     * Sets the coat tangent texture for anisotropy (OpenPBR: geometryCoatTangentTexture, PBR: clearCoat.anisotropy.texture)\r\n     */\r\n    geometryCoatTangentTexture: Nullable<BaseTexture>;\r\n\r\n    // ========================================\r\n    // TRANSMISSION LAYER\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the transmission weight (OpenPBR: transmissionWeight, PBR: subSurface.refractionIntensity)\r\n     */\r\n    transmissionWeight: number;\r\n\r\n    /**\r\n     * Sets the transmission weight texture (OpenPBR: transmissionWeightTexture, PBR: subSurface.refractionIntensityTexture)\r\n     */\r\n    transmissionWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the attenuation distance (OpenPBR: attenuationDistance, PBR: subSurface.volumeIndexOfRefraction)\r\n     */\r\n    transmissionDepth: number;\r\n\r\n    /**\r\n     * Sets the attenuation color (OpenPBR: attenuationColor, PBR: subSurface.tintColor)\r\n     */\r\n    transmissionColor: Color3;\r\n\r\n    /**\r\n     * Sets the dispersion Abbe number\r\n     */\r\n    transmissionDispersionAbbeNumber: number;\r\n\r\n    /**\r\n     * Configures transmission for thin-surface transmission (KHR_materials_transmission)\r\n     */\r\n    configureTransmission(): void;\r\n\r\n    // ========================================\r\n    // VOLUME PROPERTIES\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the thickness texture (OpenPBR: thicknessTexture, PBR: subSurface.thicknessTexture)\r\n     */\r\n    volumeThicknessTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the thickness factor (OpenPBR: thickness, PBR: subSurface.maximumThickness)\r\n     */\r\n    volumeThickness: number;\r\n\r\n    // ========================================\r\n    // SUBSURFACE PROPERTIES (Subsurface Scattering)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures subsurface properties for PBR material\r\n     */\r\n    configureSubsurface(): void;\r\n\r\n    /**\r\n     * Sets/gets the subsurface weight\r\n     */\r\n    subsurfaceWeight: number;\r\n\r\n    /**\r\n     * Sets/gets the subsurface weight texture\r\n     */\r\n    subsurfaceWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets/gets the subsurface color (OpenPBR: subsurfaceColor, PBR: subSurface.tintColor)\r\n     */\r\n    subsurfaceColor: Color3;\r\n\r\n    /**\r\n     * Sets/gets the subsurface color texture (OpenPBR: subsurfaceColorTexture, PBR: subSurface.tintColorTexture)\r\n     */\r\n    subsurfaceColorTexture: Nullable<BaseTexture>;\r\n\r\n    // ========================================\r\n    // FUZZ LAYER (Sheen)\r\n    // ========================================\r\n\r\n    /**\r\n     * Configures initial settings for fuzz for material.\r\n     */\r\n    configureFuzz(): void;\r\n\r\n    /**\r\n     * Sets the fuzz weight (OpenPBR: fuzzWeight, PBR: fuzz.intensity)\r\n     */\r\n    fuzzWeight: number;\r\n\r\n    /**\r\n     * Sets the fuzz color (OpenPBR: fuzzColor, PBR: fuzz.color)\r\n     */\r\n    fuzzColor: Color3;\r\n\r\n    /**\r\n     * Sets the fuzz color texture (OpenPBR: fuzzColorTexture, PBR: fuzz.texture)\r\n     */\r\n    fuzzColorTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the fuzz roughness (OpenPBR: fuzzRoughness, PBR: fuzz.roughness)\r\n     */\r\n    fuzzRoughness: number;\r\n\r\n    /**\r\n     * Sets the fuzz roughness texture (OpenPBR: fuzzRoughnessTexture, PBR: fuzz.textureRoughness)\r\n     */\r\n    fuzzRoughnessTexture: Nullable<BaseTexture>;\r\n\r\n    // ========================================\r\n    // ANISOTROPY\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the specular roughness anisotropy (OpenPBR: specularRoughnessAnisotropy, PBR: anisotropy.intensity)\r\n     */\r\n    specularRoughnessAnisotropy: number;\r\n\r\n    /**\r\n     * Sets the anisotropy rotation (OpenPBR: anisotropyRotation, PBR: anisotropy.angle)\r\n     */\r\n    geometryTangentAngle: number;\r\n\r\n    /**\r\n     * Sets/gets the anisotropy texture (OpenPBR: geometryTangentTexture, PBR: anisotropy.texture)\r\n     */\r\n    geometryTangentTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Configures glTF-style anisotropy for OpenPBR materials\r\n     * @param useGltfStyle - Whether to use glTF-style anisotropy (default: true)\r\n     */\r\n    configureGltfStyleAnisotropy(useGltfStyle?: boolean): void;\r\n\r\n    // ========================================\r\n    // THIN FILM IRIDESCENCE\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the thin film weight\r\n     */\r\n    thinFilmWeight: number;\r\n\r\n    /**\r\n     * Sets the thin film IOR\r\n     */\r\n    thinFilmIor: number;\r\n\r\n    /**\r\n     * Sets the thin film thickness minimum\r\n     */\r\n    thinFilmThicknessMinimum: number;\r\n\r\n    /**\r\n     * Sets the thin film thickness maximum\r\n     */\r\n    thinFilmThicknessMaximum: number;\r\n\r\n    /**\r\n     * Sets the thin film iridescence texture\r\n     */\r\n    thinFilmWeightTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the thin film thickness texture\r\n     */\r\n    thinFilmThicknessTexture: Nullable<BaseTexture>;\r\n\r\n    // ========================================\r\n    // UNLIT MATERIALS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets the unlit flag (OpenPBR: unlit, PBR: unlit)\r\n     */\r\n    unlit: boolean;\r\n\r\n    // ========================================\r\n    // GEOMETRY PARAMETERS\r\n    // ========================================\r\n\r\n    /**\r\n     * Sets/gets the geometry opacity (OpenPBR: geometryOpacity, PBR: alpha)\r\n     */\r\n    geometryOpacity: number;\r\n\r\n    /**\r\n     * Sets/gets the geometry normal texture (OpenPBR: geometryNormalTexture, PBR: bumpTexture)\r\n     */\r\n    geometryNormalTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the normal map inversions for PBR material only\r\n     * @param invertX - Whether to invert the normal map on the X axis\r\n     * @param invertY - Whether to invert the normal map on the Y axis\r\n     */\r\n    setNormalMapInversions(invertX: boolean, invertY: boolean): void;\r\n\r\n    /**\r\n     * Sets/gets the coat normal texture (OpenPBR: geometryCoatNormalTexture, PBR: clearCoat.bumpTexture)\r\n     */\r\n    geometryCoatNormalTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Sets the coat normal texture scale\r\n     */\r\n    geometryCoatNormalTextureScale: number;\r\n}\r\n"]}