import { GLTFExporter } from "../glTFExporter.js";
import { PBRBaseMaterial } from "@babylonjs/core/Materials/PBR/pbrBaseMaterial.js";
import { OpenPBRMaterial } from "@babylonjs/core/Materials/PBR/openpbrMaterial.js";
const NAME = "KHR_materials_diffuse_roughness";
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export class KHR_materials_diffuse_roughness {
    constructor(exporter) {
        /** Name of this extension */
        this.name = NAME;
        /** Defines whether this extension is enabled */
        this.enabled = true;
        /** Defines whether this extension is required */
        this.required = false;
        this._wasUsed = false;
        this._exporter = exporter;
    }
    dispose() { }
    /** @internal */
    get wasUsed() {
        return this._wasUsed;
    }
    async postExportMaterialAdditionalTexturesAsync(context, node, babylonMaterial) {
        const additionalTextures = [];
        if (babylonMaterial instanceof PBRBaseMaterial) {
            if (babylonMaterial._baseDiffuseRoughness) {
                if (babylonMaterial._baseDiffuseRoughnessTexture) {
                    additionalTextures.push(babylonMaterial._baseDiffuseRoughnessTexture);
                }
                return additionalTextures;
            }
        }
        else if (babylonMaterial instanceof OpenPBRMaterial) {
            if (babylonMaterial.baseDiffuseRoughness) {
                if (babylonMaterial.baseDiffuseRoughnessTexture) {
                    additionalTextures.push(babylonMaterial.baseDiffuseRoughnessTexture);
                }
                return additionalTextures;
            }
        }
        return [];
    }
    // eslint-disable-next-line no-restricted-syntax
    postExportMaterialAsync(context, node, babylonMaterial) {
        return new Promise((resolve) => {
            let diffuseRoughnessFactor = null;
            let diffuseRoughnessTexture = null;
            if (babylonMaterial instanceof PBRBaseMaterial) {
                diffuseRoughnessFactor = babylonMaterial._baseDiffuseRoughness;
                diffuseRoughnessTexture = babylonMaterial._baseDiffuseRoughnessTexture;
            }
            else if (babylonMaterial instanceof OpenPBRMaterial) {
                diffuseRoughnessFactor = babylonMaterial.baseDiffuseRoughness;
                diffuseRoughnessTexture = babylonMaterial.baseDiffuseRoughnessTexture;
            }
            if (!diffuseRoughnessFactor) {
                resolve(node);
                return;
            }
            this._wasUsed = true;
            node.extensions = node.extensions || {};
            const diffuseRoughnessTextureInfo = this._exporter._materialExporter.getTextureInfo(diffuseRoughnessTexture);
            const diffuseRoughnessInfo = {
                diffuseRoughnessFactor: diffuseRoughnessFactor,
                diffuseRoughnessTexture: diffuseRoughnessTextureInfo ?? undefined,
            };
            if (diffuseRoughnessInfo.diffuseRoughnessTexture !== null) {
                this._exporter._materialNeedsUVsSet.add(babylonMaterial);
            }
            node.extensions[NAME] = diffuseRoughnessInfo;
            resolve(node);
        });
    }
}
GLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_diffuse_roughness(exporter));
//# sourceMappingURL=KHR_materials_diffuse_roughness.js.map