import { GLTFExporter } from "../glTFExporter.js";
import { OpenPBRMaterial } from "@babylonjs/core/Materials/PBR/openpbrMaterial.js";
import { PBRMaterial } from "@babylonjs/core/Materials/PBR/pbrMaterial.js";
const NAME = "KHR_materials_clearcoat_ior";
/**
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
export class KHR_materials_clearcoat_ior {
    /**
     * @param exporter The glTF exporter
     */
    constructor(exporter) {
        /** Name of this extension */
        this.name = NAME;
        /** Defines whether this extension is enabled */
        this.enabled = true;
        /** Defines whether this extension is required */
        this.required = false;
        this._wasUsed = false;
        this._exporter = exporter;
    }
    /** @internal */
    dispose() { }
    /** @internal */
    get wasUsed() {
        return this._wasUsed;
    }
    // eslint-disable-next-line no-restricted-syntax
    postExportMaterialAsync(context, node, babylonMaterial) {
        return new Promise((resolve) => {
            let coatIor = null;
            if (babylonMaterial instanceof OpenPBRMaterial) {
                coatIor = babylonMaterial.coatIor;
            }
            else if (babylonMaterial instanceof PBRMaterial) {
                coatIor = babylonMaterial.clearCoat.indexOfRefraction;
            }
            if (coatIor === null || coatIor === 1.5) {
                return resolve(node);
            }
            // This material must have the clearcoat extension already before
            // we can add the clearcoat IOR sub-extension
            const parentExt = node.extensions ? node.extensions["KHR_materials_clearcoat"] : null;
            if (!parentExt) {
                return resolve(node);
            }
            this._wasUsed = true;
            const coatIorInfo = {
                clearcoatIor: coatIor,
            };
            this._exporter;
            parentExt.extensions = parentExt.extensions || {};
            parentExt.extensions[NAME] = coatIorInfo;
            return resolve(node);
        });
    }
}
GLTFExporter.RegisterExtension(NAME, (exporter) => new KHR_materials_clearcoat_ior(exporter), 105);
//# sourceMappingURL=KHR_materials_clearcoat_ior.js.map